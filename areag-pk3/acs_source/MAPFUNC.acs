// These are common definitions used for map controlling scripts.

#define MAPPROP_LEVELNUM 0
#define MAPPROP_MAPCODE 1
#define MAPPROP_TEXTNAME 2
#define MAPPROP_RUNENAME 3
#define MAPPROP_LANGNAME 4

// MAP DEFINITIONS FOR ACS SIDE
// 0 - Levelnum
// 1 - MAPCODE
// 2 - Map Name
// 3 - Map Name texture
// 4 - Map's language name

#define MAX_MAPS 14
#define MAX_IMAGES 10

str mapList[MAX_MAPS][5] = {
	{ 0, "ADV00", "Outskirts", "", "ADV00"}, // OUTSKIRTS
	{ 1, "ADV01", "Grand Gateway", "", "ADV01"}, // GRAND GATEWAY
	{ 2, "ADV02", "LOST IMPACT", "", "ADV02"}, // LOST IMPACT
	{ 3, "ADV03", "ECLIPSE ENGINE", "", "ADV03"}, // ECLIPSE ENGINE
	{ 4, "ADV04", "QUEEN'S STUDY", "", "ADV04"}, // QUEEN'S STUDY
	{ 5, "ADV05", "TOWER OF THIRST", "", "ADV05"}, // TOWER OF THIRST
	{ 6, "ADV06", "KING'S DUNGEON", "", "ADV06"}, // KING'S DUNGEON
	{ 7, "ADV07", "ECLIPSE ENGINE", "", "ADV07"}, // ECLIPSE ENGINE
	{ 8, "ADV08", "REALM OF SHADOWS", "", "ADV08"}, // REALM OF SHADOWS
	{ 9, "ADV09", "TEMPORAL TOWER", "", "ADV09"}, // TEMPORAL TOWER
	{10, "ADV10", "THRONE ROOM", "", "ADV10"}, // THRONE ROOM
	{11, "ADV11", "BLACK MARKET", "", "ADV11"}, // BLACK MARKET
	

	{100, "TESTMAP", "Beyond Valley", "", "TESTMAP"},
	{101, "TESTMAP2", "Valley Coliseum", "", "TESTMAP2"}
};

int mapRoutes[MAX_MAPS+1][2] = {
	{ 0,  0}, // OUTSKIRTS
	{ 1,  1}, // GRAND GATEWAY
	{ 2, -1}, // LOST IMPACT
	{ 3, -1}, // ECLIPSE ENGINE
	{ 4, -1}, // QUEEN'S STUDY
	{ 5, -1}, // TOWER OF THIRST
	{ 6, -1}, // KING'S DUNGEON
	{ 7, -1}, // ECLIPSE ENGINE
	{ 8, -1}, // REALM OF SHADOWS
	{ 9, -1}, // TEMPORAL TOWER
	{10, -1}, // THRONE ROOM
	{11, -1}, // BLACK MARKET



	{100, 100}, // TESTMAP1 - Outer Valley
	{101, 101}, // TESTMAP2 - Valley Coliseum
	{-1, -1} // NOT FOUND
};

function int findMapRoute(int mapNum) {
	int ret = 0;

	for(int i = 0; i < MAX_MAPS; i++) {
		if(mapRoutes[i][0]==mapNum) {
			return mapRoutes[i][1];
		}
	}

	return -1;
}

str imageList[MAX_MAPS][MAX_IMAGES] = {
	{"TBTM_01", "TBTM_02"}
};

function int getMapByLevelNum(int levelNum)
{
	for(int i = 0; i < MAX_MAPS; i++)
	{
		if(mapList[i][MAPPROP_LEVELNUM] == levelNum)
		{
			return i;
		}
	}
	return -1;
}

function void checkDroneTransform(int tid, int drone)
{
	if(CheckActorInventory(tid, "DroneFlag")>0)
	{
		if(drone)
		{
			transformToDrone(tid);
		}
		else
		{
			transformFromDrone(tid);
		}
	}
}

function void transformToDrone(int tid)
{
	SetActorInventory(tid, "PlayerTempHealth", GetActorHealth(tid));
	MorphActor(tid, "AREAGDrone", "", 0x7ffffff, MRF_NEWTIDBEHAVIOUR|MRF_UNDOALWAYS|MRF_WHENINVULNERABLE|MRF_UNDOBYDEATH|MRF_UNDOBYDEATHSAVES, "", "");
	SetActorHealth(tid, CheckActorInventory(tid, "DroneBattery"));
}

function void transformFromDrone(int tid)
{
	SetActorInventory(tid, "DroneBattery", 0);
	UnmorphActor(tid, true);
	SetActorHealth(tid, CheckActorInventory(tid, "PlayerTempHealth"));
}
