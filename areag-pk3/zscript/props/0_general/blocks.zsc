// PUSH BLOCKS, FLOOR SWITCHES
class AREAGPushBlock : BasicActionProp
{
    // //$Category AREAG-Map Tools
    // //$Title Large Stone Block
	// //$Sprite E0WCF0
    // //$NotAngled

    mixin AREAG_Common;
    AREAGPlayerPawn plr;
    bool bPushActive;

    Default
    {
        +SOLID;
        +SLIDESONWALLS;
        +CANPASS;
        Height 64;
        Radius 30;
        maxstepheight 8;
        Scale 2.0;
    }

    bool isCloseEnough(Actor who) {
        return Distance2D(who) - who.radius - self.radius < 48.0 && abs(who.pos.z - self.pos.z) < (4 * maxstepheight);
    }

    override void BasicInit() {
        bPushActive = false;
    }

    override void BasicActivate(Actor activator) {
        if(!bPushActive && isCloseEnough(activator)) {
            plr = AREAGPlayerPawn(activator);
            plr.setInterruptState("BlockPushBegin");
            plr.SetBlockPush(self);
        }
    }

    States
    {
    Spawn:
        PCBA B 1;
        loop;
    }
}

const BLOCK_SPEED = 4.0;
const BLOCK_MAXSPEEDTICKS = 20.0;

extend class AREAGProtoWeapon {

    static const int[] blockCancelButtons = {
        BT_ATTACK,
        BT_ALTATTACK,
        BT_JUMP,
        BT_USE
    };

    int iPushTicks;

    action void A_StartPush() {
        invoker.iPushTicks = 0;
        invoker.plr.block.bPushActive = true;
        SetPlayerProperty(true, true, PROP_TOTALLYFROZEN);
        let tAng = roundToNearest(VectorAngle(invoker.plr.pos.x - invoker.plr.block.pos.x, invoker.plr.pos.y - invoker.plr.block.pos.y), 90);
        let tempAng = invoker.plr.angle;
        invoker.plr.block.Warp(invoker.plr, 64, 0, 0, tAng, WARPF_MOVEPTR|WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION);
        A_SetAngle(tempAng);
        A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
        A_Face(invoker.plr.block, 0, 0, 0, 0, FAF_BOTTOM, 0);
    }

    action void A_StopPush() {
        invoker.plr.block.bPushActive = false;
        invoker.plr.block.A_ChangeVelocity(0, 0, invoker.plr.block.velz, CVF_REPLACE);
        A_StopSound(CHAN_BODY);
        SetPlayerProperty(true, false, PROP_TOTALLYFROZEN);
        A_ChangeVelocity(-3, 0, 0, CVF_RELATIVE|CVF_REPLACE);
    }

    action State A_PushBlock() {

        bool cancelPressed = false;

        for(int i = 0; i < invoker.blockCancelButtons.size(); i++) {
			cancelPressed |= checkPressed(invoker.blockCancelButtons[i], invoker.plr.iButtons, invoker.plr.iOldButtons);
		}

        cancelPressed |= !invoker.plr.block.isCloseEnough(self);
        
        if(cancelPressed) {
            A_ClearInterruptState();
            return ResolveState("BlockPushEnd");
        } else {
            if(invoker.plr.iButtons & BT_FORWARD || invoker.plr.iButtons & BT_BACK) {
                invoker.iPushTicks++;

                double baseSpeed = BLOCK_SPEED;
                if(invoker.plr.iButtons & BT_BACK) {
                    baseSpeed = -baseSpeed;
                }
                
                if(invoker.iPushTicks == 1) {
                    A_StartSound("props/blockrumble", CHAN_BODY, CHANF_LOOP);
                }
                double speed = baseSpeed * min(BLOCK_MAXSPEEDTICKS, invoker.iPushTicks) / BLOCK_MAXSPEEDTICKS;
                double speedX = cos(angle) * speed;
                double speedY = sin(angle) * speed;
                A_ChangeVelocity(speedX, speedY, vel.z, CVF_REPLACE);
                invoker.plr.block.A_ChangeVelocity(speedX, speedY, invoker.plr.block.vel.z, CVF_REPLACE);
                Radius_Quake(1, 3, 0, 2, 0);
            } else {
                if(invoker.iPushTicks != 0) {
                    invoker.iPushTicks = 0;
                    A_StopSound(CHAN_BODY);
                }
                A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
                invoker.plr.block.A_ChangeVelocity(0, 0, invoker.plr.block.vel.z, CVF_REPLACE);
            }
        }

        return ResolveState(null);
    }

    States
    {
    BlockPushBegin:
        PUSH C 0 A_StartPush();
		PUSH CCCBBA 1;
        PUSH A 1 A_PushBlock();
        wait;
    BlockPushEnd:
        PUSH C 0 A_StopPush();
        PUSH ABC 1;
        goto Ready;
    }
}

class AREAGPushBlockSmall : AREAGPushBlock
{
    //$Category AREAG-Map Tools
    //$Title Small Metal Block
	//$Sprite E0WCG0
    //$NotAngled

    Default
    {
        Height 32;
        Radius 16;
        Scale 1.0;
    }

    override void BasicTick() {
        if(!bNOINTERACTION && (pos.z ~== floorz || bONMOBJ)) {
            if(roll != 0) {
                roll = 0;
            }
            if(pitch != 0) {
                pitch = 0;
            }
        }
    }

    States
    {
    Spawn:
        PCBA A 1;
        loop;
    }
}
