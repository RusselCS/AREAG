class HornPickup : BasicActiveInventory
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_TREASURE;
        BasicInventory.PickupID PICKMSG_RITUALHORN;
        BasicInventory.Checkitem "HornTrigger";
        Scale 0.7;
    }

    override void giveItemTrigger(AREAGPlayerPawn plr) {
		plr.pushToggleTrigger(new("ToggleStateMap").Init("HornFlag", "HornOff"));
	}

	States
	{
	SpawnFrames:
		HRN1 A 1;
		loop;
	}
}

class HornFlag : Once {}

extend class BasicActiveTrigger
{
    States
    {
    HornOff:
		TNT1 A 0 A_ClearInterruptState();
		fail;
    }
}

class HornTrigger : BasicActiveTrigger
{
    Default
    {
        inventory.icon "ICOIN2";
    }

	States
	{
	TreasureUse:
		TNT1 A 0 A_SetInterruptState("HornSelect");
		fail;
	}
}

extend class AREAGProtoWeapon {

	int currentNote;
	Actor noteHandler;

	static const int hornInputs[] = {
		BT_FORWARD,
		BT_BACK,
		BT_MOVELEFT,
		BT_LEFT,
		BT_MOVERIGHT,
		BT_RIGHT,
		BT_ATTACK,
		BT_ALTATTACK
	};

	static const int hornMap[] = {
		0, 1, 2, 2, 3, 3, 4, 5
	};

	action void A_InitHorn() {
		SetPlayerProperty(0, 1, PROP_FROZEN);
		A_GiveInventory("HornFlag", 1);
		invoker.currentNote = -1;
	}

	bool inputHasNote(int buttons, int note)
	{
		if(note < 0) {
			return false;
		}
		for(int i = 0; i < AREAGProtoWeapon.hornMap.size(); i++) {
			if(AREAGProtoWeapon.hornMap[i] == note && (buttons & AREAGProtoWeapon.hornInputs[i])) {
				return true;
			}
		}
		return false;
	}

	int getNoteFromInput(int buttons) {
		if(inputHasNote(buttons, currentNote)) {
			return currentNote;
		}

		for(int i = 0; i < AREAGProtoWeapon.hornInputs.size(); i++) {
			if((buttons & AREAGProtoWeapon.hornInputs[i])) {
				return AREAGProtoWeapon.hornMap[i];
			}
		}
		return -1;
	}

	void playHornSound(int which) {
		if(noteHandler) {
			noteHandler.A_Die();
		}
		if(which < 0 || which >= 6) {
			
		} else {
			bool sp;
			[sp, noteHandler] = plr.A_SpawnItemEx("hornNoteHandler", 10);
			noteHandler.mass = which;
		}
	}

    action State A_HornReady() {
		if(!invoker.plr.getInterruptState()) {
			return ResolveState("HornDeselect");
		}

        int iButtons = AREAGProtoPlayer(self).iButtons;

        if(invoker.currentNote != invoker.getNoteFromInput(iButtons)) {
			invoker.currentNote = invoker.getNoteFromInput(iButtons);
			invoker.playHornSound(invoker.currentNote);
			if(invoker.currentNote >= 0) {
				return ResolveState("HornUse");
			}
		}

        return ResolveState(null);
    }

	action State A_HornHold() {
		if(!invoker.plr.getInterruptState()) {
			return ResolveState("HornDeselect");
		}

		int iButtons = AREAGProtoPlayer(self).iButtons;

		if(invoker.inputHasNote(iButtons, invoker.currentNote)) {
			return ResolveState(null);
		} else {
			invoker.currentNote = invoker.getNoteFromInput(iButtons);
			invoker.playHornSound(invoker.currentNote);
			if(invoker.currentNote >= 0) {
				return ResolveState("HornUse");
			}

			return ResolveState("HornEnd");	
		}
	}

	action void A_HornEnd() {
		SetPlayerProperty(0, 0, PROP_FROZEN);
		A_TakeInventory("HornFlag", 1);
		invoker.currentNote = -1;
		invoker.plr.A_SpawnItemEx("HornNoteClear", 10);
		invoker.playHornSound(invoker.currentNote);
	}

    States
    {
    HornSelect:
		TNT1 A 2 A_InitHorn();
		HRN1 BCD 1;
	HornReady:
        HRN1 E 1 A_HornReady();
        wait;
	HornUse:
		HRN1 FGH 2 A_HornHold();
		wait;
	HornEnd:
		HRN1 GF 1;
		goto HornReady;
	HornDeselect:
		HRN1 A 0 A_HornEnd();
		HRN1 IJK 1;
		TNT1 A 4;
		TNT1 A 1 A_JumpIf(true, "Ready");
		wait;
    }
}

class hornNoteHandler : Actor
{
	static const String hornSounds[] = {
		"c", "d", "e", "f", "g", "a"
	};

	Default
	{
		height 2;
		radius 2;
		+NOINTERACTION;
		+NOCLIP;
		+SHOOTABLE;
		mass 0;
	}

	States
	{
	Spawn:
		TNT1 A 1;
		TNT1 A 0 A_StartSound(String.format("treasures/hornstart_%s", hornNoteHandler.hornSounds[mass]), CHAN_BODY, CHANF_DEFAULT, 1.0, ATTN_NONE);
		TNT1 A 2;
		TNT1 A 0 A_StartSound(String.format("treasures/horn_%s", hornNoteHandler.hornSounds[mass]), CHAN_BODY, CHANF_LOOPING, 1.0, ATTN_NONE);
		TNT1 A 1;
		wait;
	Death:
		TNT1 A 0;
		TNT1 A 0 A_StartSound(String.format("treasures/hornend_%s", hornNoteHandler.hornSounds[mass]), CHAN_BODY, CHANF_DEFAULT, 1.0, ATTN_NONE);
		TNT1 A 10;
		stop;
	}
}

class HornNoteClear : HornNoteHandler
{
	States
	{
	Spawn:
		TNT1 A 35;
		stop;
	Death:
		TNT1 A 0;
		stop;
	}
}

class HornSwitch : ZSCSwitchCrystal
{
	//$Category AREAG-Map Tools
    //$Title Music Switch
	//$Sprite E0WAE0
    //$NotAngled

	Default
	{
		+NOINTERACTION;
	}

	string user_songCode;
	int checkPos;
	Actor currentNote;

	override void BasicInit() {
		checkPos = 0;
	}
	
	override void BasicTick() {
		if(CheckProximity("HornNoteClear", 2048.0, 1, CPXF_NOZ|CPXF_SETTRACER)) {
			tracer.A_Die();
			checkPos = 0;
		} else {
			if(CheckProximity("HornNoteHandler", 2048.0, 1, CPXF_NOZ|CPXF_SETTRACER)) {
				if(tracer != currentNote) {
					currentNote = tracer;
					Console.printf("Got note %s", HornNoteHandler.hornSounds[currentNote.mass]);
					if(user_songCode.mid(checkPos, 1) == HornNoteHandler.hornSounds[currentNote.mass]) {
						console.printf("Note match in post");
						checkPos++;
						if(checkPos >= user_songCode.length()) {
							console.printf("Song complete.");
							switchOn(false);
							checkPos = 0;
						}
					} else {
						console.printf("Match failed, resetting queue.");
						checkPos = 0;
					}
				}
			} else {
				if(currentNote) {
					Console.printf("Note is gone");
					currentNote = null;
				}
			}
		}
	}
}
