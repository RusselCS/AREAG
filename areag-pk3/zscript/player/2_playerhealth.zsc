
extend class AREAGPlayerPawn {

    int lastHealth;
    int lastFallStun;

    void AREAGHealthInit() {
        lastHealth = health;
        lastFallStun = 0;
        bBUDDHA = true;
        updateHealth();
    }

    void AREAGHealthTick() {

		if(CountInv("DroneFlag") == 0) {
			if(lastHealth != health) {
				updateHealth();
				lastHealth = health;
			}

			if(CountInv("MaxHealthBars") * HP_SEG_MAX != starthealth){
				updateHealth();
			}
		}
    }
	
	void updateHealth() {

		int hp = health;
		int healthBars = areag_calcHPBars(hp);
		int hpPool = hp % HP_SEG_MAX;
		if(hpPool == 0) {
			hpPool = HP_SEG_MAX;
		}
		int maxHP = CountInv("MaxHealthBars") * HP_SEG_MAX;

		if(starthealth != maxHP) {
			maxhealth = maxHP;
		}

		if(healthBars < CountInv("ArmorBars")) {
			SetInventory("ArmorBars", healthBars);
            bBUDDHA = true;
		}
		SetInventory("HealthBars", healthBars);
		SetInventory("HealthCounter", hpPool);
	}

	int areag_calcHPBars(int hp) {
		int r = hp / HP_SEG_MAX;
		if(r*HP_SEG_MAX < hp)
			r++;
		return r;
	}

	override int DamageMobj(Actor inflictor, Actor source, int dmg, Name mod, int flags, double ng) {
		
		if(bINVULNERABLE || CountInv("DroneFlag")) {
			return super.DamageMobj(inflictor, source, dmg, mod, flags, ng);
        } else if(mod == "Drowning") {
            if(dmg >= health) {
                bBUDDHA = false;
            }
            return super.DamageMobj(inflictor, source, dmg, mod, flags, ng);
        } else if(mod == "Slime") {
			if(CountInv("DroneFlag") > 0) {
				health = 1;
			} else {
				if(countInv("PendantProtection") > 0) {
					dmg = 0;
				}
			}
            if(dmg >= health) {
                bBUDDHA = false;
            }
            return super.DamageMobj(inflictor, source, dmg, mod, flags, ng);
        } else {

			if(CountInv("ShieldPower") > 0) {
				double dmgAng = VectorAngle(inflictor.pos.x - pos.x, inflictor.pos.y - pos.y);
				if(angleBetween(angle, dmgAng-30.0, dmgAng+30.0)) {
					dmg = 0;
				}
			}

			int currentShield = CountInv("ArmorBars");
			int targetHP = health - dmg;
			bool imhit = false;

			if(areag_calcHPBars(targetHP) < currentShield) {
				targetHP = areag_calcHPBars(targetHP) * HP_SEG_MAX;
				imhit = true;
			}
			int trueDmg = health - targetHP;

			trueDmg = super.DamageMobj(inflictor, source, trueDmg, mod, flags, ng);
			updateHealth();

            if(health == 1) {
                imhit = true;
                bBUDDHA = false;
                A_SetInventory("ArmorBars", 0);
            }

			if(imhit) {
				A_StartSound("player/ouch", CHAN_VOICE);
				ACS_NamedExecuteAlways("status_invuln", 0);
			}
			
			return trueDmg;
		}
	}
}
