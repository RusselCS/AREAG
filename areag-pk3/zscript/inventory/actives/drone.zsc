class DronePickup : BasicActiveInventory
{
    Default
    {
        inventory.pickupmessage "";
        +INVENTORY.AUTOACTIVATE;
        +FLOATBOB;
        +NOGRAVITY;
        Height 64; // tall
        Scale 1.0;
        BasicInventory.PickupType PICKTYPE_TREASURE;
        BasicInventory.PickupID PICKMSG_SPIDERDRONE;
        BasicInventory.Checkitem "DroneTrigger";
    }

    override void giveItemTrigger(AREAGPlayerPawn plr) {
		plr.A_GiveInventory("Battery", 100);
		plr.pushToggleTrigger(new("ToggleStateMap").Init("DroneFlag", "DroneOff"));
	}

	States
	{
	SpawnFrames:
		SDRO C 1;
		loop;
	}
}

extend class BasicActiveTrigger
{
    action void A_TransformFromDrone()
    {
        AREAGPlayerPawn(self).transformFromDrone();
    }

    States
    {
    DroneOff:
		TNT1 A 0 A_TransformFromDrone();
		fail;
    }
}

class DroneTrigger : BasicActiveTrigger
{
    Default
    {
        inventory.icon "ICOIN1";
    }

	States
	{
	TreasureUse:
        TNT1 A 0 A_JumpIf(CountInv("Battery") < 100, "FailUse");
		TNT1 A 0 A_SetInterruptState("DroneUse");
		fail;
	}
}

const DRONESIZE_RADIUS = 12;
const DRONESIZE_HEIGHT = 24;
const DRONESIZE_VIEWHEIGHT = 20;
const DRONESIZE_ATTACKZOFFSET = 5;
const DRONEHP_COOLDOWN = 35;

extend class AREAGProtoWeapon {

    Actor dronePoint;

    action void A_TransformToDrone() {
        invoker.plr.transformToDrone(invoker.dronePoint);
        invoker.dronePoint = null;
    }

    action void A_FireDroneMissile() {
        A_StartSound("weapon/dynamitethrow", CHAN_WEAPON);
        invoker.dronePoint = A_FireProjectile("DroneTransitionMissile");
    }

    States
    {
    DroneUse:
		// Because this is morphing, I'm unsure if these items stick around
		// so this item needs to take away the framework controlling items
		// BEFORE morphing, because the weapon may be reset before anything can
		// go away
		TNT1 A 2;
		WDRO ABC 1;
		WDRO E 0 A_FireDroneMissile();
		WDRO DEF 1;
		WDRO G 6;
        TNT1 A 0 A_ClearInterruptState();
		TNT1 A 0 A_TransformToDrone();
		WDRO G 1 A_WeaponReady(WRF_NOFIRE);
		wait;
    }
}

extend class AREAGPlayerPawn {

    int iWalkCooldown;
    int iLevelNum;
    bool bDroneChangingLevel;
    double dAngle;

    int iOldHealth;
    int iDroneHPCooldown;

    Vector3 returnPoint;

    Name getDroneSoundClass() {
        return "drone";
    }

    void transformToDrone(Actor who) {
        A_SpawnItemEx("DronePlayerDummy", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_TRANSFERSPRITEFRAME);
        A_GiveInventory("DronePlasmaGun");
        A_SelectWeapon("DronePlasmaGun");
		A_GiveInventory("DroneFlag", 1);
        A_StartSound("drone/activate", CHAN_BODY);
        ACS_NamedExecuteAlways("drone_curtain", 0, true);
        iBatteryRegenStack++;
        soundclass = getDroneSoundClass();
        updateJumpSpeed();
        iDroneHPCooldown = DRONEHP_COOLDOWN;
        iOldHealth = health;
        
        maxstepheight = 16;

        returnPoint = (pos.x, pos.y, floorz);
        dAngle = angle;

        iWalkCooldown = 0;

        A_SetSize(DRONESIZE_RADIUS, DRONESIZE_HEIGHT);
        changeViewHeight(DRONESIZE_VIEWHEIGHT, true);
        attackZOffset = DRONESIZE_ATTACKZOFFSET;

        iLevelNum = level.levelnum;

        if(who) {
            A_ChangeVelocity(who.vel.x, who.vel.y, who.vel.z, CVF_REPLACE);
            Warp(who);
            who.Destroy();
        }
    }

    void transformFromDrone() {
        A_TakeInventory("DronePlasmaGun", 1);
        A_SetHealth(iOldHealth);
		A_TakeInventory("DroneFlag", 1);
        A_SetInventory("Battery", 0);
        ACS_NamedExecuteAlways("drone_curtain", 0, false);
        iBatteryRegenStack--;
        A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
        soundclass = getClydeSoundClass();
        updateJumpSpeed();
        maxstepheight = dBaseStepHeight;

        if(iLevelNum != level.levelnum) {
            bDroneChangingLevel = true;
            ACS_NamedExecuteAlways("map_switchto", 0, iLevelNum, 1, true);
        } else {
            finishDroneRevert();
        }
    }

    void finishDroneRevert() {
        A_StartSound("drone/disengage", CHAN_BODY);
        Warp(self, returnPoint.x, returnPoint.y, returnPoint.z, dAngle, WARPF_ABSOLUTEPOSITION|WARPF_ABSOLUTEANGLE);
        bDroneChangingLevel = false;
        iWalkCooldown = 0;

        A_SetSize(dBaseRadius, dStartingHeight);
        changeViewHeight(dStartingViewHeight, true);
        attackZOffset = dBaseAttackZOffset;
        if(CountInv("ArmorBars") > 0) {
            bBUDDHA = true;
        } else {
            bBUDDHA = false;
        }
    }

    override void AREAGDroneTick() {

        if(iDroneHPCooldown <= 0) {
            if(health <= 1) {
                transformFromDrone();
            } else {
                A_SetHealth(health-1);
                iDroneHPCooldown = DRONEHP_COOLDOWN;
            }
        } else {
            iDroneHPCooldown--;
        }

        if(health != CountInv("Battery")) {
            A_SetInventory("Battery", health);
        }

        if(!bBUDDHA) {
            bBUDDHA = true;
        }
        
        if(bOnGround && AREAGIsWalking()) {
            if(iWalkCooldown == 0) {
                A_StartSound("*footstep", CHAN_5);
                iWalkCooldown = 5;
            }

            if(iWalkCooldown > 0) {
                iWalkCooldown--;
            }
        }

        if(CountInv("LegsUnderwater") > 0 ||
           CountInv("HeadUnderwater") > 0 ||
           CountInv("DroneRevertFlag") > 0) {
            transformFromDrone();
            A_TakeInventory("DroneRevertFlag", 1);
        }
    }

    vector2 droneWeaponBob(Weapon wep, double ticfrac)
    {
        vector2 p[2];

        double ang = wep.BobSpeed * 128 * Player.GetWBobSpeed() * (Level.Time) * 0.4;
        prevViewBob = Lerp(prevViewBob, ViewBob, ticfrac/2);
        let yFracMult = 0.05-sin(ang) * prevViewBob * 0.05;
        double boby = 0;

        boby = Player.Bob * wep.BobRangeY;
        boby *= prevBob.Y;
        p[0] = (0, boby+5.0);

        boby = Player.Bob * wep.BobRangeY;
        boby *= prevBob.Y;
        p[1] = (0, boby+5.0);

        prevBob.Y = yFracMult;
        
        vector2 interp = p[0] * (1 - 0.5) + p[1] * 0.5;
        interp.y += Lerp(lerpVelZ, vel.z, 0.5);

        return interp;
    }
}

class DroneRevertFunc : CustomInventory
{
    Default
    {
        +INVENTORY.AUTOACTIVATE;
    }

    action void A_FinishDroneRevert() {
        AREAGPlayerPawn(self).finishDroneRevert();
    }

	States
	{
	Use:
		TNT1 A 0 A_FinishDroneRevert();
        stop;
    }
}

class DroneTransitionMissile : BasicProjectile
{
    Default
    {
        PROJECTILE;
        +THRUACTORS;
        +BLOCKASPLAYER;
        -NOGRAVITY;
        gravity 1.2;
        bouncetype "Doom";
        bouncefactor 0.0;
        wallbouncefactor 0.0;
        DamageFunction (0);
        Speed 24;
    }
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 ThrustThingZ(0, 30, 0, 0);
		SDRO A 4;
		SDRO B 1;
		wait;
	}
}

class DronePlasmaGun : Weapon
{
    Default
    {
        +WEAPON.WIMPY_WEAPON;
    }
	States
	{
	Ready:
		SDRW A 1 A_WeaponReady;
		Loop;
	Deselect:
        TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower;
        TNT1 A 1 A_Lower;
        loop;
	Select:
        TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise;
        TNT1 A 1 A_Raise;
        loop;
	Fire:
		SDRW B 0 A_StartSound("weapon/dronelaser", CHAN_WEAPON);
		SDRW B 0 A_FireProjectile("DroneActivator", 0, 0, 0, 0);
		SDRW B 0 A_FireProjectile("DroneLaser", 0, 0, -8, 0);
		SDRW B 0 A_FireProjectile("DroneLaser", 0, 0, 8, 0);
		SDRW B 2 BRIGHT;
		SDRW CDEFFGGH 1;
		SDRW A 8;
		Goto Ready;
	}
}

class PlayerTempHealth : Counter {}
class MapTransition : Once {}

class DroneFlag : Once {}
class DroneRevertFlag : Once {} // For reverting the drone form in something that isn't part of the Drone's core functions.

class DroneLaser : BasicFastProjectile
{
    Default
    {
        PROJECTILE;
        +BLOODSPLATTER;
        -ACTIVATEIMPACT;
        +FORCEXYBILLBOARD;
        missiletype "DroneLaserTrail";
        missileheight 8;
        renderstyle "add";
        Radius 6;
        Height 7;
        DamageFunction (5);
        speed 45;
        scale 0.2;
        reactiontime 10;
    }
	States
	{
	Spawn:
		DLAZ A 1 A_Countdown;
		loop;
	}
}

class DroneActivator : DroneLaser
{
    Default
    {
        DamageFunction (0);
        renderstyle "none";
        missiletype "";
        +ACTIVATEIMPACT;
    }
}

class DroneLaserTrail : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        renderstyle "add";
        scale 0.2;
    }
	States
	{
	Spawn:
		DLAZ AAA 1;
		stop;
	}
}

class DronePlayerDummy : Actor
{
    Default
    {
        -SOLID;
        +NOCLIP;
        +MISSILE;
        renderstyle "translucent";
        Alpha 1.0;
    }
	States
	{
	Spawn:
		"####" A 1 A_JumpIf(CountInv("DroneFlag", AAPTR_TARGET) == 0, "Death");
		loop;
    Death:
        TNT1 A 0;
        stop;
	}
}
