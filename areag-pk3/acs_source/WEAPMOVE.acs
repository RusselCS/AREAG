#library "weapmove"
#include "zcommon.acs"
#include "commfunc.acs"

// The following script handles weapon bobbing.
// The base movement factor is used 

script "weapmove_enter" (void)//ENTER
{
	int pln = PlayerNumber();
	int tid = pln + 1000;
	
	int velx, vely, velz;
	int netVel;
	int moveAng = 0.0;
	int fallAng = 0.0;
	int destX, destY;
	int iterX, iterY;
	bool landed = false;
	
	int maxVel = 12.8384;
	
	int buttons, oldButtons;
	
	do
	{
		if(CheckInventory("DroneFlag")==0)
		{
			oldButtons = buttons;
			buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			velx = GetActorVelX(0);
			vely = GetActorVelY(0);
			velz = GetActorVelZ(0);
			netVel = FixedSqrt(fixedmul(velx, velx) + fixedmul(vely, vely));
			
			int maxHeight = 0.08;
			int velFactor = fixeddiv(netVel, maxVel);
			
			//print(f:netVel, s:" / ", f:maxVel, s:" = ", f:velFactor);
			int trigPos = 0;
			
			if(landed)
			{
				destY = fixedmul(fixedmul(trigPos, maxHeight), 1.0)+maxHeight;
			}
			else
			{
				destY = fixedmul(fixedmul(trigPos, maxHeight), velFactor)+maxHeight;
			}
			destX = 0;
			
			if(!CheckInventory("OnGround"))
			{
				fallAng = fixeddiv(velz, 30.0);
				destY += fixedmul(fixedMul(fallAng, fallAng), fallAng);
				destY = clamp(destY, 0.6, -0.18);
				landed = false;
				if(CheckInventory("ZSCTrigHaltViewbob") == 0) {
					GiveInventory("ZSCTrigHaltViewbob", 1);
				}
			}
			else
			{
				if(CheckInventory("ZSCTrigHaltViewbob") != 0) {
					TakeInventory("ZSCTrigHaltViewbob", 1);
				}
				if(fallAng != 0.0)
				{
					moveAng = 0.0;
					fallAng = 0.0;
					landed = true;
				}
			}
			
			if(!landed)
			{
				iterY = iterateTowards(iterY, 0.04, destY);
			}
			else
			{
				iterY = iterateTowards(iterY, 0.1, destY);
			}
			
			updateWeapon(destX, iterY);
		}
		else
		{
			updateWeapon(0, 0);
		}
		delay(1);
	}
	while(GetActorHealth(tid)>0);
}

function void updateWeapon(int x, int y)
{
	x = x * 100 >> 16;
	y = y * 100 >> 16;
	
	if(x < 0)
	{
		SetInventory("PosWeapOffsetX", 0);
		SetInventory("NegWeapOffsetX", -x);
	}
	else
	{
		SetInventory("PosWeapOffsetX", x);
		SetInventory("NegWeapOffsetX", 0);
	}
	
	if(y < 0)
	{
		SetInventory("PosWeapOffsetY", 0);
		SetInventory("NegWeapOffsetY", -y);
	}
	else
	{
		SetInventory("PosWeapOffsetY", y);
		SetInventory("NegWeapOffsetY", 0);
	}
	
	GiveInventory("UpdateWeapOffset", 1);
}

script "weapmove_respawn" RESPAWN
{
	ACS_NamedExecuteAlways("weapmove_enter", 1);
}
