const SUB_KNIFE = 0;
const SUB_DYNAMITE = 1;

const HEALTH_MAX = -1;

const MAP_TABLET_WRAP = 100;

enum PickupTypes {
	PICKTYPE_ARTIFICE,
	PICKTYPE_WEAPON,
	PICKTYPE_SUBWEAPON,
	PICKTYPE_TREASURE
}

enum UpgradeTypes {
	PICKMSG_GEAR,
	PICKMSG_STEAM,
	PICKMSG_KNIFE,
	PICKMSG_HEALTHUP,
	PICKMSG_DYNAMITE,
	PICKMSG_NOVAPACK,

	PICKMSG_SPIDERDRONE,
	PICKMSG_BEEDRONE,
	PICKMSG_STEELWHIP,
    PICKMSG_TRIBALSHIELD,
    PICKMSG_RUBYKEY,
    PICKMSG_COBALTKEY,
    PICKMSG_PERIDOTKEY,
    PICKMSG_GOLDKEY,
}

class Once : Inventory
{
    Default
    {
        inventory.amount 1;
        inventory.maxamount 1;
    }
}

class Counter : Inventory
{
    Default
    {
        inventory.amount 1;
        inventory.maxamount 65536;
    }
}

class AGCoin : Counter {}

class ZSCCoinPickup : Counter
{
    Default {
        inventory.pickupmessage "";
        -INVENTORY.INVBAR;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        self.sprite = GetSpriteIndex(name("COIN"));

        if(amount < 5) {
            // Do nothing
        } else if(amount >= 5 && amount < 10) {
            self.frame = 1;
        } else if(amount >= 10 && amount < 50) {
            self.frame = 2;
        } else if(amount >= 50) {
            self.frame = 3;
        }
    }

    override String PickupMessage ()
	{
        CallACS("status_smallpickup", 0, amount);
		return "";
    }
    
    // SUPER jank method of implementing this, but
    // this gives X coins, and then *does not* give the item
    // itself
    override bool CanPickup(Actor toucher)
	{
        int res = super.CanPickup(toucher);
        
        if(res) {
            toucher.A_GiveInventory("AGCoin", amount);
        }

		return res;
    }
    
    override void AttachToOwner (Actor other)
	{
		becomeItem();
	}
}

class BasicEffect : Actor
{
    Default
    {
        PROJECTILE;
        +NOINTERACTION;
        +THRUACTORS;
        +NOGRAVITY;
        renderstyle "translucent";
        alpha 1.0;
        height 1;
        radius 1;
    }
}

class ZSCStoneBody : Actor
{
    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        int dmg = super.DamageMobj(inflictor, source, min(damage, 1), mod, flags, angle);
        return dmg;
    }
}

// BASIC ACTORS //
class BasicFastProjectile : FastProjectile
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(true, "SpawnLoop");
		goto SpawnLoop;
	SpawnLoop:
		TNT1 A 0;
		stop;
	}
}

class BasicProjectile : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(true, "SpawnLoop");
		goto SpawnLoop;
	SpawnLoop:
		TNT1 A 0;
		stop;
	}
}

class BasicInventory : CustomInventory
{ 
    int iPickupId;
    int ptType;
    String sCheckItem;
 
    property PickupID: iPickupId;
    property PickupType: ptType;
    property CheckItem: sCheckitem;

    int iTickNum;

    action void A_PickupMessage() {
        ACS_NamedExecuteAlways("pickups_displayMessage", 0, invoker.ptType, invoker.iPickupId);
    }
 
    action void A_ShopSpawn() {
        bNOGRAVITY = false;
        bFLOATBOB = false;
        bFLOAT = false;
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        iTickNum = 0;
    }

    override void Tick() {
        super.Tick();

        iTickNum++;

        if(bFLOATBOB && bSPECIAL) {
            if(iTickNum == 1) {
                A_TransferPointer(AAPTR_PLAYER1, AAPTR_DEFAULT, AAPTR_DEFAULT, AAPTR_TRACER);
            }
            A_FaceTracer();
            A_SpawnItemEx("BasicItemTrail", -1, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);

            if(iTickNum % 10 == 0) {
                A_SpawnItemEx("BasicItemParticle", frandom(-32, 32), 0, -16, 0, 0, 1, frandom(0, 360), SXF_ABSOLUTEANGLE);
            }
        }
    }
 
    Default
    {
        inventory.pickupmessage "";
        +FLOATBOB;
        +NOGRAVITY;
        +FLOAT;
        Height 64;
    }
 
    States
    {
    Spawn:
        TNT1 A 0;
        stop;
    PickupEffect:
        TNT1 A 0;
        stop;
   
    Pickup:
        TNT1 A 0 A_JumpIfInventory(invoker.sCheckItem, 1, "PickupFail");
        TNT1 A 0 A_PickupMessage();
        TNT1 A 0 A_JumpIf(true, "PickupEffect");
        goto PickupEffect;
    PickupFail:
        TNT1 A 0;
        fail;
    ShopSpawn:
        "----" "#" 0 A_ShopSpawn();
        "----" "#" 1;
        wait;
    }
}

class BasicItemTrail : BasicEffect
{
    Default
    {
        renderstyle "add";
    }

    States
    {
    Spawn:
        "----" "#" 0;
        "----" "#" 1 A_SetScale(scale.x*1.1);
        "----" "#" 0 A_FadeOut();
        loop;
    }
}

class BasicItemParticle : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        scale 0.25;
        renderstyle "add";
        reactiontime 70;
    }

    States
    {
    Spawn:
        SPRK A 0;
        SPRK A 0 A_SetRoll(roll+2);
        SPRK A 1 A_SpawnItemEx("BasicItemParticleTrail", 0, 0, 0, 0, 0, -2, 0, SXF_TRANSFERROLL);
        SPRK A 0 A_CountDown();
        loop;
    }
}

class BasicItemParticleTrail : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        renderstyle "add";
        scale 0.25;
    }

    States
    {
    Spawn:
        SPRK A 1 A_FadeOut();
        loop;
    }
}
