const HP_SEG_MAX = 25;

class ZSCPlayerPawn : PlayerPawn {

	int iButtons, iOldButtons;
	int lastHealth;

	int iSelectedWep;
    int iPrevSelect;

	override void Tick() {
		Super.Tick();

		if(lastHealth != health) {
			updateHealth();
			lastHealth = health;
		}

		if(CountInv("MaxHealthBars") * HP_SEG_MAX != starthealth){
			updateHealth();
		}

		iOldButtons = iButtons;
		iButtons = GetPlayerInput(INPUT_BUTTONS);

        if(iSelectedWep != iPrevSelect) {
            iPrevSelect = iSelectedWep;
            if(iSelectedWep > SWEP_NONE && iSelectedWep < SubWeapons.subWepCount())
            {
                for(int i = 0; i < SubWeapons.subWepCount(); i++) {
                    TakeInventory(SubWeapons.equippedField(i), 1);
                }
                GiveInventory(SubWeapons.equippedField(iSelectedWep), 1);
            }
        }
    }
    
    override void PostBeginPlay() {

		super.PostBeginPlay();
		lastHealth = health;
		iButtons = GetPlayerInput(INPUT_BUTTONS);
		iOldButtons = GetPlayerInput(INPUT_OLDBUTTONS);
		iSelectedWep = SWEP_NONE;
		
		updateHealth();
	}
	
	void updateHealth() {

		int hp = health;
		int shieldBars = areag_calcShieldBars(hp);
		int healthBars = areag_calcHPBars(hp);
		int hpPool = hp % HP_SEG_MAX;
		if(hpPool == 0) {
			hpPool = HP_SEG_MAX;
		}
		int maxHP = CountInv("MaxHealthBars") * HP_SEG_MAX;

		if(starthealth != maxHP) {
			maxhealth = maxHP;
		}

		if(healthBars < CountInv("ShieldBars") || shieldBars > CountInv("ShieldBars")) {
			SetInventory("ShieldBars", shieldBars);
		}
		SetInventory("HealthBars", healthBars);
		SetInventory("HealthCounter", hpPool);
	}

	int areag_calcHPBars(int hp) {
		int r = hp / HP_SEG_MAX;
		if(r*HP_SEG_MAX < hp)
			r++;
		return r;
	}

	int areag_calcShieldBars(int hp) {
		return hp / HP_SEG_MAX;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {

		if(bINVULNERABLE) {
			return super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		} else {
			int currentShield = CountInv("ShieldBars");
			int targetHP = health - damage;
			bool imhit = false;

			if(areag_calcHPBars(targetHP) < currentShield) {
				targetHP = areag_calcHPBars(targetHP) * HP_SEG_MAX;
				imhit = true;
			}
			int trueDmg = health - targetHP;

			trueDmg = super.DamageMobj(inflictor, source, trueDmg, mod, flags, angle);
			updateHealth();

			if(imhit) {
				A_PlaySound("player/ouch", CHAN_VOICE);
				ACS_NamedExecuteAlways("status_invuln", 0);
			}
			
			return trueDmg;
		}
	}
}
