
class AREAGLoadMenuHandler : ZFHandler
{
    AREAGLoadMenu menu;

    override void buttonClickCommand (ZFButton caller, string command)
    {
        console.printf("Calling button click command %s", command);

        if (command == "Load_1")
        {
            CallACS("map_loadGame", 1);
            close(true);
        }
        else if(command == "Load_2")
        {
            CallACS("map_loadGame", 2);
            close(true);
        }
        else if(command == "Load_3")
        {
            CallACS("map_loadGame", 3);
            close(true);
        }
    }

    void close(bool leave) {
        if(leave)
            menu.mParentMenu = null;
        menu.Close();
    }
}

class AREAGLoadMenu : ZFGenericMenu
{
    // The menu's command handler.
    // We need a command handler so we can make our menu interactable.
    AREAGLoadMenuHandler handler;

    // A font to use for text.
    Font smallFont;

    ZFLabel aLabel;
    vector2 startPos;

    Array<ZFButton> buttons;

    int loadSelect;

    override void Init (Menu parent)
    {
        // Call GenericMenu's 'Init' function to do some required initialization.
        Super.Init (parent);
        SetBaseResolution ((320, 200));
        smallFont = OptionFont ();

        handler = new ('AREAGLoadMenuHandler');
        handler.menu = self;

        loadSelect = 0;

        createBackground();
        createLoadButton(1);
        createLoadButton(2);
        createLoadButton(3);
    }

    void createBackground() {

        let boxSize = (320, 180);
        let boxTexture = ZFBoxTextures.CreateTexturePixels
        (
            "TABLET",
            (17, 17), (32, 32), // (Top left), (Bottom right)
            boxTiled, boxTiled  // Tile or Scale: sides, top/bottom
        );
        
        let boxImage = ZFBoxImage.Create
        (
            ((baseResolution.X - boxSize.X) / 2., (baseResolution.Y - boxSize.Y) / 2.), // Position
            boxSize, // Size
            boxTexture, // Texture
            (0.5, 0.5) // Scale
        );

        startPos = boxImage.box.pos + (14, 14);
        
        boxImage.Pack (mainFrame);
    }

    void createLoadButton(int slot) {

        let leftMargin = 0;
        let width = 276;
        let height = 46;
        let padding = 9;

        let boxPos = startPos + (leftMargin, (height + padding) * (slot-1));

        int map = getSaveMap(slot);
        int door = getSaveDoor(slot);
        double scl = 0.8;

        // if the save slot has a file in it, the map number will be at least 1.
        if(map != 0) {
            int itemPct = itemPercent(slot);
            String itemOut = String.format("%d%s", itemPct, " %");
            String mapName;

            if(map <= mapNames.size()) {
                mapName = mapNames[map-1];
            } else {
                mapName = "LOCATION UNKNOWN";
            }

            createLoadBanner(boxPos, map-1, door-1);
            createLabel(mapName, (boxPos + (110, height/2)), smallFont, scl, ZFLabel.AlignType_CenterLeft);
            createLabel(itemOut, (boxPos + (260, height/2)), smallFont, scl, ZFLabel.AlignType_CenterRight);
        } else {
            createLabel("NEW FILE", (boxPos + (width/2, height/2)), smallFont, 1.0, ZFLabel.AlignType_Center);
        }

        createLoadBox(boxPos, (width, height), slot);
    }

    void createLoadBox(vector2 pos, vector2 size, int slot) {

        String command = String.format("Load_%d", slot);

        let baseBoxTexture = ZFBoxTextures.CreateTexturePixels
        (
            "LOADBOX",
            (17, 17), (32, 32),
            boxTiled, boxTiled
        );

        let selectedBoxTexture = ZFBoxTextures.CreateTexturePixels
        (
            "GLOWBOX",
            (17, 17), (32, 32),
            boxTiled, boxTiled
        );

        let clickedBoxTexture = ZFBoxTextures.CreateTexturePixels
        (
            "LOADBXCL",
            (17, 17), (32, 32),
            boxTiled, boxTiled
        );

        // Add a button.
        let loadButton = ZFButton.Create
        (
            // Position
            pos,
            // Size
            size,
            // Our command handler
            cmdHandler: handler,
            // A command string for the button
            command: command,
            // The button's textures
            inactive: baseBoxTexture,
            hover: selectedBoxTexture,
            click: clickedBoxTexture
        );
        // Add the button element into the main frame.
        loadButton.Pack (mainFrame);
        buttons.push(loadButton);
    }

    void createLabel(String txt, vector2 pos, Font fnt, double scl = 1.0, int aln = ZFLabel.AlignType_TopLeft) {
        
        vector2 size = (fnt.stringWidth(txt) * scl, fnt.GetHeight() * scl);

        // Add a label.
        let label = ZFLabel.Create
        (
            pos,
            size, text: txt,
            fnt: fnt, wrap: false,
            textScale: scl, textColor: Font.CR_WHITE
        );

        vector2 alignOffset = (0, 0);
		int horzAlign = aln &  15;
		int vertAlign = aln & (15 << 4);

        if(vertAlign == ZFLabel.AlignType_VCenter) {
            alignOffset -= (0, size.y/2);
        } else if(vertAlign == ZFLabel.AlignType_Bottom) {
            alignOffset -= (0, size.y);
        }

        if(horzAlign == ZFLabel.AlignType_HCenter) {
            alignOffset -= (size.x/2, 0);
        } else if(horzAlign == ZFLabel.AlignType_Right) {
            alignOffset -= (size.x, 0);
        }
        label.box.pos += alignOffset;
        
        label.Pack (mainFrame);
    }

    static const String[] pickupCvars = {
        "SAVE_OUTSKIRTS_PICKUP_%d",
        "SAVE_GATEWAY_PICKUP_%d",
        "SAVE_IMPACT_PICKUP_%d",
        "SAVE_STUDY_PICKUP_%d",
        "SAVE_THIRST_PICKUP_%d",
        "SAVE_DUNGEON_PICKUP_%d",
        "SAVE_ENGINE_PICKUP_%d",
        "SAVE_SHADOWS_PICKUP_%d",
        "SAVE_TEMPORAL_PICKUP_%d",
        "SAVE_THRONE_PICKUP_%d"
    };

    static const String[] mapNames = {
        "OUTSKIRTS",
        "GRAND GATEWAY",
        "LOST IMPACT",
        "QUEEN'S STUDY",
        "TOWER OF THIRST",
        "KING'S DUNGEON",
        "ECLIPSE ENGINE",
        "REALM OF SHADOWS",
        "ETHEREAL GLADE",
        "THRONE ROOM"
    };

    int itemPercent(int slot) {
        String pickupArray = "";

        for(int i = 0; i < pickupCvars.size(); i++) {
            let res = Cvar.findCvar(string.format(pickupCvars[i], slot));

            if(res) {
                pickupArray.AppendFormat(res.getString());
            }
        }
        
        double mx = pickupArray.length() > 0 ? pickupArray.length() : 1.0;
        double mn = 0;

        for(int i = 0; i < pickupArray.length(); i++) {
            if(getChar(pickupArray, i) == 1) {
                mn += 1.0;
            }
        }

        return mn / mx * 100;
    }

    static int getChar(String st, int pos) {
        return st.mid(pos, 1).toInt();
    }

    void createLoadBanner(vector2 pos, int map, int save) {
        
        String img = String.format("ADV%02dS%d", map, save);
        
        // screenshot
        let snap = ZFImage.Create
        (
            pos, (1920, 810),
            img,
            ZFImage.AlignType_TopLeft,
            imageScale: (0.05679, 0.05679)
        );
        snap.pack(mainframe);

        // background gradient
        let grad = ZFImage.Create
        (
            pos, (276, 46),
            "FILEBG",
            ZFImage.AlignType_TopLeft
        );
        grad.pack(mainframe);
    }

    int getSaveMap(int slot) {
        let res = Cvar.findCvar(string.format("SAVE_MAP_%d", slot));

        if(res) {
            return res.getInt();
        }

        return 0;
    }

    int getSaveDoor(int slot) {
        let res = Cvar.findCvar(string.format("SAVE_DOOR_%d", slot));

        if(res) {
            return res.getInt();
        }

        return 0;
    }
}
