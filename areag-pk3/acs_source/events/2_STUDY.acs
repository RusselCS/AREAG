/*============================================================*\
||                  Q U E E N ' S   S T U D Y                 ||
\*============================================================*/


/////////////////////////
// DOOR IDS:           //
//                     //
/////////////////////////

int ringState = 0;
int stairState = 0;

#define STAIR_SIZE 14
int westStairs[STAIR_SIZE];
int eastStairs[STAIR_SIZE];
int invisWalls[2];

int bolasMinibossState = 0;

script "study_init" (void)
{
    westStairs[0] = 201;
    westStairs[1] = 301;
    westStairs[2] = 401;
    westStairs[3] = 501;
    westStairs[4] = 601;
    westStairs[5] = 701;
    westStairs[6] = 801;
    westStairs[7] = 901;
    westStairs[8] = 202;
    westStairs[9] = 302;
    westStairs[10] = 402;
    westStairs[11] = 502;
    westStairs[12] = 602;
    westStairs[13] = 702;

    eastStairs[0] = 802;
    eastStairs[1] = 902;
    eastStairs[2] = 203;
    eastStairs[3] = 303;
    eastStairs[4] = 403;
    eastStairs[5] = 503;
    eastStairs[6] = 603;
    eastStairs[7] = 703;
    eastStairs[8] = 803;
    eastStairs[9] = 903;
    eastStairs[10] = 204;
    eastStairs[11] = 304;
    eastStairs[12] = 404;
    eastStairs[13] = 504;

    invisWalls[0] = 604;
    invisWalls[1] = 704;

    moveCeiling(invisWalls[(ringState % 2)], -160, SECTOR_SPEED_MAX);
    moveCeiling(invisWalls[!(ringState % 2)], 256, SECTOR_SPEED_MAX);
}

// TAG HELP
// Event number format: #XX
// # - Tag number affected by current event
// XX - Event Number

script "study_events" (int toggle, int action, int args)
{
	bool loading = false;
	
	if(action == 0) {
		if(ActivatorTID() >= 1000) {
			terminate;
		} else {
			action = ActivatorTID()-100;
		}
	} else {
		if(ActivatorTID() < 1000) {
			loading = true;
		}
	}

	int switchTag = 100+action;
	int tag1 = 200+action;
	int tag2 = 300+action;
	int tag3 = 400+action;
	int tag4 = 500+action;
	int tag5 = 600+action;
	int tag6 = 700+action;
	int tag7 = 800+action;
	int tag8 = 900+action;
    
    int i;

	switch(action)
	{
	case 1:
        if(toggle) {
            // Rotating centerpiece
            // ALSO MAKES USE OF TAGS FOR EVENTS 2, 3, and 4.
			// [TODO] Work in event [33]

            int ringObj = tag1;
            int stairObj = tag2;

            ringState = (ringState + 1) % 4;
            int ringPos = ringState % 2;

            int targetAng = normalizeFixedAngle(ringState * 0.25);

            moveCeiling(invisWalls[ringPos], -160, SECTOR_SPEED_MAX);
            moveCeiling(invisWalls[!ringPos], 256, SECTOR_SPEED_MAX);

            while(GetActorAngle(ringObj) != targetAng) {
                int curAng = normalizeFixedAngle(GetActorAngle(ringObj) + 256);
                SetActorAngle(ringObj, curAng);
                delay(1);
            }

            if(ringPos == 1) // Ring faces E/W
            {
                stairState = (stairState + 1) % 2;

                if(stairState == 0) {
                    // Lower West stairs, raise East stairs
                    for(i = 0; i < STAIR_SIZE; i++) {
                        moveFloor(westStairs[i], (i+1) * -16, SECTOR_SPEED_MAX);
                        moveFloor(eastStairs[i], (i+1) *  16, SECTOR_SPEED_MAX);
                    }
                } else {
                    // Lower East stairs, raise West stairs
                    for(i = 0; i < STAIR_SIZE; i++) {
                        moveFloor(westStairs[i], (i+1) *  16, SECTOR_SPEED_MAX);
                        moveFloor(eastStairs[i], (i+1) * -16, SECTOR_SPEED_MAX);
                    }
                }
            }
            else // Ring faces N/S
            {
                // Set all stairs to None
                for(i = 0; i < STAIR_SIZE; i++) {
                    moveFloor(westStairs[i], STAIR_SIZE * -16, SECTOR_SPEED_MAX);
                    moveFloor(eastStairs[i], STAIR_SIZE * -16, SECTOR_SPEED_MAX);
                }
            }

            SetActorState(switchTag, "SwitchOff", false);
        }
        break;

	case 5: // [1] Temporary bridge in entry hall from Gateway
        if(toggle) { // Crystal switch on
			Sector_SetDamage(tag1, 0, 0);
			moveFloor(tag1, 208, SECTOR_SPEED_SLOW);
			moveCeiling(tag1, 225, SECTOR_SPEED_SLOW);
			moveCeiling(tag2, 208, SECTOR_SPEED_SLOW);
		} else { // Crystal switch off
			moveCeiling(tag1, 369, SECTOR_SPEED_SLOW);
			moveFloor(tag1, 352, SECTOR_SPEED_SLOW);
			moveCeiling(tag2, 352, SECTOR_SPEED_SLOW);
			do
			{
				int diff = GetSectorCeilingZ(tag3, 0, 0) - GetSectorCeilingZ(tag1, 0, 0);
				int target = 6 * GetActorProperty(1000, APROP_Height) / 5;
				delay(1);
			} while (diff > target);

			Sector_SetDamage(tag1, 255, MOD_CRUSH);
		}
		break;

	case 6: // [11] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 7: // [17] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 8: // [18] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 9: // [TODO] [19] Carpet trap
		break;

	case 10: // [24] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 11: // [TODO] [26] Carpet trap
		break;
	
	case 12: // [TODO] [28] Painting Trap
		break;

	case 13: // [29] Elevator in drone tunnel
        if(toggle) { // Crystal switch on
			moveFloor(tag1, 416, SECTOR_SPEED_MEDIUM);
		} else { // Crystal switch off
			moveFloor(tag1, -288, SECTOR_SPEED_MEDIUM);
		}
		break;

	case 14: // [30] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 15: // [31] Underground Drone Puzzle
	case 16:
	case 17:
		if(toggle) {
			SetUserVariable(115, "bEndState", false);
			SetUserVariable(116, "bEndState", false);
			SetUserVariable(117, "bEndState", false);
			SetUserVariable(switchTag, "bEndState", true);
			moveFloor(tag1, -288, SECTOR_SPEED_FAST); // Switch sector
			moveFloor(tag2, -288, SECTOR_SPEED_SLOW); // Lowering blocks
			moveFloor(tag3, -280, SECTOR_SPEED_SLOW); // Raise other switch sectors
			moveFloor(tag4, -256, SECTOR_SPEED_MEDIUM); // Raise other blocks
		}
		break;

	case 18: // [37] [TODO] Toggleable staircase. Uses tags for 19 as well.
		break;

	case 20: // [39] Endgame statue puzzle.
		break;

	case 21: // [41] [42] [TODO] Boss activation.
		break;

	case 22: // [43] Temporary door that requires Drone movement
		if(toggle) {
			moveCeiling(tag1, 352, SECTOR_SPEED_FAST);
		} else {
			moveCeiling(tag1, 224, SECTOR_SPEED_FAST);
		}
		break;

	case 23: // [50] Lower door rails
		queueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;

	case 24: // [51] [TODO] Telescope thing
		break;

	case 25: // [53] Lower door railsqueueEventSave(action, loading);
		SetUserVariable(switchTag, "bEndState", true);
		Floor_LowerToLowest(tag1, SECTOR_SPEED_FAST);
        Floor_LowerToLowest(tag2, SECTOR_SPEED_FAST);
		break;
	
	case 26: // [54] Lower the platform in the room with the jail bars.
		if(toggle) {
			moveFloor(tag1, -320, SECTOR_SPEED_FAST);
			
			moveFloor(tag2, -312, SECTOR_SPEED_FAST);
		} else {
			moveFloor(tag1, -128, SECTOR_SPEED_FAST);
			moveFloor(tag2, -120, SECTOR_SPEED_FAST);
		}
		break;
	
	case 27: // [54] Lock the moving platform down after it's lowered.
		queueEventSave(action, loading);
		SetActorProperty(switchTag-1, APROP_Score, 0);
		setSwitchState(switchTag, "Loading", loading);
		ACS_NamedExecuteAlways("study_events", 0, true, 26);
		break;

	case 28: // [57] Piano
		queueEventSave(action, loading);
		moveCeiling(tag1, 0, SECTOR_SPEED_FAST);
		break;
	
	case 29: // [61] Temporary raised floor in the atrium
		if(toggle) {
			moveFloor(tag1, -160, SECTOR_SPEED_FAST);
		} else {
			moveFloor(tag1, -464, SECTOR_SPEED_FAST);
		}
		break;

	case 30: // [65] Bolas Miniboss begin
        if(bolasMinibossState == 0) {
            bolasMinibossState = 1;
            moveFloor(tag1, -192, SECTOR_SPEED_MEDIUM);
        }
        break;
	
    case 31: // [65] Bolas Miniboss end
        bolasMinibossState = 2;
        queueEventSave(action, loading);
        moveFloor(tag1, -416, SECTOR_SPEED_MEDIUM);
        break;

	case 32: // [70] Bolas Miniboss end
		if(toggle) {
			moveCeiling(tag1, 168, SECTOR_SPEED_FAST);
			moveFloor(tag1, 104, SECTOR_SPEED_FAST);
		} else {
			moveFloor(tag1, -528, SECTOR_SPEED_FAST);
			moveCeiling(tag1, -464, SECTOR_SPEED_FAST);
		}
        break;
	}
}

script "study_return" (int ent)
{
	// ACS_NamedExecuteAlways("study_events", 0, 0, 16);
}
