#library "mapcont"
#nocompact
#include "zcommon.acs"
#include "commfunc.acs"
#include "mapfunc.acs"

#define MAP_TABLET_WRAP 100

#define TID_MUSFADE 999

// MAP CONTROLLER SCRIPTS

// Script that actually handles map connections.
// ARG1 - map: which arg the map abides by, as noted in the array.
// ARG2 - door: which player spawn the player is intended to spawn, as noted by the value in its first special argument.
// ARG3 - flags: 
#define MAPSWITCH_NONE		0
#define MAPSWITCH_NOSOUND	1
#define MAPSWITCH_RESET		1<<1

script "map_switchto" (int tomap, int door, int flags)
{	
	if(toMap == GetLevelInfo(LEVELINFO_LEVELNUM)) {
		terminate;
	}

	int map = findMapRoute(tomap);
	if(map == -1) {
		PrintBold(s:"\cgMAP ", i:tomap, s:" NOT FOUND! \cdMAP MAY BE IN DEVELOPMENT. PLEASE TRY AGAIN LATER.");
		terminate;
	}

	int noSound = 0;
	if(flags & MAPSWITCH_NOSOUND) {
		noSound = 1;
	}

	int levelFlags = CHANGELEVEL_NOINTERMISSION;
	if(flags & MAPSWITCH_RESET) {
		levelflags |= CHANGELEVEL_RESETINVENTORY;
		levelflags |= CHANGELEVEL_RESETHEALTH;
		ClearInventory();
	}
	
	if(CheckInventory("ChakramShield") > 0 && Checkinventory("ChakramStock") == 0) {
		GiveInventory("ChakramStock", 1);
	}
	SetUserVariable(0, "bInMapTransition", true);
	ACS_NamedExecuteAlways("map_transition", 0, false, noSound, GetUserVariable(0, "bDroneChangingLevel"));
	if(!GetUserVariable(0, "bDroneChangingLevel")) {
		Delay(35);
	}
	ChangeLevel(getMapCode(getMapByLevelNum(map)), door, levelflags);
}

int musicVolume = 1.0;

function void Music_FadeTo(int del, int rate, int dest)
{
	ACS_NamedExecute("music_fade", 0, del, rate, dest);
}

script "music_fade" (int del, int rate, int dest)
{
	while(musicVolume != dest)
	{
		musicVolume = iterateTowards(musicVolume, rate, dest);
		SetMusicVolume(musicVolume);
		PrintBold(f:musicVolume, s:" / ", f:dest);
		Delay(del);
	}
}

script "map_startup" ENTER
{
	mapStartUp(GetUserVariable(0, "bDroneChangingLevel"));
}

script "map_return" RETURN
{
	mapStartUp(GetUserVariable(0, "bDroneChangingLevel"));
}

function void mapStartUp(int droneRevert) {
	SetUserVariable(0, "bInMapTransition", false);
	clearMapCurtain();
	transitionVeil(droneRevert);
	ACS_NamedExecuteAlways("map_transition", 0, true, false, droneRevert);
	if(droneRevert) {
		GiveInventory("DroneRevertFunc", 1);
	}
}

function void transitionVeil(int droneRevert) {
	if(!droneRevert) {
		FadeTo(0, 0, 0, 1.0, 0.0);
		SetHudSize(1, 1, false);
		SetFont("BLACK");
		HudMessage(s:"A"; HUDMSG_ALPHA, 120, CR_UNTRANSLATED, 0, 0, 0, 1.0);
	} else {
		FadeTo(0.0, 0.4, 0.0, 1.0, 0.0);
	}
}

script "map_transition" (int ent, int noSound, int droneRevert) {
	
	int baseVal = 640.0;
	int fadeTime = 0.2;
	int texWidth = 142.0;
	if(ent) {
		if(!droneRevert) {
			SetHudSize(1280, 960, 0);
			SetFont("MAPTRANS");
			int holdTime = 0.6;
			for(int o = 6; o > 0; o--)
			{
				HudMessage(s:"A"; HUDMSG_FADEINOUT, 100+o, CR_UNTRANSLATED, baseVal + o * texWidth, 480.0, holdTime, 0.0, fadeTime);
				HudMessage(s:"A"; HUDMSG_FADEINOUT, 110+o, CR_UNTRANSLATED, baseVal - o * texWidth, 480.0, holdTime, 0.0, fadeTime);
				Delay(2);
			}
			HudMessage(s:"A"; HUDMSG_FADEINOUT, 100, CR_UNTRANSLATED, baseVal, 480.0, holdTime, 0.0, fadeTime);
			HudMessage(s:""; HUDMSG_ALPHA, 120, CR_UNTRANSLATED, 0, 0, 0, 0);
			FadeTo(0, 0, 0, 0.2, fadeTime);
		} else {
			Delay(2);
			ACS_NamedExecuteAlways("drone_curtain", 0, false);
		}
		TakeInventory("MapTransition", 1);
		SetPlayerProperty(true, false, PROP_INVULNERABILITY);
		SetPlayerProperty(true, false, PROP_TOTALLYFROZEN);
	} else {
		GiveInventory("MapTransition", 1);
		SetPlayerProperty(true, true, PROP_INVULNERABILITY);
		SetPlayerProperty(true, true, PROP_TOTALLYFROZEN);

		if(!droneRevert) {
			if(!noSound)
				AmbientSound("misc/mapchange", 255);
			SetHudSize(1280, 960, 0);
			SetFont("MAPTRANS");
			HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 100, CR_UNTRANSLATED, baseVal, 480.0, 30.0, fadeTime, 0.0);
			Delay(2);
			for(int i = 1; i < 7; i++)
			{
				HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 100+i, CR_UNTRANSLATED, baseVal + i * texWidth, 480.0, 30.0, fadeTime, 0.0);
				HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 110+i, CR_UNTRANSLATED, baseVal - i * texWidth, 480.0, 30.0, fadeTime, 0.0);
				Delay(2);
			}
			FadeTo(0, 0, 0, 1.0, fadeTime);
		} else {
			
		}
	}
}

function void clearMapCurtain(void) {
	HudMessageBold(s:""; HUDMSG_FADEINOUT, 100, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0, 0.0);
	HudMessageBold(s:""; HUDMSG_ALPHA, 120, CR_UNTRANSLATED, 0, 0, 0, 0);
	for(int i = 1; i < 7; i++)
	{
		HudMessageBold(s:""; HUDMSG_FADEINOUT, 100+i, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0, 0.0);
		HudMessageBold(s:""; HUDMSG_FADEINOUT, 110+i, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0, 0.0);
	}
}

script "map_tablet" (int tabletNum, int tabletTid)
{
	if(CheckInventory("MenuFreezer")>0)
	{
		terminate;
	}
	GiveInventory("MenuFreezer", 1);

	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
	if(levelNum == 0)
	{
		PrintBold(s:"\cgERROR: LEVELNUM FOR THIS MAP IS 0. PLEASE SET LEVELNUM TO NON-ZERO FOR TABLETS TO WORK!");
		terminate;
	}
	
	int mapIndex = getMapByLevelNum(levelNum);
	if(mapIndex == -1)
	{
		PrintBold(s:"\cgERROR: LEVELNUM NOT FOUND IN ACS REGISTRY. PLEASE REGISTER YOUR MAP TO USE TABLETS.");
		terminate;
	}

	str langName = strParam(s:"TABLET_", s:getMapCode(mapIndex), s:"_", i:tabletNum);
	str tabletImage = strParam(s:getTabletImage(mapIndex), s:"_", i:tabletNum);
	
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	str message = strParam(l:langName);
	int CYCLES = 6;
	int i = 0; // For the iterators.
	int msgBaseX = 150.1;
	int msgBaseY = 60.1;
	int msgAlpha = 1.0;

	int msgX = msgBaseX;
	int msgY = msgBaseY;

	PlaySound(ActivatorTID(), "misc/TabletOn", CHAN_BODY|CHAN_NOPAUSE, 0.5);
	Thing_Stop(0);
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, true, PROP_INVULNERABILITY);
	
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1100, 0.0125, 8);
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1200, -0.0125, 8);

	for(i = 0; i <= CYCLES; i++) {
		msgY = msgBaseY + (40.0 * square(CYCLES-i)/2);
		msgAlpha = fixeddiv(i, CYCLES);
		printTablet(message, msgAlpha, msgX, msgY, tabletImage);
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		delay(1);
	}
	
	do
	{
		oldButtons = buttons;
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		printTablet(message, 1.0, msgBaseX, msgBaseY, tabletImage);
		Delay(1);
	} while(!anyButtonPressed(buttons, oldButtons));

	PlaySound(ActivatorTID(), "misc/TabletOff", CHAN_BODY|CHAN_NOPAUSE, 0.5);

	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1100, 0.0, 4);
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1200, 0.0, 4);

	SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, false, PROP_INVULNERABILITY);
	TakeInventory("MenuFreezer", 1);

	for(i = CYCLES; i >= 0; i--) {
		msgY = msgBaseY + (40.0 * square(CYCLES-i)/2);
		msgAlpha = fixeddiv(i, CYCLES);
		printTablet(message, msgAlpha, msgX, msgY, tabletImage);
		delay(1);
	}

	if(tabletTid > 0 && GetUserVariable(tabletTid, "spc") > 0) {
		SetActorState(tabletTid, "Trigger");
	}
}

function void printTablet (str message, int alpha, int x, int y, str image)
{
	if(alpha == 0) {
		HudMessage(s:""; HUDMSG_ALPHA, 205, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 204, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 203, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 202, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 201, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 200, CR_UNTRANSLATED, 0, 0, 0, 0);
		fadeto(0, 0, 0, 0, 0);
	} else {
		int camX = 110;
		int camY = 100;
		int hold = 0.0;

		SetHudClipRect(0, 0, 0, 0, 0, true);
		SetHudSize(1, 1, false);
		SetFont("BLACK");
		HudMessage(s:"A"; HUDMSG_ALPHA, 205, CR_UNTRANSLATED, 0, 0, 0, alpha);

		SetHudSize(camX, camY, false);
		SetCameraToTexture(PlayerNumber()+1100, "CAMBLUR1", 100);
		SetCameraToTexture(PlayerNumber()+1200, "CAMBLUR2", 100);
		SetFont("CAMBLUR1");
		HudMessage(s:"A"; HUDMSG_ALPHA|HUDMSG_ADDBLEND, 204, CR_UNTRANSLATED, (camX/2)<<16, (camY/2)<<16, hold, fixedmul(0.15, alpha));
		SetFont("CAMBLUR2");
		HudMessage(s:"A"; HUDMSG_ALPHA|HUDMSG_ADDBLEND, 203, CR_UNTRANSLATED, (camX/2)<<16, (camY/2)<<16, hold, fixedmul(0.15, alpha));
		SetHudSize(1024, 768, false);
		if(CheckInventory("DroneFlag") == 0) {
            SetFont("TABLETBG");
            HudMessage(s:"A"; HUDMSG_ALPHA, 202, CR_UNTRANSLATED, 512.0, 384.0, hold, fixedmul(0.7, alpha));
        } else {
            SetFont("DRONETBG");
            HudMessage(s:"A"; HUDMSG_ALPHA, 202, CR_UNTRANSLATED, 512.0, 384.0, hold, fixedmul(0.6, alpha));
        }
		
		SetHudSize(1280, 960, 0);
		SetHudClipRect(140, 0, 1000, 960, 1000, true);
		SetFont("TABLFONT");
		HudMessage(s:message; HUDMSG_ALPHA, 201, CR_UNTRANSLATED, x, y, hold, fixedmul(0.9, alpha));
		if(CheckFont(image)) {
			SetFont(image);
			HudMessage(s:"A"; HUDMSG_ALPHA, 200, CR_UNTRANSLATED, x+500.0, y+500.0, hold, fixedmul(0.9, alpha));
		}
	}
}

script "MAP_OPEN" OPEN
{
	global_saveId = 1;
	Delay(1);
	SetAirControl(0.65);
	SpawnForced("MusicFader", 0, 0, 0, TID_MUSFADE);
}

// DOORS
script "map_door" (int tag, int top, int bottom) {
    int fixBottom = bottom << 16;

    if(GetSectorCeilingZ(tag, 0, 0) == fixBottom) {
        int tid = ActivatorTID();
        Ceiling_RaiseByValue(tag, 60, 32);
        Tagwait(tag);
        Ceiling_MoveToValue(tag, 120, top);
        TagWait(tag);
        Delay(70);
        while(actorInSector(tid, tag)) {
            Delay(1);
        }
        Ceiling_MoveToValue(tag, 64, bottom);

        bool movingUp = false;

        int oldHeight = GetSectorCeilingZ(tag, 0, 0);

        while(GetSectorCeilingZ(tag, 0, 0) > fixBottom) {
            oldHeight = GetSectorCeilingZ(tag, 0, 0);
            delay(1);

            if(oldHeight == GetSectorCeilingZ(tag, 0, 0)) {
                // TO DO: Push player out
            }

            if(actorInSector(tid, tag)) {
                if(!movingUp) {
                    movingUp = true;
                    Ceiling_Stop(tag);
                }
            } else {
                if(movingUp) {
                    movingUp = false;
                    Ceiling_Stop(tag);
                    Delay(10);
                    Ceiling_MoveToValue(tag, 32, bottom);
                }
            }
        }
        Radius_Quake(10, 4, 0, 5, tag);
    }
}

script "tablet_distanceCheck" (void)
{
	int z = GetActorZ(0);
	bool active = false;
	while(true)
	{
		for(int i = 0; i < PlayerCount(); i++)
		{
			if(abs(z - GetActorZ(i+1000)) < 64.0 && angleInRange(GetActorAngle(i+1000), GetActorAngle(0), 0.25))
			{
				active = true;
			}
		}
		
		if(active)
		{
			if(!CheckFlag(0, "USESPECIAL"))
			{
				SetActorFlag(0, "USESPECIAL", true);
			}
		}
		else if(!active)
		{
			if(CheckFlag(0, "USESPECIAL"))
			{
				SetActorFlag(0, "USESPECIAL", false);
			}
		}
		
		active = false;
		
		Delay(5);
	}
}

script "map_water_function" (int effect, int waterMode) {
	int effectCooldown = 0;
	int tid = ActivatorTID();
	SetActivator(-1);

	switch(effect) {
		default:
		case 0: // Basic water. Do nothing.
			effectCooldown = 35;
			break;
		case 1: // Slime from Lost Impact.
			Thing_Damage(tid, 2, MOD_SLIME);
			effectCooldown = 1;
			break;
	}
	
	SetResultValue(effectCooldown);
}

script "map_queueEvent" (int evt)
{
	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
	queueSaveEvent(levelNum, evt);
}

script "map_checkEvent" (int evt)
{
	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
	SetResultValue(getSaveEvent(levelNum, evt));
}

script "map_loadEvents" OPEN
{
	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
	if(levelNum > 0)
		loadMapEvents(levelNum);
}

script "map_savepoint" (int doorNum)
{
	PrintBold(s:"Save Point Triggered: ", i:doorNum);

	int save = GetCVar("SAVE_PICKER");
	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);

	SetCVar(StrParam(s:"SAVE_MAP_", i:save), levelNum);
	SetCVar(StrParam(s:"SAVE_DOOR_", i:save), doorNum);

	saveFile(save);
}

script "map_loadGame" (int file)
{
	SetActivator(1000); // multiplayer killer
	SetCVar("SAVE_PICKER", file);
	int levelNum = GetCVar(StrParam(s:"SAVE_MAP_", i:file));
	int doorNum = GetCVar(StrParam(s:"SAVE_DOOR_", i:file)) + 20;

	if(levelNum != 0) {
		loadFile(file);
		ACS_NamedExecuteAlways("map_switchto", 999, levelNum, doorNum, MAPSWITCH_NOSOUND);
		ACS_NamedExecuteAlways("map_loadItems", 999);
		ACS_NamedExecuteAlways("map_switchto", 0, 999, 0, MAPSWITCH_NOSOUND|MAPSWITCH_RESET);
	} else {
		newFile();
		ACS_NamedExecuteAlways("map_switchto", 999, 1, 0, MAPSWITCH_NOSOUND);
		ACS_NamedExecuteAlways("map_switchto", 0, 999, 0, MAPSWITCH_NOSOUND|MAPSWITCH_RESET);
	}
}

script "map_loadItems" (void)
{
	int mapSize = ScriptCall("MapDataRepo", "getMapCount");
	for(int i = 0; i < mapSize; i++)
	{
		str flags = GetCVarString(ScriptCall("MapDataRepo", "getTempPickup", i));
		int len = strLen(flags);

		for(int j = 0; j < len; j++) {
			if(GetChar(flags, j) == '1') {
				GiveInventory(ScriptCall("MapDataRepo", "getPickupFrom", i, j+1), 1);
			}
		}
	}
}

script "map_moveFloor" (int tag, int dest, int speed)
{
	//int present = (isFloorMoving(tag, 0) == -1);
	int idx = ScriptCall("MovingFloorsRepo", "addSector", tag, dest, speed);

	if(!GetCVar("sys_timefreeze")) {
		Floor_Stop(tag);
		Floor_MoveToValue(tag, speed, abs(dest), dest < 0);
	}
	
	// if(!present) {

	// 	int cur, sDest;

	// 	do
	// 	{
	// 		delay(1);
	// 		idx = ScriptCall("MovingFloorsRepo", "refreshTag", tag, idx);
	// 		cur = GetSectorFloorZ(tag, 0, 0);
	// 		sDest = ScriptCall("MovingFloorsRepo", "getTargetHeightById", idx);
	// 	}
	// 	while(cur != sDest);

	// 	ScriptCall("MovingFloorsRepo", "removeSectorById", idx);
	// }
}

script "map_moveCeiling" (int tag, int dest, int speed)
{
	//int present = (isFloorMoving(tag, 0) == -1);
	int idx = ScriptCall("MovingCeilingsRepo", "addSector", tag, dest, speed);

	if(!GetCVar("sys_timefreeze")) {
		Ceiling_Stop(tag);
		Ceiling_MoveToValue(tag, speed, abs(dest), dest < 0);
	}

	// if(!present) {

	// 	int cur, sDest;

	// 	do
	// 	{
	// 		delay(1);
	// 		idx = ScriptCall("MovingCeilingsRepo", "refreshTag", tag, idx);
	// 		cur = GetSectorCeilingZ(tag, 0, 0);
	// 		sDest = ScriptCall("MovingCeilingsRepo", "getTargetHeightById", idx);
	// 		printBold(s:"cur ", f:cur, s:" / ", f:sDest, s:" dest");
	// 	}
	// 	while(cur != sDest);

	// 	ScriptCall("MovingCeilingsRepo", "removeSectorById", idx);
	// }
}

script "map_pauseMovingSectors" (void)
{
	timeStop();
}

script "map_resumeMovingSectors" (void)
{
	timeResume();
}

script "map_forceStopPlane" (int which, int tag)
{
	//PrintBold(s:"ForceResume called: [", i:which, s:"] ", i:tag);
	if(which == 0) {
		Floor_Stop(tag);
	} else {
		Ceiling_Stop(tag);
	}
}

script "map_forceResumePlane" (int which, int tag, int dest, int speed)
{
	//PrintBold(s:"ForceResume called: [", i:which, s:"] ", i:tag, s:", ", i:dest, s:", ", i:speed);
	if(which == 0) {
		Floor_MoveToValue(tag, speed, abs(dest), dest < 0);
	} else {
		Ceiling_MoveToValue(tag, speed, abs(dest), dest < 0);
	}
}

script "map_screenshot_reopen" (void)
{
	delay(1);
	ScriptCall("Menu", "setMenu", "AREAGLoadMenu");
}

#define ROOM_MAX 65
#define FLOOR_MAX_LIMIT ROOM_MAX * 2
#define ROOM_FLOOR_DEFAULT -255

int FLOOR_MAX = 0;

int roomFloors[ROOM_MAX];
int floorZ[FLOOR_MAX_LIMIT][2];

script "map_defaultfloors" OPEN
{
	for(int i = 0; i < ROOM_MAX; i++) {
		roomFloors[i] = ROOM_FLOOR_DEFAULT;
	}
}

script "map_setfloor" (void)
{
	int room = CheckInventory("RoomIdCounter");
	int baseFloor = GetCvar("db_basefloor");

	roomFloors[room] = baseFloor;
	Log(s:"Base floor of room ", i:room, s:" is now ", i:baseFloor);
}

script "map_addfloorz" (void)
{
	int room = CheckInventory("RoomIdCounter");
	int zpos = GetActorZ(0);

	if(FLOOR_MAX < FLOOR_MAX_LIMIT) {
		Log(s:"Added new floor at ", f:zpos, s:" in room ", i:room, s:".");
		floorZ[FLOOR_MAX][0] = room;
		floorZ[FLOOR_MAX][1] = zpos;
		FLOOR_MAX++;
	}
}

script "map_printfloors" (void)
{
	for(int i = 0; i < ROOM_MAX; i++) {
		if(roomFloors[i] != ROOM_FLOOR_DEFAULT) {
			Log(s:"Room: ", i:i, s:" - ", i:roomFloors[i], s:"F");
		}
	}

	for(i = 0; i < FLOOR_MAX; i++) {
		Log(s:"Room: ", i:floorZ[i][0], s:" // ", f:floorZ[i][1]);
	}
}
