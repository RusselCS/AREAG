// PUSH BLOCKS, FLOOR SWITCHES
class AREAGPushBlock : BasicActionProp
{
    //$Category AREAG-Map Tools
    //$Title Large Stone Block
	//$Sprite E0WCF0
    //$NotAngled

    mixin AREAG_Common;
    AREAGPlayerPawn plr;
    bool bPushActive;

    Default
    {
        +SOLID;
        +SLIDESONWALLS;
        +CANPASS;
        Height 64;
        Radius 30;
        maxstepheight 8;
        Scale 2.0;
    }

    bool isCloseEnough(Actor who) {
        // [Russ] Horizonal check broke bookshelves when they were implemented.
        // return Distance2D(who) - who.radius - self.radius < 48.0 && abs(who.pos.z - self.pos.z) < (4 * maxstepheight);
        return abs(who.pos.z - self.pos.z) < (4 * maxstepheight);
    }

    override void BasicInit() {
        bPushActive = false;
        if(GetCvarBool("db_enginepushable")) {
            bPUSHABLE = true;
        }
    }

    override void BasicActivate(Actor activator) {
        if(!bPushActive && isCloseEnough(activator) && checkPosClear(activator) && canGrabAngle(activator)) {
            plr = AREAGPlayerPawn(activator);
            plr.setInterruptState("BlockPushBegin");
            plr.SetBlockPush(self.getPushBlock());
        }
    }

    bool checkPosClear(Actor activator) {
        let tAng = roundToNearest(VectorAngle(activator.pos.x - pos.x, activator.pos.y - pos.y), 90);
        Vector2 checkPos = (pos.x + cos(tAng) * 64, pos.y + sin(tAng) * 64);
        return activator.checkMove(checkPos);
    }

    virtual AREAGPushBlock getPushBlock() {
        return self;
    }

    virtual bool canGrabAngle(Actor activator) {
        return true;
    }

    States
    {
    Spawn:
        PCBA B 1;
        loop;
    }
}

class BlockPlayerDummy : Actor
{
    Default
    {
        -SOLID;
        +NOCLIP;
        +MISSILE;
        renderstyle "translucent";
        Alpha 1.0;
    }
	States
	{
	Spawn:
		PLAY A 1;
		loop;
    Death:
        TNT1 A 0;
        stop;
	}
}

const BLOCK_SPEED = 4.0;
const BLOCK_MAXSPEEDTICKS = 20.0;

extend class AREAGProtoWeapon {

    static const int[] blockCancelButtons = {
        BT_ATTACK,
        BT_ALTATTACK,
        BT_JUMP,
        BT_USE
    };

    int iPushTicks;

    action void A_StartPush() {
        let plr = invoker.plr;
        let block = invoker.plr.block;
        invoker.iPushTicks = 0;
        block.bPushActive = true;
        SetPlayerProperty(true, true, PROP_TOTALLYFROZEN);
        let tAng = roundToNearest(VectorAngle(plr.pos.x - block.pos.x, plr.pos.y - block.pos.y), 90);
        let tempAng = plr.angle;
        let dist = 64 + ((2 * block.radius) * floor(plr.distance3D(block) / (2 * block.radius)));
        block.Warp(plr, dist, 0, 0, tAng, WARPF_MOVEPTR|WARPF_ABSOLUTEANGLE|WARPF_NOCHECKPOSITION);
        A_SetAngle(tempAng);
        A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
        A_Face(block, 0, 0, 0, 0, FAF_MIDDLE, 0);
    }

    action void A_StopPush() {
        invoker.plr.block.bPushActive = false;
        invoker.plr.block.A_ChangeVelocity(0, 0, invoker.plr.block.vel.z, CVF_REPLACE);
        A_StopSound(CHAN_BODY);
        SetPlayerProperty(true, false, PROP_TOTALLYFROZEN);
        A_ChangeVelocity(-3, 0, 0, CVF_RELATIVE|CVF_REPLACE);
    }

    action State A_PushBlock() {

        bool cancelPressed = false;

        for(int i = 0; i < invoker.blockCancelButtons.size(); i++) {
			cancelPressed |= checkPressed(invoker.blockCancelButtons[i], invoker.plr.iButtons, invoker.plr.iOldButtons);
		}

        cancelPressed |= !invoker.plr.block.isCloseEnough(self);
        
        if(cancelPressed) {
            A_ClearInterruptState();
            return ResolveState("BlockPushEnd");
        } else {
            if(invoker.plr.iButtons & BT_FORWARD || invoker.plr.iButtons & BT_BACK) {
                invoker.iPushTicks++;

                double baseSpeed = BLOCK_SPEED;
                if(invoker.plr.iButtons & BT_BACK) {
                    baseSpeed = -baseSpeed;
                }
                
                if(invoker.iPushTicks == 1) {
                    A_StartSound("props/blockrumble", CHAN_BODY, CHANF_LOOP);
                }
                double speed = baseSpeed * min(BLOCK_MAXSPEEDTICKS, invoker.iPushTicks) / BLOCK_MAXSPEEDTICKS;
                double speedX = cos(angle) * speed;
                double speedY = sin(angle) * speed;
                if(invoker.plr.checkMove((invoker.plr.pos.x + speedX, invoker.plr.pos.y + speedY), PCM_DROPOFF) &&
                   invoker.plr.block.checkMove((invoker.plr.block.pos.x + speedX, invoker.plr.block.pos.y + speedY), PCM_DROPOFF)) {
                        A_ChangeVelocity(speedX, speedY, vel.z, CVF_REPLACE);
                        invoker.plr.block.A_ChangeVelocity(speedX, speedY, invoker.plr.block.vel.z, CVF_REPLACE);
                    } else {
                        A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
                        invoker.plr.block.A_ChangeVelocity(0, 0, invoker.plr.block.vel.z, CVF_REPLACE);
                    }
                Radius_Quake(1, 2, 0, 2, 0);
            } else {
                if(invoker.iPushTicks != 0) {
                    invoker.iPushTicks = 0;
                    A_StopSound(CHAN_BODY);
                }
                A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
                invoker.plr.block.A_ChangeVelocity(0, 0, invoker.plr.block.vel.z, CVF_REPLACE);
            }
        }

        return ResolveState(null);
    }

    States
    {
    BlockPushBegin:
        PUSH D 0 A_StartPush();
		PUSH DCCBBA 1;
        PUSH A 1 A_PushBlock();
        wait;
    BlockPushEnd:
        PUSH C 0 A_StopPush();
        PUSH ABCD 1;
        goto Ready;
    }
}

class AREAGPushBlockSmall : AREAGPushBlock
{
    //$Category AREAG-Map Tools
    //$Title Small Metal Block
	//$Sprite E0WCG0
    //$NotAngled

    Default
    {
        Height 32;
        Radius 16;
        Scale 1.0;
    }

    override void BasicTick() {
        if(!bNOINTERACTION && (pos.z ~== floorz || bONMOBJ)) {
            if(roll != 0) {
                roll = 0;
            }
            if(pitch != 0) {
                pitch = 0;
            }
        }
    }

    States
    {
    Spawn:
        PCBA A 1;
        loop;
    }
}
