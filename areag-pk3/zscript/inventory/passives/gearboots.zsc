const DASH_WATER = 26.0;
const DASH_SPEED = 35.0;

class GearGreavesPickup : BasicPassive
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_ARTIFICE;
        BasicInventory.PickupID PICKMSG_GEAR;
        BasicInventory.CheckItem "GearGreavesSpeed";
	    Scale 2.5;
    }

    override void definePickup()
    {
        clsName = "GearGreavesPassive";
    }

    action void A_GiveGearBoots() {
		let plr = AREAGPlayerPawn(self);
        plr.setBaseWalkSpeed(plr.dBaseSpeed + .25);
	}

	States
	{
	SpawnFrames:
		BOOT G 1;
		loop;
    PickupEffect:
		TNT1 A 0 A_GiveGearBoots();
		stop;
	}
}

class GearGreavesPassive : PlayerPassive
{
    const DASH_LENGTH = 18;
    const DASH_COOLDOWN = 50;

    int bootsHeldTime;
    int bootsCooldown;

    double dashAngle;

    override void passiveTick(AREAGPlayerPawn plr)
    {
        //console.printf("Boots active");

        if(plr.countInv("DroneFlag") == 0) {
            int iButtons = plr.iButtons;
            if(plr.bOnGround) {
                if(iButtons & BT_DASH) {
                    if(bootsHeldTime == 0 && bootsCooldown == 0) {
                        dashAngle = calcDashAngle(plr);
                        playerDash(plr);
                        plr.A_StartSound("player/dash", CHAN_DASHBOOTS);
                        plr.A_GiveInventory("DashFlag", 1);
                        bootsHeldTime++;
                        bootsCooldown = DASH_COOLDOWN;
                    } else if(bootsHeldTime > 0 && bootsHeldTime < DASH_LENGTH) {
                        playerDash(plr);
                        plr.A_GiveInventory("DashFlag", 1);
                    } else if(bootsHeldTime == DASH_LENGTH) {
                        playerDash(plr, 0.6);
                        plr.A_TakeInventory("DashFlag", 1);
                    }
                    if(bootsHeldTime > 0) {
                        bootsHeldTime++;
                    }
                } else {
                    if(bootsHeldTime > 0) {
                        if(bootsHeldTime < DASH_LENGTH) {
                            playerDash(plr, 0.6);
                        }
                        bootsHeldTime = 0;
                        plr.A_TakeInventory("DashFlag", 1);
                    }
                }
            } else {
                if(bootsHeldTime != 2*DASH_LENGTH) {
                    bootsHeldTime = 2*DASH_LENGTH;
                }
            }
        }

        if(bootsCooldown > 0) {
            bootsCooldown--;
        }
    }

    void playerDash(AREAGPlayerPawn plr, double factor = 1.0) {
        double dsp = DASH_SPEED * factor;
        if(plr.countinv("LegsUnderwater") > 0) {
            dsp = DASH_WATER * factor;
        }
        plr.A_ChangeVelocity(cos(dashAngle) * dsp, sin(dashAngle) * dsp, plr.vel.z, CVF_REPLACE);
    }

    double calcDashAngle(AREAGPlayerPawn plr) {
        let dng = plr.angle;

        if(plr.iButtons & BT_FORWARD) {
            if(plr.iButtons & BT_MOVERIGHT) {
                dng = plr.angle-45.0;
            } else if(plr.iButtons & BT_MOVELEFT) {
                dng = plr.angle+45.0;
            } else {
                dng = plr.angle;
            }
        } else if(plr.iButtons & BT_BACK) {
            if(plr.iButtons & BT_MOVERIGHT) {
                dng = plr.angle+180.0+45.0;
            } else if(plr.iButtons & BT_MOVELEFT) {
                dng = plr.angle+180.0-45.0;
            } else {
                dng = plr.angle+180.0;
            }
        } else if(plr.iButtons & BT_MOVERIGHT) {
            dng = plr.angle-90.0;
        } else if(plr.iButtons & BT_MOVELEFT) {
            dng = plr.angle+90.0;
        }

        return dng;
    }
}

extend class AREAGPlayerPawn
{
    vector2 dashWeaponBob(Weapon wep, double ticfrac)
    {
        vector2 p[2];

        double moveAng = VectorAngle(vel.x, vel.y);
        double ang = angle - moveAng + 270.0;//wep.BobSpeed * 128 * Player.GetWBobSpeed() * (angle - moveAng + 270.0) * 0.4;//();// * Player.GetWBobSpeed() * 0.08;

        vector2 res = (
            -cos(ang) * 0.8 * 60.0,
             1.0-sin(ang) * 0.4 * 60.0
        );
        res = Vec2Lerp(prevBob, res, ticfrac/2);
        prevBob = res;

        return res;

        // prevViewBob = Lerp(prevViewBob, ViewBob, ticfrac/2);
        // prevViewBobX = Lerp(prevViewBob, ViewBob, ticfrac/2);
        // prevViewBobY = Lerp(prevViewBob, ViewBob, ticfrac/2);
        // let xFracMult = -cos(ang) * prevViewBob * 0.2;
        // let yFracMult = 0.5-sin(ang) * prevViewBob * 0.2;
        // double bobx = 0;
        // double boby = 0;

        // bobx = Player.Bob * wep.BobRangeX;
        // boby = Player.Bob * wep.BobRangeY;
        // bobx *= xFracMult;
        // boby *= yFracMult;
        // p[0] = (bobx, boby+5.0);

        // bobx = Player.Bob * wep.BobRangeX;
        // boby = Player.Bob * wep.BobRangeY;
        // bobx *= prevBobXFracMult;
        // boby *= prevBobYFracMult;
        // p[1] = (bobx, boby+5.0);

        // prevBobXFracMult = xFracMult;
        // prevBobYFracMult = yFracMult;
        
        // vector2 interp = p[0] * (1 - 0.5) + p[1] * 0.5;
        // interp.y += Lerp(lerpVelZ, vel.z, 0.5);

        // if(abs(sin(ang)) < 0.2 && bOnGround && AREAGIsWalking()) {
        //     if(iStepCD == 0) {
        //         A_PlaySound("*footstep", CHAN_BODY);
        //         iStepCD = 1;
        //     }
        // } else {
        //     iStepCD = 0;
        // }

        //return interp;
    }
}

class DashFlag : PowerTime5 {}
class GearGreavesSpeed : Once {}
