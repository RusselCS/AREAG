Class AREAGStatusBar : BaseStatusBar {
    bool drewPoints;
    override void Init() {	
		Super.Init();
		drewPoints = false;
        // this has to be done, even if the HUD is fullscreen, it prevents a crash
		SetSize(0, 320, 200);
	}

    override void Draw(int state, double TicFrac) {
        Super.Draw(state, TicFrac);
        
        AutomapRepository repo = AutomapRepository(eventhandler.find("AutomapRepository"));

        if(repo && repo.rooms.size() > 0) {
            DrawAutomap(repo, TicFrac);
        }
    }

    void DrawAutomap(AutomapRepository repo, double TicFrac) {
        int w = Screen.GetWidth();
        int h = Screen.GetHeight();
        int cx = w/2;
        int cy = h/2;
        int cOffsX = 0;
        int cOffsY = 0;
        Color cr1 = Color(0xFF, 0x00, 0x00, 0x00);
        Color cr2 = Color(0xFF, 0xFF, 0xFF, 0xFF);
        double scaleDiv = 8;

        AutomapRoom room = repo.rooms[0];
        int mx, my, nx, ny;
        [mx, my, nx, ny] = maximalPoints(room);
        cOffsX = -(mx+nx)/2;
        cOffsY = -(my+ny)/2;

        if(!drewPoints) {
            drewPoints = true;
            Console.printf("XDiffs: %d, %d::%d -- YDiffs: %d, %d::%d", mx, nx, cOffsX, my, ny, cOffsY);
        }

        for(int i = 0; i < room.size(); i++) {
            Sector sc = room.get(i);

            for(int j = 0; j < sc.lines.size(); j++) {
                int vx1 = cx + (sc.lines[j].V1.P.x + cOffsX) / scaleDiv;
                int vy1 = cy + (sc.lines[j].V1.P.y + cOffsY) / scaleDiv;
                int vx2 = cx + (sc.lines[j].V2.P.x + cOffsX) / scaleDiv;
                int vy2 = cy + (sc.lines[j].V2.P.y + cOffsY) / scaleDiv;

                Screen.DrawThickLine(vx1, vy1, vx2, vy2, 5.0, cr1, 255);
                Screen.DrawThickLine(vx1, vy1, vx2, vy2, 2.0, cr2, 255);
            }
        }
    }

    int, int, int, int maximalPoints(AutomapRoom rm) {
        int maxX = -99999999;
        int minX =  99999999;
        int maxY = -99999999;
        int minY =  99999999;

        for(int i = 0; i < rm.size(); i++) {
            Sector sc = rm.get(i);
            for(int j = 0; j < sc.lines.size(); j++) {
                maxX = max(maxX, sc.lines[j].V1.p.x);
                maxX = max(maxX, sc.lines[j].V2.p.x);
                maxY = max(maxY, sc.lines[j].V1.p.y);
                maxY = max(maxY, sc.lines[j].V2.p.y);

                minX = min(minX, sc.lines[j].V1.p.x);
                minX = min(minX, sc.lines[j].V2.p.x);
                minY = min(minY, sc.lines[j].V1.p.y);
                minY = min(minY, sc.lines[j].V2.p.y);
            }
        }
        return maxX, maxY, minX, minY;
    }

    int maxVal(int x, int y) {
        return x > y ? x : y;
    }

    int minVal(int x, int y) {
        return x < y ? x : y;
    }
}
