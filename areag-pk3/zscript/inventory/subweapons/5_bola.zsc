class BolaAmmo : Ammo {
    Default {
        inventory.icon "ICOSW5";
        inventory.amount 1;
        inventory.maxamount 10;
    }
}

class BolaSackPickup : SubWeaponPickup
{
    Default
    {
        BasicInventory.PickupID PICKMSG_BOLA;
        BasicInventory.PickupType PICKTYPE_SUBWEAPON;
        SubWeaponPickup.AmmoType "BolaAmmo";
        SubWeaponPickup.AmmoGive 10;
        SubWeaponPickup.WeaponName "Bola";

        Scale 0.6;
    }

    override SubWeapon subStateBuilder() {
        StateLabel rS = "BolaRaise";

        return buildSubWeapon(rS);
    }

	States
	{
	SpawnFrames:
		BOLS A 1;
		loop;
	}
}

extend class AREAGProtoWeapon {

	States
    {
        BolaRaise:
            SBHB DCBA 1;
            goto BolaReady;
        BolaReady:
            SBHB A 1 A_SubWeaponReady("BolaWindup", "BolaOffWindup", "BolaLower");
            wait;
        BolaWindup:
            SBHB A 0 A_StartSubFiringSequence();
            SBHB EFGHI 1;
            goto BolaHold;
        BolaHold:
            TNT1 A 1;
            TNT1 A 0 A_SubHoldCheck("BolaHold");
            goto BolaFire;
        BolaFire:
            SBHB J 0 A_StartSound("weapon/bolathrow", CHAN_WEAPON);
            SBHB J 0 A_TakeInventory("BolaAmmo", 1);
            SBHB J 0 A_FireProjectile("ThrowBola");
            SBHB JKLMN 1;
            TNT1 A 6;
            TNT1 A 0 A_FinishSubFiringSequence();
            TNT1 AAAAAAAAAAAAAAAAAAAAA 1 A_SubRefire("BolaHoldRefire", "BolaWait");
            goto BolaRaise;
        BolaOffWindup:
            SBHB ABCD 1;
            goto BolaWait;
        BolaWait:
            TNT1 A 1;
            TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_CheckMainStatus("BolaHoldRefire", "BolaWait");
            goto BolaRaise;
        BolaHoldRefire:
            HBM2 A 0 A_StartSubFiringSequence();
            goto BolaHold;
        BolaLower:
            SBHB ABCD 1;
            goto AltRaise;
	}
}

class ThrowBola : BasicProjectile
{
    Default
    {
        PROJECTILE;
        +BLOODSPLATTER;
        +FORCEXYBILLBOARD;
        +HITTRACER;
        missiletype "BolaTrail";
        missileheight 8;
        Radius 6;
        Height 7;
        DamageFunction (8);
        speed 100;
        scale 3.0;
        reactiontime 10;
    }

    action State A_BolaCountdown() {
        reactiontime--;

        if(reactiontime <= 0) {
            return ResolveState("Drop");
        }
        return ResolveState(null);
    }

	States
	{
	Spawn:
        BOLS BCDE 1 A_BolaCountdown();
        loop;
    Drop:
        BOLS A 0 {
            bNOGRAVITY = false;
        }
    LoopingFall:
        BOLS BCDE 1;
        loop;
    XDeath:
        BOLS A 0 A_SpawnItemEx("BolaWeightHolder", 0, 0, -(z-tracer.pos.z), 0, 0, 0, 0, SXF_TRANSFERPOINTERS);
        stop;
	}
}

class BolaWeightHolder : BasicProjectile
{
    Default
    {
        radius 5;
        height 10;
        +BASICACTOR.DIEWITHTRACER;
        +NOEXPLODEFLOOR;
        +THRUACTORS;
        -NOGRAVITY
        gravity 2.0;
        reactiontime 105;
    }

    override void BasicInit() {
        if(tracer) {
            int balls = 3;
            for(int i = 0; i < balls; i++) {
                Actor act;
                bool ret;
                [ret, act] = A_SpawnItemEx("BolaWeight", tracer.radius + 16, 0, 0, 0, 0, 0, i * (360/balls));
                act.master = self;
                act.tracer = tracer;
            }
        }
    }
    
    override void BasicTick() {
        if(tracer) {
            tracer.Warp(self, 0, 0, 0, tracer.angle, WARPF_ABSOLUTEANGLE|WARPF_INTERPOLATE|WARPF_NOCHECKPOSITION);
            A_Countdown();
        }
    }

    States
    {
    Spawn:
        TNT1 A 1;
        loop;
    }
}

class BolaWeight : BasicEffect
{
    Default
    {
        +BASICACTOR.DIEWITHMASTER;
        scale 0.5;
    }

    override void Tick() {
        if(tracer && master) {
            Warp(tracer, tracer.radius + 16, 0, 0, 0, WARPF_USECALLERANGLE|WARPF_INTERPOLATE);
        }

        if(!master) {
            forceDeath();
        }
    }

    States
    {
    Spawn:
        BOLS F 1;
        loop;
    }
}
