extend class ZSCPlayerPawn {

    const WATER_GRAVITY_MULT = 0.2;
    const WATER_JUMP_MULT = 0.65;

    int iButtons, iOldButtons;

    bool bOnGround;
    bool bJumpCancel;
    bool bLegsInWater;
    bool bHeadInWater;

    int iSpeedInv;
    int iJumpInv;

    float fBaseSpeed;
    float fBaseJump;
    float fStrafeSpeed;

    float fBaseGravity;

    void AREAGMoveInit() {
        Thing_ChangeTID(0, PlayerNumber()+1000);
        ACS_NamedExecuteAlways("movement_standing", 0);
	    ACS_NamedExecuteAlways("movement_water_player", 0);

        iButtons = GetPlayerInput(INPUT_BUTTONS);
		iOldButtons = GetPlayerInput(INPUT_OLDBUTTONS);
        bJumpCancel = true;
        bOnGround = true;
        bLegsInWater = false;
        bheadInWater = false;
        fBaseGravity = gravity;
        
        iJumpInv = CountInv("BaseJumpSpeed");
        fBaseJump = float(iJumpInv) / 100.0;
        AREAGUpdateSpeeds();
    }

    void AREAGUpdateSpeeds() {
        iSpeedInv = CountInv("BaseMoveSpeed");
        fBaseSpeed = float(iSpeedInv) / 100.0;
        fStrafeSpeed = fBaseSpeed * 0.78089;
    }

    void AREAGMoveTick() {
        iOldButtons = iButtons;
		iButtons = GetPlayerInput(INPUT_BUTTONS);

        // On Ground bool based on Marrub/Allie's Lithium code.
        bOnGround = pos.z ~== floorz || bONMOBJ || bMBFBOUNCER;

        if(bOnGround && !bJumpCancel) {
            bJumpCancel = true;
        }

        // JUMP CANCEL
        if(AREAG_Func.checkButtonReleased(BT_JUMP, iButtons, iOldButtons) && vel.z > 0 && bJumpCancel)
		{
			ThrustThingZ(0, 0, 0, 0);
			bJumpCancel = false;
		}

        // STRAFERUN HANDLER
        if(((iButtons & BT_FORWARD) || (iButtons & BT_BACK)) && ((iButtons & BT_MOVELEFT) || (iButtons & BT_MOVERIGHT)))
		{
            if(!(speed ~== fStrafeSpeed)) {
                speed = fStrafeSpeed;
            }
		}
		else
		{
            if(!(speed ~== fBaseSpeed)) {
                speed = fBaseSpeed;
            }
		}

        // WATER
		if(CountInv("LegsUnderwater")>0)
		{
			if(!bLegsInWater) {
				gravity = fBaseGravity * WATER_GRAVITY_MULT;
				jumpz = fBaseJump * WATER_JUMP_MULT;
				A_GiveInventory("WaterSpeed", 1);
				bLegsInWater = true;
			}
		}
		else
		{
			if(bLegsInWater) {
				gravity = fBaseGravity;
				jumpz = fBaseJump;
				A_TakeInventory("WaterSpeed", 1);
				bLegsInWater = false;
			}
		}
		if(CountInv("HeadUnderwater")>0)
		{
			if(!bHeadInWater)
			{
				A_GiveInventory("BreathCooldown", 1);
				bHeadInWater = true;
			}
			if(CountInv("BreathCooldown") == 0)
			{
				if(CountInv("BreathTime") > 0)
				{
					A_TakeInventory("BreathTime", 10);
				}
				else
				{
					//Thing_Damage2(0, 5, "Drowning");
                    A_DamageSelf(5, "Drowning", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOPROTECT|DMSS_NOFACTOR, "None", "None", AAPTR_NULL);
				}
				A_GiveInventory("BreathCooldown", 1);
			}
		}
		else
		{
			GiveInventory("BreathTime", 100);
			bHeadInWater = false;
		}


        if(iJumpInv != CountInv("BaseJumpSpeed"))
		{
            iJumpInv = CountInv("BaseJumpSpeed");
            fBaseJump = float(iJumpInv) / 100.0;
            AREAGUpdateSpeeds();
			if(blegsInWater)
			{
				jumpz = fBaseJump * WATER_JUMP_MULT;
			}
			else
			{
				jumpz = fBaseJump;
			}
		}
		
		// SPEED MANIPULATION (eg. Gear Greaves)
		if(iSpeedInv != CountInv("BaseMoveSpeed"))
		{
			AREAGUpdateSpeeds();
		}
    }

}