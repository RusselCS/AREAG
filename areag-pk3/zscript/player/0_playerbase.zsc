const HP_SEG_MAX = 25;

class AREAGPlayerPawn : AREAGProtoPlayer {

    int iSelectedWep;
    int iPrevSelect;

    Array<SubWeapon> subs;

    override void AREAGThink() {
        AREAGMoveThink();
    }

	override void AREAGTick() {

        AREAGHealthTick();
        AREAGMoveTick();
        AREAGStatusTick();

        if(iSelectedWep != iPrevSelect) {
            iPrevSelect = iSelectedWep;
            if(iSelectedWep > SWEP_NONE && iSelectedWep < subs.size())
            {
                // A_Log(subs[iSelectedWep].weaponName);
            }
        }
    }

    void pushSubWeapon(SubWeapon wep) {
        subs.push(wep);
        if(iSelectedWep == SWEP_NONE) {
            iSelectedWep = 0;
        }
    }

    SubWeapon getCurrentSubweapon() {
        if(iSelectedWep == SWEP_NONE) {
            return null;
        }
        return subs[iSelectedWep];
    }

    SubWeapon selectNextSubweapon() {
        if(iSelectedWep == SWEP_NONE) {
            return null;
        } else {
            iSelectedWep = iSelectedWep + 1 >= subs.size() ? 0 : iSelectedWep + 1;
            return subs[iSelectedWep];
        }
    }

    SubWeapon selectPrevSubweapon() {
        if(iSelectedWep == SWEP_NONE) {
            return null;
        } else {
            iSelectedWep = iSelectedWep - 1 < 0 ? subs.size()-1 : iSelectedWep - 1;
            return subs[iSelectedWep];
        }
    }
    
    override void AREAGInit() {

		AREAGMoveInit();
		AREAGHealthInit();
        AREAGStatusInit();
		iSelectedWep = SWEP_NONE;
	}
}
