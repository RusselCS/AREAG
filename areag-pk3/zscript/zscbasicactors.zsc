const HP_SEG_MAX = 25;

enum ESubWeapons {
	SWEP_NONE = -1,
	SWEP_KNIFE,
	SWEP_DYNAMITE,
    SWEP_END
}

enum PickupTypes {
	PICKTYPE_ARTIFICE,
	PICKTYPE_WEAPON,
	PICKTYPE_SUBWEAPON,
	PICKTYPE_TREASURE
}

enum UpgradeTypes {
	PICKMSG_GEAR,
	PICKMSG_STEAM,
	PICKMSG_KNIFE,
	PICKMSG_HEALTHUP,
	PICKMSG_DYNAMITE,
	PICKMSG_NOVAPACK,

	PICKMSG_SPIDERDRONE,
	PICKMSG_BEEDRONE
}

class Once : Inventory
{
    Default
    {
        inventory.amount 1;
        inventory.maxamount 1;
    }
}

class Counter : Inventory
{
    Default
    {
        inventory.amount 1;
        inventory.maxamount 65536;
    }
}

class AGCoin : Counter {}

class ZSCCoinPickup : Counter
{
    Default {
        inventory.pickupmessage "";
        -INVENTORY.INVBAR;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        self.sprite = GetSpriteIndex(name("COIN"));

        if(amount < 5) {
            // Do nothing
        } else if(amount >= 5 && amount < 10) {
            self.frame = 1;
        } else if(amount >= 10 && amount < 50) {
            self.frame = 2;
        } else if(amount >= 50) {
            self.frame = 3;
        }
    }

    override String PickupMessage ()
	{
        CallACS("status_smallpickup", 0, amount);
		return "";
    }
    
    // SUPER jank method of implementing this, but
    // this gives X coins, and then *does not* give the item
    // itself
    override bool CanPickup(Actor toucher)
	{
        int res = super.CanPickup(toucher);
        
        if(res) {
            toucher.A_GiveInventory("AGCoin", amount);
        }

		return res;
    }
    
    override void AttachToOwner (Actor other)
	{
		becomeItem();
	}
}

class BasicEffect : Actor
{
    Default
    {
        PROJECTILE;
        +NOINTERACTION;
        +THRUACTORS;
        +NOGRAVITY;
        renderstyle "translucent";
        alpha 1.0;
        height 1;
        radius 1;
    }
}

class ZSCStoneBody : Actor
{
    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        int dmg = super.DamageMobj(inflictor, source, min(damage, 1), mod, flags, angle);
        return dmg;
    }
}

// BASIC ACTORS //
class BasicFastProjectile : FastProjectile
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(true, "SpawnLoop");
		goto SpawnLoop;
	SpawnLoop:
		TNT1 A 0;
		stop;
	}
}

class BasicProjectile : Actor
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(true, "SpawnLoop");
		goto SpawnLoop;
	SpawnLoop:
		TNT1 A 0;
		stop;
	}
}

class BasicInventory : CustomInventory {
	States
	{
	Spawn:
		TNT1 A 0;
		stop;
	ShopSpawn:
		"----" "#" 0 {
            bFLOATBOB = false; 
            bFLOAT = false;
        }
		"----" "#" 1;
		wait;
	}
}
