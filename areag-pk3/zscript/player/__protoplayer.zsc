class AREAGProtoPlayer : PlayerPawn {

    const WATER_GRAVITY_MULT = 0.2;
    const WATER_JUMP_MULT = 0.65;

    float lastZVel;
    double zVelLerp;
    double lerpVelZ;
    double lastZVelLerp;

    bool bOnGround;

    int iButtons, iOldButtons;

    override void postBeginPlay() {
        Super.postBeginPlay();
        AREAGInit();

        iButtons = GetPlayerInput(INPUT_BUTTONS);
		iOldButtons = GetPlayerInput(INPUT_OLDBUTTONS);
        
        lerpVelZ = 0.0;
        zVelLerp = 0.0;
        lastZVelLerp = 0.0;
        bOnGround = true;
    }

    override void PlayerThink() {
        AREAGThink();
        super.PlayerThink();
    }

    override void Tick() {
        Super.Tick();

        // On Ground bool based on Marrub/Allie's Lithium code.
        bOnGround = pos.z ~== floorz || bONMOBJ || bMBFBOUNCER;

        // This will be overridden by subclasses.
        AREAGTick();

        iOldButtons = iButtons;
        iButtons = GetPlayerInput(INPUT_BUTTONS);

        // VelZ interpolations also based on Lithium.
        if(Vel.Z - lastZVel > double.Epsilon)
        {
            if(lastZVel >= 0) zVelLerp += Vel.Z;
            else              zVelLerp += 5 - lastZVel * 2;
        }

        zVelLerp = AREAG_Func.Lerp(zVelLerp, 0, 0.277);
        lastZVel = Vel.Z;

        lastZVelLerp = lerpVelZ;
        lerpVelZ = AREAG_Func.Lerp(lerpVelZ, zVelLerp, 0.42);
    }

    virtual void AREAGThink() {}
    virtual void AREAGInit() {}
    virtual void AREAGTick() {}

    bool AREAGIsWalking() {
        return (abs(vel.x) > 0.0 || abs(vel.y)) > 0.0 && 
            ((iButtons & BT_FORWARD) || (iButtons & BT_BACK) || (iButtons & BT_MOVELEFT) || (iButtons & BT_MOVERIGHT));
    }

    // -----------------------------------------------------

    // [Russ] This method is a near direct port from GZDoom.pk3.
    // There's only a few additional lines added to the bottom for 
    override void CheckJump() {
        let player = self.player;
		// [RH] check for jump
		if (player.cmd.buttons & BT_JUMP)
		{
			if (player.crouchoffset != 0)
			{
				// Jumping while crouching will force an un-crouch but not jump
				player.crouching = 1;
			}
			else if (waterlevel >= 2)
			{
				Vel.Z = 4 * Speed;
			}
			else if (bNoGravity)
			{
				Vel.Z = 3.;
			}
			else if (level.IsJumpingAllowed() && player.onground && player.jumpTics == 0)
			{
				double jumpvelz = JumpZ * 35 / TICRATE;
				double jumpfac = 0;

				// [BC] If the player has the high jump power, double his jump velocity.
				// (actually, pick the best factors from all active items.)
				for (let p = Inv; p != null; p = p.Inv)
				{
					let pp = PowerHighJump(p);
					if (pp)
					{
						double f = pp.Strength;
						if (f > jumpfac) jumpfac = f;
					}
				}
				if (jumpfac > 0) jumpvelz *= jumpfac;

				Vel.Z += jumpvelz;
				bOnMobj = false;
				player.jumpTics = -1;
				if (!(player.cheats & CF_PREDICTING)) { // [Russ] The following bit was changed for AREAG...
                    
                    if(CountInv("DroneFlag")) {
                        A_PlaySound("*dronejump", CHAN_BODY);
                    } else {
                        if(CountInv("SteamGreavesFlag") == 0) {
                            A_PlaySound("*jump", CHAN_BODY);
                        } else {
                            A_PlaySound("*superjump", CHAN_BODY);
                        }
                    }
                }
			}
		}
    }

}