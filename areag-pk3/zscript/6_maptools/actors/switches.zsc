// SWITCH CRYSTALS
class ZSCSwitchCrystal : Actor
{
    //$Category AREAG-Map Tools
    //$Title Crystal Switch
	//$Sprite E0WAD0
    //$NotAngled

    bool bSwitchOn;

    Default
    {
        +SOLID;
        +SHOOTABLE;
        +NOBLOOD;
        health 1;
        mass 9999;
        height 56;
        radius 16;
        scale 1.5;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        bSwitchOn = false;
    }
	
    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        
        bool success = false;

        if(!bSwitchOn) {
            if(score == 0) {
                SetState(ResolveState("SwitchOn"));
            } else {
                SetState(ResolveState("SwitchOnOff"));
            }
            success = true;
            bSwitchOn = true;
        }

        if(success) {
            A_PlaySound("misc/switchon", CHAN_BODY, 1.0, false, ATTN_NONE);
            runSpecial();
        }
        
        return 0;
    }

    void switchOff() {
        bSwitchOn = false;
        A_PlaySound("misc/switchoff", CHAN_BODY, 1.0, false, ATTN_NONE);
        runSpecial();
    }

    void runSpecial() {
        A_CallSpecial(special, args[0], 0, bSwitchOn, args[3], args[4]);
    }

    States
    {
    Spawn:
        SCRY A 0;
        SCRY A 1;
        wait;
    SwitchOn:
		SCRY B 1;
        wait;
    SwitchOnOff:
        SCRY B 0 A_SetTics(score);
        SCRY B 0 switchOff();
		goto Spawn;
    }
}

class CrystalSwitchPop : Actor
{
    Default
    {
        +NOCLIP;
        +NOINTERACTION;
        +MISSILE;
        +THRUACTORS;
        height 2;
        radius 1;
    }

    States
    {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 A_Explode(5, 10, 0, 0, 10);
        stop;
    }
}

class ZSCFloorSwitch : Actor
{
    //$Category AREAG-Map Tools
    //$Title Floor Switch
	//$Sprite E0WAB0
    //$NotAngled

    static const String[] steps = {
        "AREAGPlayer",
        "DronePlayerDummy",
        "AREAGPushBlock",
        "AREAGPushBlockSmall"
    };

    Default
    {
        -SOLID;
        radius 32;
        height 10;
        renderstyle "none";
    }

    bool bActive;
    bool bEndState;
    override void Tick() {

        super.Tick();
        bool bSwitchState = false;

        double fCheckRadius = radius*3;

        if(!bEndState) {
            for(int i = 0; i < ZSCFloorSwitch.steps.Size(); i++) {
                if(CheckProximity(ZSCFloorSwitch.steps[i], fCheckRadius, 1, CPXF_NOZ|CPXF_SETTARGET)) {
                    bSwitchState = bSwitchState || (target.pos.z ~== pos.z && AREAG_Func.collidingBoxes(target, self, target.radius+self.radius+self.score));
                }
            }

            if(bSwitchState != bActive) {
                bActive = bSwitchState;
                ACS_ExecuteAlways(args[0], 0, bActive, args[3], args[4]);

                if(bActive) {
                    A_PlaySound("misc/floorswitchon", CHAN_BODY, 1.0, false, ATTN_NONE);
                    SetState(ResolveState("SwitchOn"));
                } else {
                    A_PlaySound("misc/floorswitchoff", CHAN_BODY, 1.0, false, ATTN_NONE);
                    SetState(ResolveState("SwitchOff"));
                }
            }
        }
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        bActive = false;
        bEndState = false;
        SetState(ResolveState("SwitchOff"));
    }

    States
    {
    SwitchOn:
		SCRY B 1;
        wait;
    SwitchOff:
        SCRY A 1;
        wait;
    }
}
