class ObBruteSpawner : EnemySpawner
{
    //$Category AREAG-Enemies
    //$Title Ob Brute
	//$Sprite SMT1A2C8

    Default
    {
        EnemySpawner.EnemyType "ObBrute";
        Height 82;
        Radius 24;
        Scale 0.9;
    }
}

class ObBrute : BasicEnemy
{
    Default
    {
        Scale 0.9;
        reactiontime 10;
        gravity 1.2;
        Height 82;
        Radius 24;
        Health 50;
        Mass 9999;
    }

    int stompCountdown;
    int stompCountdownMax;
    int stompSpeed;
    int rushspeed;
    int rushCountdown;
    int rushCountdownMax;
    int rushDragCountdown;
    int stunCountdown;
    int stunCountdownMax;
    int jumpForwardSpeed;
    int jumpSpeed;
    LookExParams searchParams;
    State patrolState;
    State spawnState;

    override void monsterInit() {
        stompCountdownMax = 20;
        rushCountdownMax = 35;
        stompspeed = 4;
        rushspeed = 50;
        meleerange = radius + 64;
        stunCountdownMax = 105;
        jumpForwardSpeed = 10.0;
        jumpSpeed = 16.0;

        patrolState = ResolveState("Patrol");
        spawnState = ResolveState("Spawn");

        searchParams.fov = 90.0;
        searchParams.minDist = 0.0;
        searchParams.maxDist = 1280.0;
        searchParams.maxHeardist = searchParams.maxDist * 2.0;
        searchParams.flags = 0;
        target = null;
    }

    override void monsterTick() {
        if(CurState == patrolState || CurState == spawnState) {
            if(!target) {
                A_RoomLookEx(searchParams.flags, searchParams.minDist, searchParams.maxDist, searchParams.maxHearDist, searchParams.fov, "See");
            } else {
                SetState(ResolveState("See"));
            }
        }
    }

    action State A_BrutePatrol(int spd, int ticks) {
        if(!invoker.nextPatrol) {
            A_Wander();
        }

        if(spd > 0 && LineTrace(angle, radius+spd*ticks*2, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, maxstepheight)) {
            return ResolveState("LeapStart");
        }

        A_ChangeVelocity(spd, 0, vel.z, CVF_RELATIVE|CVF_REPLACE);
        A_SetTics(ticks);
        return ResolveState(null);
    }

    action State A_BruteApproach(int spd, int ticks) {
        A_FaceTarget();
        Actor who = GetPointer(AAPTR_TARGET);
        double checkDist = Distance3D(who) - who.radius - radius;

        if(checkDist < radius + (meleerange-radius) / 2) {
            return resolveState("Melee");
        }

        if(spd > 0 && LineTrace(angle, radius+spd*ticks*2, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, maxstepheight)) {
            return ResolveState("LeapStart");
        }

        A_ChangeVelocity(spd, 0, vel.z, CVF_RELATIVE|CVF_REPLACE);
        A_SetTics(ticks);

        if(abs(target.pos.z - pos.z) < maxstepheight) {
            invoker.stompCountdown -= random(1, 2);
            if(invoker.stompCountdown <= 0) {
                return resolveState("Rushdown");
            }
        }
        
        return resolveState(null);
    }

    int bruteDashCooldown;

    action State A_BruteRush(int spd) {
        Actor who = GetPointer(AAPTR_TARGET);
        double checkDist = Distance3D(who) - who.radius - radius;

        if(invoker.bruteDashCooldown <= 0) {
            A_StartSound("monster/brute/dash", CHAN_BODY);
            invoker.bruteDashCooldown = 4;
        } else {
            invoker.bruteDashCooldown--;
        }

        if(checkDist < radius + (meleerange-radius) / 2) {
            A_Stop();
            return resolveState("Melee");
        }

        if(LineTrace(angle, radius+spd, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, maxstepheight) || LineTrace(angle, radius+spd, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, height)) {
            A_ChangeVelocity(-10, 0, 10, CVF_RELATIVE|CVF_REPLACE);
            return ResolveState("RushdownStun");
        }

        invoker.rushCountdown--;
        if(invoker.rushCountdown <= 0) {
            return ResolveState("RushdownSlow");
        }

        A_ChangeVelocity(spd, 0, vel.z, CVF_RELATIVE|CVF_REPLACE);

        return ResolveState(null);
    }

    action State A_BruteSlow(int spd) {
        Actor who = GetPointer(AAPTR_TARGET);
        double checkDist = Distance3D(who) - who.radius - radius;

        if(checkDist < radius + (meleerange-radius) / 2) {
            A_Stop();
            return resolveState("Melee");
        }

        if(LineTrace(angle+180, radius+spd, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, maxstepheight) || LineTrace(angle+180, radius+spd, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, height)) {
            A_ChangeVelocity(10, 0, 10, CVF_RELATIVE|CVF_REPLACE);
            return ResolveState("RushdownStun");
        }

        A_ChangeVelocity(0.8 * vel.x, 0.8 * vel.y, vel.z, CVF_REPLACE);
        if(vel.x ~== 0 && vel.y ~== 0) {
            return ResolveState("See");
        }

        return ResolveState(null);
    }

    action void A_BruteChasePrepare() {
        A_Stop();
        invoker.stompCountdown = invoker.reactiontime;
    }

    action void A_BruteRushPrepare() {
        invoker.rushCountdown = invoker.rushCountdownMax;
    }

    action void A_BruteStunPrepare() {
        invoker.stunCountdown = invoker.stunCountdownMax;
        BasicEffect fx = A_SpawnBasicEffect("BruteStunEffect", 0, 0, height + 16.0);
        fx.reactiontime = invoker.stunCountdownMax;
        fx.tracer = self;
        fx.rotationspeed = 2.0;
        fx.rollspeed = 2.0;
        fx.mass = 48;
        fx.height = height + 16.0;

        A_SpawnItemEx("BruteStunCrash");
    }

    action State A_BruteStun() {
        invoker.stunCountdown--;
        if(invoker.stunCountdown <= 0) {
            return ResolveState("See");
        } else {
            if(invoker.stunCountdown % 2 == 0) {
                A_Warp(AAPTR_DEFAULT, -2, -2, 0);
            } else {
                A_Warp(AAPTR_DEFAULT, 2, 2, 0);
            }
        }

        return ResolveState(null);
    }

    override void monsterPainSound(Name mod) {
        A_StartSound("monster/brute/pain", CHAN_BODY);
    }
    override void monsterDeathSound(Name mod) {
        A_StartSound("monster/brute/death", CHAN_VOICE);
    }

    States
    {
    Spawn:
        SMT1 A 1;
        wait;
    Patrol:
        SMT1 A 1 A_BrutePatrol(0, 10);
        SMT1 A 1 A_BrutePatrol(stompSpeed, 4);
        SMT1 B 1 A_BrutePatrol(stompSpeed, 4);
        SMT1 C 1 A_BrutePatrol(0, 10);
        SMT1 C 1 A_BrutePatrol(stompSpeed, 4);
        SMT1 D 1 A_BrutePatrol(stompSpeed, 4);
        loop;
    See:
        SMT1 P 0 A_StartSound("monster/brute/see", CHAN_VOICE);
        SMT1 P 0 A_BruteChasePrepare();
        SMT1 DBPPPBDQQQDB 1 A_FaceTarget();
    SeeLoop:
        SMT1 A 1 A_BruteApproach(0, 10);
        SMT1 A 1 A_BruteApproach(stompSpeed, 4);
        SMT1 B 1 A_BruteApproach(stompSpeed, 4);
        SMT1 C 1 A_BruteApproach(0, 10);
        SMT1 C 1 A_BruteApproach(stompSpeed, 4);
        SMT1 D 1 A_BruteApproach(stompSpeed, 4);
        goto SeeLoop;
    LeapStart:
        SMT1 P 2 A_StartSound("monster/brute/see", CHAN_VOICE);
        SMT1 P 0 A_StopSound(CHAN_VOICE);
        SMT1 OOO 2 A_ChangeVelocity(-jumpForwardSpeed/2, 0, vel.z, CVF_RELATIVE);
        SMT1 O 14 A_StopXY();
        SMT1 B 2;
        SMT1 E 0 A_StartSound("monster/brute/leap", CHAN_BODY);
        SMT1 E 5 A_ChangeVelocity(jumpForwardSpeed, 0, jumpSpeed, CVF_RELATIVE|CVF_REPLACE);
        SMT1 E 1 A_CheckFooting("LeapLand");
        wait;
    LeapLand:
        SMT1 F 0 A_StartSound("monster/brute/land", CHAN_BODY);
        SMT1 F 0 A_StopXY();
        SMT1 F 2;
        SMT1 G 20;
        goto Patrol;
    RushDown:
        SMT1 P 0 A_BruteRushPrepare();
        SMT1 GGGGGGGGGG 1 A_FaceTarget();
        SMT1 O 1 A_BruteRush(rushspeed);
        wait;
    RushdownSlow:
        SMT1 G 0 A_SetAngle(angle + 180);
        SMT1 G 1 A_BruteSlow(rushspeed);
        wait;
    RushdownStun:
        SMT1 P 0 A_BruteStunPrepare();
        SMT1 P 5;
        SMT1 P 0 A_Stop();
        SMT1 P 1 A_BruteStun();
        wait;
    Melee:
        SMT1 E 0 A_Stop();
        SMT1 EEEEE 1 A_FaceTarget();
        SMT1 E 0 A_StartSound("monster/brute/swing", CHAN_BODY);
        SMT1 H 2 A_CustomMeleeAttack(20, "monster/brute/smash", "", "BruteSmash");
        SMT1 II 2;
        SMT1 J 5;
        SMT1 J 0 A_StartSound("monster/brute/swing", CHAN_BODY);
        SMT1 M 2 A_CustomMeleeAttack(20, "monster/brute/smash", "", "BruteSmash");
        SMT1 N 2;
        SMT1 N 20;
        goto See;
    Death:
        SMT1 P 0 A_DeathSequence(EDS_VerticalSquash);
        SMT1 P 1;
        wait;
    }
}

class BruteStunEffect : BasicEffect
{
    Default
    {
        +BASICACTOR.DIEWITHTRACER;
    }
    override void BasicInit() {
        
        int stars = 4;

        for(int i = 0; i < stars; i++) {
            let fx = A_SpawnBasicEffect("BruteStunStar", mass, 0, 0, 0, 0, 0, i*360/stars);
            fx.tracer = self;
            fx.rotationspeed = rotationspeed;
            fx.rollspeed = rollspeed;
            fx.mass = mass;
        }
    }

    override void BasicTick() {
        if(tracer) {
            A_Warp(AAPTR_TRACER, 0, 0, height, 0, WARPF_INTERPOLATE|WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
        }
    }

    action state A_StunCountdown() {
        let e = BasicEnemy(tracer);
        if(e) {
            if(!e.sightFrozen) {
                reactiontime--;
                if(reactiontime <= 0) {
                    return ResolveState("Death");
                }
            }
        }
        return ResolveState(null);
    }

    States
    {
    Spawn:
        TNT1 A 1 A_StunCountdown();
        wait;
    Death:
        TNT1 A 0;
        stop;
    }
}

class BruteStunStar : BasicEffect
{
    Default
    {
        +ROLLSPRITE;
        +FORCEXYBILLBOARD;
        scale 0.25;
        +BASICACTOR.DIEWITHTRACER;
    }

    override void BasicTick() {
        if(!tracer) {
            A_ChangeVelocity(0, 0, 1, CVF_REPLACE);
        } else {
            A_Warp(AAPTR_TRACER, mass, 0, 0, 0, WARPF_INTERPOLATE|WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
        }
    }

    States
    {
    Spawn:
        STN1 A 1;
        wait;
    Death:
        STN1 A 1 A_FadeOut();
        loop;
    }
}

class BruteStunCrash : BasicProjectile
{
    Default
    {
        +NOINTERACTION;
    }

    States
    {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 A_Explode(128, 15, 0, 0, 128);
        TNT1 A 0 A_Quake(3, 10, 0, 20 * 64, "");
        TNT1 A 0 A_StartSound("player/crashland", CHAN_VOICE);
        TNT1 A 140;
        stop;
    }
}
