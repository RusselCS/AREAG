class GlowflyHive : BasicEnemy
{
    Default
    {
        scale 2.0;
        BasicEnemy.TrueHeight 80;
        Radius 48;
        Health 100;
        mass 999999;
        Speed 0;
        reactiontime 30;
        species "Glowfly";
        +THRUSPECIES;
    }

    int maxBugs;

    override void Init() {
        maxBugs = 16;
    }

    action void A_SpawnBugs() {
        int bugCount = CountInv("BugCounter");
        int bugAng;

        if(bDORMANT) {
            bugAng = frandom(-45, 45);
        } else {
            bugAng = frandom(0, 360);
        }
        A_StartSound("monster/glowfly/spawn", CHAN_BODY);
        A_SpawnItemEx("GlowFly", 16, 0, 64+frandom(0, 32), 8, 0, -4, bugAng, SXF_SETMASTER);
        A_GiveInventory("BugCounter", 1);
    }

    action State A_WaitForBugs() {
        if(invoker.countInv("BugCounter") < invoker.maxBugs) {
            return ResolveState("SpawnBugs");
        } else {
            return ResolveState(null);
        }
    }

    States
    {
    Spawn:
        GFLY A 0;
        GFLY A 1 A_LookEx(0, 0, 1600, 1600, 360.0, "SpawnBugs");
        wait;
    SpawnBugs:
        GFLY A 15 A_SetTics(random(15, 35));
        GFLY A 0 A_SpawnBugs();
        GFLY A 1 A_WaitForBugs();
        wait;
    Death:
        GFLY A 0 A_StartSound("monster/glowfly/hivedie", CHAN_BODY);
        GFLY A 0 A_DeathSequence();
        GFLY A 4;
        wait;
    }
}

class BugCounter : Counter {}

class Glowfly : BasicEnemy
{
    Default
    {
        BasicEnemy.TrueHeight 10;
        Radius 5;
        Health 1;
        mass 1;
        Speed 10;
        scale 0.2;
        +NOGRAVITY;
        +FLOATBOB;
        species "Glowfly";
        +THRUSPECIES;
    }

    int moveTimer;

    override void Init() {
        A_StartSound("monster/glowfly/buzz", CHAN_BODY);
        moveTimer = random(16, 48);
    }

    action void A_FlyWander() {
        A_LookEx(0, 0, 800, 800, 90.0, "Chase");

        if(invoker.moveTimer == 0) {
            if(random(0, 1) == 0) { // choose to move
                A_SetAngle(angle + random(-120, 120));
                A_ChangeVelocity(speed/4, 0, random(-speed/4, speed/4), CVF_RELATIVE|CVF_REPLACE);
            } else {
                A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
                invoker.moveTimer = random(16, 35);
            }
            invoker.moveTimer += random(16, 35);
        } else {
            invoker.moveTimer--;
        }
    }

    action State A_FlyChase() {
        if(target && CheckIfTargetInLOS(0, 0, 800, 0)) {
            if(!CheckIfCloser(target, target.radius, false)) {
                A_FaceTarget(0, 0, 0, 0, FAF_MIDDLE);
                A_ChangeVelocity(speed*cos(pitch), 0, speed*sin(-pitch), CVF_RELATIVE|CVF_REPLACE);
            } else {
                
            }
            return resolveState(null);
        } else {
            invoker.moveTimer = 70;
            A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
            return resolveState("SpawnLoop");
        }
    }

    States
    {
    Spawn:
        GFLY BCBCBCBC 1;
        GFLY B 0 A_Stop;
    SpawnLoop:
        GFLY BC 1 A_FlyWander();
        loop;
    Chase:
        GFLY BC 1 A_FlyChase();
        loop;
    Death:
        TNT1 A 0 A_StartSound("monster/glowfly/death", CHAN_BODY);
        TNT1 A 0 A_TakeInventory("BugCounter", 1, 0, AAPTR_MASTER);
        TNT1 A 0 A_SpawnItemEx("EnemyDeathSmoke");
        TNT1 AAAA 1;
        stop;
    }

}
