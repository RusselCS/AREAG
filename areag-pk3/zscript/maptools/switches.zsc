// SWITCH CRYSTALS
class ZSCSwitchCrystal : BasicActor
{
    //$Category AREAG-Map Tools
    //$Title Crystal Switch
	//$Sprite E0WAD0
    //$NotAngled

    bool bSwitchOn;

    Default
    {
        +SOLID;
        +SHOOTABLE;
        +NOBLOOD;
        health 1;
        mass 9999;
        height 56;
        radius 16;
        scale 1.5;
        bloodtype "HitPop";
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        bSwitchOn = false;
    }
	
    override int onDamage(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        
        switchOn(false);
        
        return 0;
    }

    void switchOn(bool fake) {
        bool success = false;

        if(!bSwitchOn) {
            SetState(ResolveState("SwitchOn"));
            success = true;
            bSwitchOn = true;
        }

        if(success) {
            if(!fake) {
                A_StartSound("misc/switchon", CHAN_BODY, 0, 1.0, ATTN_NONE);
                runSpecial();
            }
        }
    }

    void switchOff() {
        bSwitchOn = false;
        if(score > 10) {
            A_StartSound("misc/switchoff", CHAN_BODY, 0, 1.0, ATTN_NONE);
        }
        runSpecial();
    }

    void runSpecial() {
        A_CallSpecial(special, args[0], 0, bSwitchOn, args[3], args[4]);
    }

    States
    {
    Spawn:
        SCRY A 0;
        SCRY A 1;
        wait;
    Loading:
        SCRY A 0 switchOn(true);
    SwitchOn:
		SCRY B 1 A_JumpIf(score > 0, "SwitchOnOff");
        wait;
    SwitchOnOff:
        SCRY B 0 A_SetTics(score);
        SCRY B 0 A_JumpIf(score == 0, "SwitchOn");
    SwitchOff:
        SCRY B 0 switchOff();
		goto Spawn;
    }
}

class CrystalSwitchPop : Actor
{
    Default
    {
        +NOCLIP;
        +NOINTERACTION;
        +MISSILE;
        +THRUACTORS;
        height 2;
        radius 1;
    }

    States
    {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 A_Explode(5, 10, 0, 0, 10);
        stop;
    }
}

class ZSCFloorSwitch : Actor
{
    //$Category AREAG-Map Tools
    //$Title Floor Switch
	//$Sprite E0WAB0
    //$NotAngled

    mixin AREAG_Common;

    static const String[] steps = {
        "AREAGPlayer",
        "AREAGDrone",
        "DronePlayerDummy",
        "AREAGPushBlock",
        "AREAGPushBlockSmall"
    };

    Default
    {
        -SOLID;
        radius 32;
        height 10;
        renderstyle "none";
    }

    bool bActive;
    bool bEndState;
    override void Tick() {

        super.Tick();
        bool bSwitchState = false;

        double fCheckRadius = radius*3;

        if(!bEndState) {
            for(int i = 0; i < ZSCFloorSwitch.steps.Size(); i++) {
                if(CheckProximity(ZSCFloorSwitch.steps[i], fCheckRadius, 1, CPXF_NOZ|CPXF_SETTARGET)) {
                    bSwitchState = bSwitchState || (target.pos.z ~== pos.z && collidingBoxes(target, self, target.radius+self.radius+self.score));
                }
            }

            if(bSwitchState != bActive) {
                bActive = bSwitchState;
                ACS_ExecuteAlways(args[0], 0, bActive, args[3], args[4]);

                if(bActive) {
                    A_StartSound("misc/floorswitchon", CHAN_BODY, 0, 1.0, ATTN_NONE);
                    SetState(ResolveState("SwitchOn"));
                } else {
                    A_StartSound("misc/floorswitchoff", CHAN_BODY, 0, 1.0, ATTN_NONE);
                    SetState(ResolveState("SwitchOff"));
                }
            }
        }
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        bActive = false;
        bEndState = false;
        SetState(ResolveState("SwitchOff"));
    }

    States
    {
    SwitchOn:
		SCRY B 1;
        wait;
    SwitchOff:
        SCRY A 1;
        wait;
    }
}

class ZSCWallSwitch : Actor
{
    //$Category AREAG-Map Tools
    //$Title Wall Switch
	//$Sprite E0WCI0

    bool bSwitchOn;

    Default
    {
        +NOINTERACTION;
        +NOGRAVITY;
	    +WALLSPRITE;
        height 56;
        radius 8;
        scale 2.0;
        Activation THINGSPEC_TriggerActs|THINGSPEC_Switch;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        bSwitchOn = false;
        
        A_SetAngle(angle+180);
        A_Warp(AAPTR_DEFAULT, -7.9, 0, 0, 0, WARPF_NOCHECKPOSITION);
        A_SpawnItemEx("WallSwitchExtender", 4,  28, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4,  20, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4,  12, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4,   4, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4,  -4, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4, -12, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4, -20, 0, 0, 0, 0, 0, SXF_SETMASTER);
        A_SpawnItemEx("WallSwitchExtender", 4, -28, 0, 0, 0, 0, 0, SXF_SETMASTER);

        ACS_NamedExecuteAlways("tablet_distanceCheck", 0);
    }
	
    override void Activate(Actor activator) {
        super.Activate(activator);
        switchOn(false);
    }

    void switchOn(bool fake) {
        bool success = false;

        if(!bSwitchOn) {
            SetState(ResolveState("SwitchOn"));
            success = true;
            bSwitchOn = true;
        }

        if(success) {
            if(!fake) {
                A_StartSound("misc/switchon", CHAN_BODY, 0, 1.0, ATTN_NONE);
                runSpecial();
            }
        }
    }

    void switchOff() {
        bSwitchOn = false;
        A_StartSound("misc/switchoff", CHAN_BODY, 0, 1.0, ATTN_NONE);
        runSpecial();
    }

    void runSpecial() {
        A_CallSpecial(special, args[0], 0, bSwitchOn, args[3], args[4]);
    }

    States
    {
    Spawn:
        SCRY C 0;
        SCRY C 1;
        wait;
    Loading:
        SCRY C 0 switchOn(true);
    SwitchOn:
		SCRY D 1 A_JumpIf(score > 0, "SwitchOnOff");
        wait;
    SwitchOnOff:
        SCRY C 0 A_SetTics(score);
        SCRY C 0 A_JumpIf(score == 0, "SwitchOn");
        SCRY C 0 switchOff();
		goto Spawn;
    }
}

class WallSwitchExtender : Actor
{
    Default
    {
        +SOLID;
        +SHOOTABLE;
        +NOBLOOD;
        +NOGRAVITY;
        +USESPECIAL;
        health 1;
        mass 9999;
        height 64;
        radius 4;
        scale 2.0;
        Activation THINGSPEC_TriggerActs|THINGSPEC_Switch;
    }

    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        Activate(master);
        return 0;
    }

    override void Activate(Actor activator) {
        master.Activate(master);
    }

    States
    {
    Spawn:
        TNT1 A 1;
        wait;
    Active:
        TNT1 A 1;
        goto Spawn;
    }
}
