class BasicActor : Actor
{
	mixin AREAG_Common;

	Default
	{
		+ROLLSPRITE;
		+ROLLCENTER;
		+NOBLOOD;
	}

	int m_basicActorFlags;

	flagdef SHOWHITBOX: m_basicActorFlags, 0;
	flagdef DIEWITHTARGET: m_basicActorFlags, 1;
	flagdef DIEWITHTRACER: m_basicActorFlags, 2;
	flagdef DIEWITHMASTER: m_basicActorFlags, 3;

	bool bToggleHitbox;
	Array<Actor> items;

    bool hasDied;

	override void PostBeginPlay() {
		Super.PostBeginPlay();
		BasicInit();
	}

    override void Tick() {
        Super.Tick();
		if(!IsFrozen() || bNOTIMEFREEZE) {
			BasicTick();

			if(!hasDied) {
				if((bDIEWITHTARGET && !target) ||
				   (bDIEWITHTRACER && !tracer) ||
				   (bDIEWITHMASTER && !master)) {
						Die(self, self);
				}
			}
			
		}
		updateHitbox();
    }

	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath) {
        hasDied = true;
        super.Die(source, inflictor, dmgflags, MeansOfDeath);
    }

	override void OnDestroy() {
		Super.OnDestroy();
		BasicDestroy();
		destroyHitbox();
	}

	virtual void BasicInit() {}
	virtual void BasicTick() {}
	virtual void BasicDestroy() {}

	void createHitbox() {
		for(int i = 0; i < radius; i+=2) {
			addToItems("HitboxParticle", radius, i, 1);
			addToItems("HitboxParticle", radius, -i, 1);
			addToItems("HitboxParticle", -radius, i, 1);
			addToItems("HitboxParticle", -radius, -i, 1);
			addToItems("HitboxParticle", i, radius, 1);
			addToItems("HitboxParticle", -i, radius, 1);
			addToItems("HitboxParticle", i, -radius, 1);
			addToItems("HitboxParticle", -i, -radius, 1);

			addToItems("HitboxParticle", radius, i, height);
			addToItems("HitboxParticle", radius, -i, height);
			addToItems("HitboxParticle", -radius, i, height);
			addToItems("HitboxParticle", -radius, -i, height);
			addToItems("HitboxParticle", i, radius, height);
			addToItems("HitboxParticle", -i, radius, height);
			addToItems("HitboxParticle", i, -radius, height);
			addToItems("HitboxParticle", -i, -radius, height);
		}

		for(int i = 1; i <= height; i+=2) {
			addToItems("HitboxParticle", radius, radius, i);
			addToItems("HitboxParticle", radius, -radius, i);
			addToItems("HitboxParticle", -radius, radius, i);
			addToItems("HitboxParticle", -radius, -radius, i);
		}
	}

	void updateHitbox() {

		if(bSHOWHITBOX || getCvarBool("db_viewhitboxes")) {
			if(!bToggleHitbox) {
				bToggleHitbox = true;
				createHitbox();
			}
		} else {
			if(bToggleHitbox) {
				bToggleHitbox = false;
				destroyHitbox();
			}
		}

		if(bToggleHitbox) {
			for(int i = 0; i < items.size(); i++) {
				items[i].A_Warp(AAPTR_MASTER, items[i].args[0], items[i].args[1], items[i].args[2], 0, WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_ABSOLUTEOFFSET);
			}
		}
	}

	void destroyHitbox() {
		for(int i = 0; i < items.size(); i++) {
			items[i].Destroy();
		}
		items.clear();
	}

	void addToItems(String item, int posx, int posy, int posz) {
		bool success;
		Actor act;

		[success, act] = A_SpawnItemEx(item, posx, posy, posz, 0, 0, 0, 0, SXF_SETMASTER);
		act.args[0] = posx;
		act.args[1] = posy;
		act.args[2] = posz;
		items.push(act);
	}

	void forceDeath() {
		Die(null, null, 0, "Null");
	}

	action BasicEffect A_SpawnBasicEffect(string effect, double posx = 0, double posy = 0, double posz = 0, double velx = 0, double vely = 0, double velz = 0, double ang = 0, int flags = 0) {
		bool b;
		Actor fx;
		[b, fx] = A_SpawnItemEx(effect, posx, posy, posz, velx, vely, velz, ang, flags);
		BasicEffect ret = BasicEffect(fx);
		return ret;
	}

	action State A_CheckFooting(StateLabel where) {
		if(pos.z ~== floorz || bONMOBJ || bMBFBOUNCER) {
			return ResolveState(where);
		}
		return ResolveState(null);
	}

	bool XYLineTrace(double x, double y, double z, int flags = 0, double offsetforward = 0, double offsetside = 0) {
		
		double ang = VectorAngle(x, y);
		if(flags & XYLF_RELATIVE) {
			ang += angle;
		}

		if(flags & XYLF_ADDRADIUS) {
			let radiusMod = radius * RADIUS_OFFS;
			let radModX = SignFromInt(x) * radiusMod;
			let radModY = SignFromInt(y) * radiusMod;

			x += radModX;
			y += radModY;
		}

		double dist = sqrt(x * x + y * y);
		
		FLineTraceData deets;
		let ret = LineTrace(ang, dist, 0, TRF_SOLIDACTORS|TRF_THRUHITSCAN|TRF_BLOCKSELF, z, offsetforward, offsetside, deets);
		A_SpawnItemEx("WhipPuff", deets.HitLocation.x-pos.x, deets.HitLocation.y-pos.y, deets.HitLocation.z-pos.z, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION);

		//A_Log(String.format("Angle: %f // In Dist: %f // Out Dist: %f", ang, dist, deets.distance));

		return ret;
	}

	action void A_StopXY() {
		A_ChangeVelocity(0, 0, vel.z, CVF_REPLACE);
	}
}

enum EXYLineTraceFlags
{
	XYLF_RELATIVE = 1,
	XYLF_ADDRADIUS = 2,
};

// DEBUG FUNCTIONS
class HitboxParticle : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        translation "0:255=104:104";
    }

    States
    {
    Spawn:
        CHWP BB 1 bright;
        wait;
    }
}

class HitboxDebug : BasicActor {}
