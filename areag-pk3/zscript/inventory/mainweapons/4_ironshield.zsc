class IronShieldPickup : BasicInventory
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_WEAPON;
        BasicInventory.PickupID PICKMSG_IRONSHIELD;
        BasicInventory.CheckItem "IronShield";
    }
    States
    {
    SpawnFrames:
        TSHL A 1;
        loop;
    PickupEffect:
        TSHL A 0 A_GiveInventory("IronShield", 1);
        TSHL A 0 A_SelectWeapon("IronShield");
        stop;
    }
}

class IronShield : AREAGProtoWeapon
{

    Default
    {
        Weapon.SlotNumber 1;
        Obituary "%o was crushed by %k's smashing board.";
        Inventory.Pickupmessage "";
    }

	States
    {
    MainRaise:
		TSHL ZDCB 1;
		goto MainReady;
	MainReady:
		TSHL B 1 A_MainWeaponReady();
		wait;
	MainWindup:
		TSHL A 0 A_StartMainFiringSequence();
		TSHL DCBEF 1;
        TSHL B 0 A_GiveInventory("ShieldPower", 1);
		goto MainHold;
	MainHold:
		TSHL G 1;
		TNT1 A 0 A_MainHoldCheck("MainHold");
		goto MainFire;
	MainFire:
        TSHL B 0 A_TakeInventory("ShieldPower", 1);
		TSHL B 0 A_StartSound("weapon/shieldswing", CHAN_WEAPON);
		TSHL H 1 A_YawRecoil(-0.2);
        TSHL B 0 A_FireProjectile("IronShieldProjectile", 0, 8, 0, 0);
        TSHL IJKZZZ 1 {
            if(CountInv("IronShieldHit") > 0) {
                return ResolveState("MainRecoil");
            }
            A_YawRecoil(-0.2);
            return ResolveState(Null);
        }
		TNT1 A 3;
		goto FireEnd;
    MainRecoil:
        TSHL LMNOEBCD 1;
        TNT1 A 6;
		goto FireEnd;
	FireEnd:
		TNT1 A 6;
		TNT1 A 0 A_FinishMainFiringSequence();
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_MainRefire("MainHoldRefire", "MainWait");
		goto MainRaise;
	MainOffWindup:
		TSHL DCBEF 1;
		goto MainWait;
	MainWait:
		TNT1 A 1;
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_CheckSubStatus("MainHoldRefire", "MainWait");
		goto MainRaise;
	MainHoldRefire:
        TNT1 A 0 A_StartMainFiringSequence();
        goto MainHold;
	MainLower:
		TSHL BCD 1;
		TNT1 A 1 A_MainDeselect;
		wait;

	// States
	// {
    // Deselect:
    //     TSHL A 0 A_AREAGLowerSub();
	// 	TSHL BBCDZ 1;
    //     goto Super::DeselectReal;
	// Ready:
	// 	TSHL A 0 A_ReadySubWeapons();
	// ReadyRaise:
	// 	TSHL A 0 A_AREAGRaiseSub();
	// 	TSHL ZDCB 1;
	// 	goto ReadyLoop;
	// ReadyLoop:
	// 	TSHL B 1 A_AREAGWeaponReady();
	// 	loop;
    // MainLowerStart:
	// 	TSHL DCBEF 1;
    //     goto ShieldRaise;
	// Fire:
	// 	TSHL B 0 A_AREAGLowerSub();
	// MainLower:
	// 	TSHL BBEF 1;
	// ShieldRaise:
    //     TSHL G 1 A_RaiseShield();
    // Hold:
	// 	TSHL G 1 A_CarryShield();
	// 	TSHL G 0 A_AREAGRefire();
	// 	goto MainRelease;
	// MainRelease:
    //     TSHL B 0 A_LowerShield();
	// 	TSHL B 0 A_StartSound("weapon/invoker.shieldswing", CHAN_WEAPON);
	// 	TSHL H 1 A_SetAngle(angle-0.2);
    //     TSHL B 0 A_FireProjectile("TribalShieldProjectile", 0, 8, 0, 0);
    //     TSHL IJKZZZ 1 {
    //         if(CountInv("TribalShieldHit") > 0) {
    //             return ResolveState("MainRecoil");
    //         }
    //         A_SetAngle(angle-0.2);
    //         return ResolveState(Null);
    //     }
	// 	TNT1 A 3;
	// 	goto FireEnd;
    // MainRecoil:
    //     TSHL LMNOEBCD 1;
    //     TNT1 A 6;
	// 	goto FireEnd;
    // AltLowerStart:
	// 	TNT1 A 1;
    //     goto AltHold;
	// AltLower:
	// 	TSHL BCD 1;
    //     goto AltHold;
    // AltRelease:
    //     HBMA A 0 A_AREAGUseSub();
    //     HBMA A 1 A_JumpIf(true, "FireEnd");
    //     wait;
    // FireEnd:
    //     TNT1 AAAAA 1;
    //     TNT1 AAAAAAAAAA 1 A_AREAGClearRefire();
    //     TNT1 A 1 A_JumpIf(true, "ReadyRaise");
    //     wait;
	// }
    }
}

class ShieldPower : Once {}

class IronShieldWall : HitboxDebug
{
    action void updatePosition(int dist, float zPos) {
        A_Warp(args[1], dist, 0, 0, args[0], WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_USETID);

        A_Log(String.format("WHERE %d", abs(pos.z-zPos)));
    }

    Default
    {
        +SHOOTABLE;
        -SOLID;
        +GHOST;
        +NOGRAVITY;
        +SLIDESONWALLS;
        Height 64;
        Radius 7;
    }
    States
    {
    Spawn:
        TNT1 A 2;
        wait;
    }
}

class IronShieldProjectile : BasicProjectile
{
    Default
    {
        Speed 32;
        DamageFunction (10);
        Damagetype "IronShield";
        +NOTIMEFREEZE;
        +HITTRACER;
        +BLOODSPLATTER;
        radius 4;
        radius 2;
        Scale 2.5;
    }
	States
	{
	SpawnLoop:
		TNT1 A 1;
		TNT1 A 1;
		stop;
	XDeath:
		TNT1 A 0 A_StartSound("weapon/invoker.shieldsmack", CHAN_BODY);
		TNT1 A 0 A_SpawnItemEx("IronShieldQuake");
        TNT1 A 0 A_SpawnItemEx("IronShieldImpact");
		stop;
	Crash:
	Death:
		TNT1 A 0 A_StartSound("weapon/shieldwall", CHAN_BODY);
        TNT1 A 0 A_GiveToTarget("IronShieldHit", 1);
		TNT1 AAA 0 A_SpawnItemEx("IronShieldPuff", 0, 0, 0, frandom(0.4, 1.0), 0, frandom(-1.0, 1.0), frandom(0.0, 360.0));
		TNT1 A 0 A_SpawnItemEx("IronShieldQuake");
		stop;
	}
}

class IronShieldQuake : Actor
{
    Default
    {
        +NOINTERACTION;
	    +NOCLIP;
    }
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 4, 0, 32, 0);
		TNT1 A 1;
		stop;
	}
}

class IronShieldHit : PowerUp
{
    Default
    {
        powerup.duration 10;
    }
}

class IronShieldPuff : BasicEffect
{
    Default
    {
        -NOINTERACTION;
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        -ACTIVATEIMPACT;
        +MOVEWITHSECTOR;
        bouncetype "hexen";
        alpha 0.4;
        scale 1.5;
    }
	States
	{
	Spawn:
		WHPF A 0;
		WHPF A 0 A_SetRoll(frandom(0.0, 360.0));
		SHPF ABCDEFGH 1;
		stop;
	}
}

class IronShieldImpact : IronShieldPuff
{
    Default
    {
        alpha 0.9;
    }
    States
    {
    Spawn:
        SHPF JKLMN 1;
        stop;
    }
}
