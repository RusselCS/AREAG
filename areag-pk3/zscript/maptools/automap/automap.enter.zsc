class AutomapEntrance : BasicActor
{
    Default
    {
        //$Category AREAG-Automap
        //$Title Starting Room
        //$Sprite E0WBG0
        //$Arg0 Room ID
        //$NotAngled
        +NOGRAVITY;
        +NOINTERACTION;
    }

    AREAGPlayerPawn plr;
    int roomId;

    override void BasicInit()
    {
        plr = getPlayer();
        roomId = args[0];
    }

    override void BasicTick()
    {
        if(playerInSector()) {
            if(plr.pos.z < ceilingz-plr.height && plr.pos.z >= floorz) {
                if(plr.getRoomId() != roomId) {
                    // Set player tag to top;
                    plr.setRoomId(roomId);
                    console.printf("Starting Room: %d", roomId);
                    if(bDORMANT) {
                        destroy();
                    }
                }
            }
        }
    }

    bool playerInSector()
    {
        if(plr) {
            return plr.cursector == cursector;
        }
        return false;
    }
}

extend class AREAGPlayerPawn
{
    int roomId;

    int getRoomId() {
        return roomId;
    }

    void setRoomId(int room) {
        SetInventory("RoomIdCounter", room);
        roomId = room;
        Console.printf("Switched to room %s", MapDataRepo.getRoomName(level.levelnum, roomId-100));

        for(int i = 0; i < MapDataRepo.getRoomFloorCount(level.levelnum, roomId-100); i++) {
            bool s;
            Actor a;
            float zd = MapDataRepo.getRoomFloorZ(level.levelnum, roomId-100, i);
            [s, a] = A_SpawnItemEx("RoomDebugPlane", 0, 0, zd-pos.z, 0, 0, 0, 0, SXF_ABSOLUTEANGLE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
            a.args[0] = room;
        }
    }
}

class RoomIdCounter : Counter {}
