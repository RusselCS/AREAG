class ChainWhipPickup : BasicInventory
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_WEAPON;
        BasicInventory.PickupID PICKMSG_STEELWHIP;
        BasicInventory.CheckItem "ChainWhip";
    }

    States
    {
    SpawnFrames:
        CHWP A 1;
        loop;
    PickupEffect:
        CHWP A 0 A_SelectWeapon("ChainWhip");
        stop;
    }
}

class ChainWhip : AREAGProtoWeapon
{
	bool swingLeft;
    Default
    {
        Weapon.SlotNumber 1;
        Obituary "%o kneeled before %k's Steel Tyrant.";
    }

	override void postBeginPlay() {
		super.postBeginPlay();
		swingLeft = false;
	}

	action State A_SwingWhip() {
		invoker.swingLeft = !invoker.swingLeft;
		if(invoker.swingLeft) {
			return ResolveState("SwingLeft");
		} else {
			return ResolveState("SwingRight");
		}
		return ResolveState(Null);
	}

	States
	{
	MainRaise:
		WHP2 DCBA 1;
		goto MainReady;
	MainReady:
		WHP2 A 1 A_MainWeaponReady();
		wait;
	MainWindup:
		WHP2 A 0 A_StartMainFiringSequence();
		WHP2 AABCD 1;
		goto MainHold;
	MainHold:
		TNT1 A 1;
		TNT1 A 0 A_MainHoldCheck("MainHold");
		goto MainFire;
	MainFire:
		CWPL A 0 A_StartSound("weapon/tyrantswing", CHAN_WEAPON);
		TNT1 A 0 A_SwingWhip();
	SwingLeft:
		CWPL ABC 1 A_YawRecoil(0.3);
		CWPL A 0 A_FireHandedProjectile("ChainWhipProjectileL", "ChainWhipProjectileR", 0, 0, 0);
		CWPL DEZ 1 A_YawRecoil(0.3);
		goto FireEnd;
	SwingRight:
		CWPL FGH 1 A_YawRecoil(-0.3);
		CWPL A 0 A_FireHandedProjectile("ChainWhipProjectileR", "ChainWhipProjectileL", 0, 0, 0);
		CWPL IJK 1 A_YawRecoil(-0.3);
		goto FireEnd;
	FireEnd:
		TNT1 A 6;
		TNT1 A 0 A_FinishMainFiringSequence();
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_MainRefire("MainHoldRefire", "MainWait");
		goto MainRaise;
	MainOffWindup:
		WHP2 AABCD 1;
		goto MainWait;
	MainWait:
		TNT1 A 1;
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_CheckSubStatus("MainHoldRefire", "MainWait");
		goto MainRaise;
	MainHoldRefire:
        TNT1 A 0 A_StartMainFiringSequence();
        goto MainHold;
	MainLower:
		WHP2 AABCD 1;
		TNT1 A 1 A_MainDeselect;
		wait;

	// bool swingLeft;
    // Default
    // {
    //     Weapon.SlotNumber 1;
    //     Obituary "%o kneeled before %k's Steel Tyrant.";
    //     Inventory.Pickupmessage "";
    // }

	// override void postBeginPlay() {
	// 	super.postBeginPlay();
	// 	swingLeft = false;
	// }

	// action State A_SwingWhip() {
	// 	invoker.swingLeft = !invoker.swingLeft;
	// 	if(invoker.swingLeft) {
	// 		return ResolveState("SwingLeft");
	// 	} else {
	// 		return ResolveState("SwingRight");
	// 	}
	// 	return ResolveState(Null);
	// }

    // action void A_RemoveL1Weapon() {
    //     if(CountInv("AdventureWhip") > 0) {
    //         A_TakeInventory("AdventureWhip", 1);
    //     }
    // }

	// States
	// {
    // Select:
    //     TNT1 A 0 A_RemoveL1Weapon();
    //     goto Super::Select;
    // Deselect:
    //     WHP2 A 0 A_AREAGLowerSub();
	// 	WHP2 AABCD 1;
    //     goto Super::DeselectReal;
	// Ready:
	// 	TNT1 A 0 A_ReadySubWeapons();
	// ReadyRaise:
	// 	TNT1 A 0 A_AREAGRaiseSub();
	// 	WHP2 DCBA 1;
	// 	goto ReadyLoop;
	// ReadyLoop:
	// 	WHP2 A 1 A_AREAGWeaponReady();
	// 	loop;
	// Fire:
	// 	WHP2 A 0 A_AREAGLowerSub();
	// MainLower:
	// 	WHP2 AABCD 1;
    //     goto Hold;
	// MainRelease:
	// 	CWPL A 0 A_StartSound("weapon/tyrantswing", CHAN_WEAPON);
	// 	TNT1 A 0 A_SwingWhip();
	// SwingLeft:
	// 	CWPL ABC 1 A_YawRecoil(0.2);
	// 	CWPL A 0 A_FireProjectile("ChainWhipProjectileL", 0, 0, 0);
	// 	CWPL DEZ 1 A_YawRecoil(0.2);
	// 	TNT1 A 6;
	// 	goto FireEnd;
	// SwingRight:
	// 	CWPL FGH 1 A_YawRecoil(-0.2);
	// 	CWPL A 0 A_FireProjectile("ChainWhipProjectileR", 0, 0, 0);
	// 	CWPL IJK 1 A_YawRecoil(-0.2);
	// 	TNT1 A 6;
	// 	goto FireEnd;
	// AltLower:
	// 	WHP2 AABCD 1;
	// 	goto AltHold;
	}
}

class ChainWhipProjectileL : BasicProjectile
{
    Default
    {
        Speed 40;
        DamageFunction (30);
        Damagetype "SteelWhip";
        +NOTIMEFREEZE;
        +HITTRACER;
        +BLOODSPLATTER;
        decal "WhipGash1L";
        radius 4;
        radius 2;
    }
	States
	{
	SpawnLoop:
		TNT1 A 1;
		TNT1 A 1;
		TNT1 A 0 A_StartSound("weapon/tyrantcrack", CHAN_BODY);
		TNT1 A 0 A_AlertMonsters(512);
		stop;
	XDeath:
		TNT1 A 0 A_StartSound("weapon/tyrantsmack", CHAN_BODY);
		TNT1 A 0 A_SpawnItemEx("ChainWhipQuake");
		stop;
	Crash:
	Death:
		TNT1 A 0 A_StartSound("weapon/tyrantwall", CHAN_BODY);
		TNT1 AAA 0 A_SpawnItemEx("ChainWhipPuff", 0, 0, 0, frandom(0.4, 1.0), 0, frandom(-1.0, 1.0), frandom(0.0, 360.0));
        TNT1 AAAAAAAAA 0 A_SpawnItemEx("ChainWhipChunks", -10, 0, 0, -frandom(8.0, 15.0), 0, frandom(-1.0, 1.0), frandom(-45, 45));
		TNT1 A 0 A_SpawnItemEx("ChainWhipQuake");
		stop;
	}
}

class ChainWhipProjectileR : ChainWhipProjectileL
{
    Default
    {
        decal "WhipGash1R";
    }
}

class ChainWhipChunks : Actor
{
    Default
    {
        PROJECTILE;
        -ACTIVATEIMPACT;
        -NOGRAVITY;
        Scale 1.0;
        bouncetype "Doom";
        bouncecount 4;
    }

    override void PostBeginPlay() {
        super.postBeginPlay();
        float sc = frandom(0.5, 1.0);
        scale.X = sc;
        scale.Y = sc;
    }

    States
    {
    Spawn:
        CHWP B 1;
        loop;
    }
}

class ChainWhipQuake : Actor
{
    Default
    {
        +NOINTERACTION;
	    +NOCLIP;
    }
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 4, 0, 32, 0);
		TNT1 A 1;
		stop;
	}
}

class ChainWhipPuff : BasicEffect
{
    Default
    {
        -NOINTERACTION;
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        -ACTIVATEIMPACT;
        +MOVEWITHSECTOR;
        bouncetype "hexen";
        alpha 0.4;
        scale 1.5;
    }
	States
	{
	Spawn:
		WHPF A 0;
		WHPF A 0 A_SetRoll(frandom(0.0, 360.0));
		WHPF ABCD 2;
		stop;
	}
}
