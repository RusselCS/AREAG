class BasicInventory : CustomInventory
{
	mixin AREAG_Common;
    mixin BasicActor_Virtuals;
    
    bool inWorld;
    int itemId;
    double baseFloorDist;

    int iPickupId;
    int ptType;
    String sCheckItem;
 
    property PickupID: iPickupId;
    property PickupType: ptType;
    property CheckItem: sCheckitem;

    override bool TryPickup(in out Actor toucher)
    {
        bool ret = super.TryPickup(toucher);
        if(sCheckItem) {
            ret = ret && toucher.CountInv(sCheckitem) == 0;
        }
        if(ret) {
            BasicPickup(toucher);
            if(sCheckItem) {
                toucher.A_GiveInventory(sCheckItem, 1);
            }
        }
        return ret;
    }

    virtual void BasicPickup(Actor toucher) {}

    action void A_PickupSequence() {
        if(invoker.inWorld) {
            ACS_NamedExecuteAlways("pickups_displayMessage", 0, invoker.ptType, invoker.iPickupId);
            if(invoker.itemId > 0) {
                MapDataRepo.queuePickupEvent(level.levelnum, invoker.itemId);
            }
        }
    }
 
    action void A_ShopSpawn() {
        bNOGRAVITY = false;
        bFLOATBOB = false;
        bFLOAT = false;
    }

    virtual void BasicInit() {
        inWorld = false;
        itemId = score;
        baseFloorDist = floorDist();
    }

    virtual void BasicTick() {

        if(bFLOATBOB && bSPECIAL) {
            if(GetAge() == 1) {
                A_TransferPointer(AAPTR_PLAYER1, AAPTR_DEFAULT, AAPTR_DEFAULT, AAPTR_TRACER);
            }
            A_FaceTracer();
            A_SpawnItemEx("BasicItemTrail", -1, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);

            if(GetAge() % 10 == 0) {
                A_SpawnItemEx("BasicItemParticle", frandom(-32, 32), 0, -16, 0, 0, 1, frandom(0, 360), SXF_ABSOLUTEANGLE);
            }

            if(floorDist() != baseFloorDist) {
                Warp(self, 0, 0, -floorDist() + baseFloorDist);
            }
        }
    }

    virtual void BasicDestroy() {}
 
    Default
    {
        inventory.pickupmessage "";
        +FLOATBOB;
        +NOGRAVITY;
        +FLOAT;
        +MOVEWITHSECTOR;
        Height 64;
    }
 
    States
    {
    Spawn:
        TNT1 A 0;
        TNT1 A 1;
        TNT1 A 0 { invoker.inWorld = true; }
        TNT1 A 0 A_JumpIf(true, "SpawnFrames");
        goto SpawnFrames;
    Pickup:
        TNT1 A 0 A_PickupSequence();
        TNT1 A 0 A_JumpIf(true, "PickupEffect");
        goto PickupEffect;
    PickupFail:
        TNT1 A 0;
        fail;
    ShopSpawn:
        "----" "#" 0 A_ShopSpawn();
        "----" "#" 1;
        wait;
    
    // when making items, fill these states in only.
    SpawnFrames:
        TNT1 A 0;
        stop;
    PickupEffect:
        TNT1 A 0;
        stop;
    }
}

class BasicItemTrail : BasicEffect
{
    Default
    {
        renderstyle "add";
        +MOVEWITHSECTOR;
        +BASICACTOR.DIEWITHTARGET;
    }

    States
    {
    Spawn:
        "----" "#" 0;
        "----" "#" 1 A_SetScale(scale.x*1.07);
        "----" "#" 0 A_FadeOut();
        loop;
    Death:
        TNT1 A 0;
        stop;
    }
}

class BasicItemParticle : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        scale 0.1875;
        renderstyle "add";
        reactiontime 70;
        +MOVEWITHSECTOR;
        +BASICACTOR.DIEWITHTARGET;
    }

    States
    {
    Spawn:
        SPRK A 0;
        SPRK A 0 A_SetRoll(roll+2);
        SPRK A 1 A_SpawnItemEx("BasicItemParticleTrail", 0, 0, 0, 0, 0, -2, 0, SXF_TRANSFERROLL|SXF_TRANSFERSCALE);
        SPRK A 0 A_CountDown();
        loop;
    Death:
        TNT1 A 0;
        stop;
    }
}

class BasicItemParticleTrail : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        +ROLLSPRITE;
        renderstyle "add";
        +MOVEWITHSECTOR;
        +BASICACTOR.DIEWITHTARGET;
    }

    States
    {
    Spawn:
        SPRK A 1 A_FadeOut();
        loop;
    Death:
        TNT1 A 0;
        stop;
    }
}

class EmptyItem : BasicInventory
{
    Default
    {
        BasicInventory.PickupType -1;
        BasicInventory.PickupID -1;
	    Scale 1.5;
    }

    States
    {
    SpawnFrames:
        NULL A 1;
        wait;
    PickupEffect:
        NULL A 0 A_GiveInventory("EmptyCounter", 1);
        stop;
    }
}

class EmptyCounter : Counter {}

class MapPickup : BasicActor
{
    Default
    {
        //$Category AREAG-Map Tools
        //$Title Map Pickup
        //$Sprite E0WCB0
        //$NotAngled
        +NOGRAVITY;
    }

    int sTid;

    override void PostBeginPlay() {
        super.PostBeginPlay();

        //args[0] = score;
        int pickupId = score;
        String pickup = MapDataRepo.getPickupFromHere(level.levelnum, pickupId);

        if(GetCvarBool("db_showpickupids")) {
            bool spawned;
            Actor child;
            [spawned, child] = A_SpawnItemEx("ZSCNumber", 0, 0, 16);
            if(spawned) {
                child.score = pickupId;
            }
        }

        if(MapDataRepo.getTempPickupByLevel(level.levelnum, pickupId-1) == 0) {
            bool spawned;
            Actor child;
            sTid = tid;
            Thing_ChangeTID(0, 0);
            [spawned, child] = A_SpawnItemEx(pickup, 0, 0, 16, 0, 0, 0, 0, SXF_TRANSFERSPECIAL, 0, sTid);
            if(spawned) {
                if(bSTANDSTILL) {
                    child.bFLOATBOB = false;
                }
                child.score = score;
            } else {
                A_Log(String.format("Failed to spawn Pickup %s", pickup));
            }
        } else {
            A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
        }
    }

    States
    {
    Spawn:
        TNT1 A 0;
        stop;
    }
}

class Battery : Counter { Default { inventory.maxamount 100; } }
