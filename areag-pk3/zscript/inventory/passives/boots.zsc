enum BootDashes {
    DASH_WATER = 15,
    DASH_SPEED = 20
};

class GearGreavesPickup : BasicInventory
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_ARTIFICE;
        BasicInventory.PickupID PICKMSG_GEAR;
        BasicInventory.CheckItem "GearGreavesSpeed";
	    Scale 2.5;
    }
	States
	{
	SpawnFrames:
		BOOT G 1;
		loop;
    PickupEffect:
		TNT1 A 0 A_GiveInventory("BaseMoveSpeed", 25);
		stop;
	}
}

class GearGreavesSpeed : Once {}

class PressFrames : Powerup
{
    Default
    {
        powerup.duration 20;
    }
}

class PressedLeft : PressFrames {}
class PressedRight : PressFrames {}
class PressedForward : PressFrames {}
class PressedBack : PressFrames {}

class DashHUD : Powerup
{
    Default
    {
        powerup.duration 25;
    }
}

class DashCooldown : Powerup
{
    Default
    {
        powerup.duration 50;
    }
}

class AirDashCooldown : DashCooldown {}

class DashForward : Custominventory
{
    Default
    {
	    +INVENTORY.AUTOACTIVATE;
    }
	States
	{
	Use:
		TNT1 A 0 A_JumpIfInventory("OnGround", 1, "Ground");
		goto Air;
	Ground:
		TNT1 A 0 A_GiveInventory("DashCooldown", 1);
		goto DashStart;
	Air:
		TNT1 A 0 A_GiveInventory("AirDashCooldown", 1);
		goto DashStart;
	DashStart:
		TNT1 A 0 A_StartSound("player/stepdash", CHAN_7);
		TNT1 A 0 A_GiveInventory("DashHUD", 1);
		TNT1 A 0 A_JumpIfInventory("LegsUnderwater", 1, "WaterDash");
		TNT1 A 0 A_ChangeVelocity(vel.x, vel.y, (vel.z>0)*vel.z, CVF_REPLACE);
		TNT1 A 0 A_JumpIf(true, "Dash");
		goto Dash;
	Dash:
		TNT1 A 0 A_ChangeVelocity(DASH_SPEED, 0, 0, CVF_RELATIVE);
		stop;
	WaterDash:
		TNT1 A 0 A_ChangeVelocity(DASH_WATER, 0 ,0, CVF_RELATIVE);
		stop;
	}
}

class DashBackward : DashForward
{
	States
	{
	Dash:
		TNT1 A 0 A_ChangeVelocity(-DASH_SPEED, 0 ,0, CVF_RELATIVE);
		stop;
	WaterDash:
		TNT1 A 0 A_ChangeVelocity(-DASH_WATER, 0 ,0, CVF_RELATIVE);
		stop;
	}
}

class DashRight : DashForward
{
	States
	{
	Dash:
		TNT1 A 0 A_ChangeVelocity(0, -DASH_SPEED, 0, CVF_RELATIVE);
		stop;
	WaterDash:
		TNT1 A 0 A_ChangeVelocity(0, -DASH_WATER, 0, CVF_RELATIVE);
		stop;
	}
}

class DashLeft : DashForward
{
	States
	{
	Dash:
		TNT1 A 0 A_ChangeVelocity(0, DASH_SPEED, 0, CVF_RELATIVE);
		stop;
	WaterDash:
		TNT1 A 0 A_ChangeVelocity(0, DASH_WATER, 0, CVF_RELATIVE);
		stop;
	}
}

class SteamGreavesPickup : GearGreavesPickup
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_ARTIFICE;
        BasicInventory.PickupID PICKMSG_STEAM;
        BasicInventory.CheckItem "SteamGreavesFlag";
	    Scale 2.5;
    }

	action void A_GiveSteamBoots() {
		let plr = AREAGPlayerPawn(self);
		plr.soundclass = plr.getClydeSoundClass();
		plr.setBaseJumpSpeed(plr.dBaseJump + 2.5);
	}

	States
	{
	SpawnFrames:
		BOOT H 1;
		loop;
	PickupEffect:
		TNT1 A 0 A_GiveSteamBoots();
		stop;
	}
}

class SteamGreavesFlag : Once {}

class NovaPackPickup : BasicInventory
{
	Default
	{
		BasicInventory.PickupType PICKTYPE_ARTIFICE;
		BasicInventory.PickupID PICKMSG_NOVAPACK;
		BasicInventory.CheckItem "NovaPackFlag";
	}
	States
	{
	SpawnFrames:
		BOOT I 1;
		loop;
	}
}

class NovaPackFlag : Once {}

class NovaSpend : CustomInventory
{
	States
	{
	Pickup:
		TNT1 A 0 A_JumpIfInventory("NovaSpendCooldown", 1, "End");
		TNT1 A 0 A_TakeInventory("Battery", 4);
		TNT1 A 0 A_GiveInventory("NovaSpendCooldown", 1);
		TNT1 A 0 A_PlaySoundEx("player/jetpack", "body");
		stop;
	End:
		TNT1 A 0;
		stop;
	}
}

class NovaSpendCooldown : Powerup
{
	Default
	{
		powerup.duration 5;
	}
}
