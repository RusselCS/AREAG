struct AREAG_Func {
    static bool checkButtonReleased(int button, int buttons, int oldButtons)
    {
        if(!(buttons & button) && (oldButtons & button))
        {
            return true;
        }
        return false;
    }
}

class ZSCSwitchCrystal : Actor
{
    bool bSwitchOn;

    Default
    {
        +SOLID;
        +SHOOTABLE;
        +NOBLOOD;
        health 1;
        mass 9999;
        height 56;
        radius 16;
        scale 1.5;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();
        bSwitchOn = false;
    }
	
    override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle) {
        
        bool success = false;

        if(!bSwitchOn) {
            if(!bSTANDSTILL) {
                SetState(ResolveState("SwitchOn"));
            } else {
                SetState(ResolveState("SwitchOnOff"));
            }
            success = true;
            bSwitchOn = true;
        }

        if(success) {
            A_PlaySound("misc/switchon", CHAN_BODY, 1.0, false, ATTN_NONE);
            A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
        }
        
        return 0;
    }

    void switchOff() {
        A_PlaySound("misc/switchoff", CHAN_BODY, 1.0, false, ATTN_NONE);
        bSwitchOn = false;
    }

    States
    {
    Spawn:
        SCRY A 0;
        SCRY A 1;
        wait;
    SwitchOn:
		SCRY B 1;
        wait;
    SwitchOnOff:
        SCRY B 35;
        SCRY B 0 switchOff();
		goto Spawn;
    }
}

class ZSCNumber : Actor
{
    int iNumberToDraw;

    Default
    {
        -SOLID;
        +NOGRAVITY;
        +THRUACTORS;
    }

    override void PostBeginPlay()
    {
        super.PostBeginPlay();

        iNumberToDraw = random(0, random(1, 100)*10);
        int digits = countDigits(iNumberToDraw);
        int start = digits/2;

        for(int i = 0; i < digits; i++)
        {
            Actor act;
            bool res;
            [res, act] = A_SpawnItemEx("ZSCDigit", 0, ((i-start)*10));
            let actb = ZSCDigit(act);
            actb.iDigit = getDigit(iNumberToDraw, i);
            actb.iIndex = i-start;
            act.Tracer = self;
        }
    }

    override void Tick()
    {
        super.Tick();
        A_Face(Players[ConsolePlayer].MO);
    }

    private int countDigits(int input)
    {
        int res = 0;

        while(input > 0) {
            res++;
            input /= 10;
        }

        return res;
    }

    private int getDigit(int number, int index)
    {
        for(int i = 0; i < index; i++)
        {
            number /= 10;
        }

        int excess = (number / 10) * 10;

        return number - excess;
    }

    States
    {
    Spawn:
        TNT1 A 1;
        loop;
    }
}

class ZSCDigit : Actor
{
    int iDigit;
    int iIndex;
    int iTime;

    Default
    {
        +NOGRAVITY;
        +FORCEXYBILLBOARD;
    }

    override void Tick() {
        super.Tick();
        
        self.sprite = GetSpriteIndex(name("NUM1"));
        self.frame = max(0, iDigit);

        A_Warp(AAPTR_TRACER, 0, iIndex * 10, 0, 0, WARPF_INTERPOLATE);
    }

    States
    {
    Spawn:
        NUM1 A 1;
        loop;
    }
}

class AREAGPushBlock : Actor
{
    Default
    {
        +SOLID;
        +PUSHABLE;
        Height 48;
        Radius 24;
        Scale 1.5;
    }

    States
    {
    Spawn:
        PCBA A 1;
        loop;
    }
}

class ZSCFloorSwitch : Actor
{
    Default
    {
        -SOLID;
        radius 32;
        height 10;
        renderstyle "none";
    }

    bool bActive;
    override void Tick() {

        super.Tick();
        float fCheckRadius = 48.0;
        bool bSwitchState = false;
        
        if(CheckProximity("AREAGPlayer", fCheckRadius, 1, CPXF_SETTARGET)) {
            bSwitchState = bSwitchState || target.pos.z - target.floorz == 0;
        }

        if(CheckProximity("AREAGPushBlock", fCheckRadius, 1, CPXF_SETTARGET)) {
            bSwitchState = bSwitchState || target.pos.z - target.floorz == 0;
        }

        if(bSwitchState != bActive) {
            bActive = bSwitchState;
            ACS_ExecuteAlways(args[0], 0, bActive);

            if(bActive) {
                A_PlaySound("misc/switchon", CHAN_BODY, 1.0, false, ATTN_NONE);
                SetState(ResolveState("SwitchOn"));
            } else {
                A_PlaySound("misc/switchoff", CHAN_BODY, 1.0, false, ATTN_NONE);
                SetState(ResolveState("SwitchOff"));
            }
        }
    }

    override void PostBeginPlay() {
        super.PostBeginPlay();
        bActive = false;
        SetState(ResolveState("SwitchOff"));
    }

    States
    {
    SwitchOn:
		SCRY B 1;
        wait;
    SwitchOff:
        SCRY A 1;
        wait;
    }
}
