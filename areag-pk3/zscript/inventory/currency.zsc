class AGCoin : Counter {}

class CoinPickup : CustomInventory
{
    Default
    {
        +MISSILE;
        +THRUSPECIES;
        -NOGRAVITY;
        +CANBOUNCEWATER;
        species "Monster";
        damagefunction (0);
        bouncetype "hexen";
        bouncefactor 0.6;
        height 6;
        radius 3;
        bouncesound "misc/coinbounce";
        inventory.pickupsound "misc/coinpickup";
        inventory.pickupmessage "";
        reactiontime 525;
    }

    int maxReactiontime;

    override void PostBeginPlay() {
        maxReactiontime = reactionTime;
    }

    override void Tick() {
        super.tick();
        bool flip = false;
        if(reactiontime < maxReactiontime/3) {
            if(GetAge() % 2 == 0) {
                A_SetRenderStyle(0.8, STYLE_Translucent);
            } else {
                A_SetRenderStyle(1.0, STYLE_Shadow);
            }
        }

        if(pos.z-floorz < 2.0 && abs(vel.z) < 2.0 && vel.z != 0) {
            A_Stop();
        }
    }

    States
    {
    Spawn:
        SGL1 A 0;
        goto SpawnDelay;
    SpawnDelay:
        "####" A 0 A_SetTics(random(0, 8));
    SpawnLoop:
        "####" AAABCDEAAFGHIJ 2 A_Countdown;
        loop;
    Death:
        TNT1 A 0;
        stop;
    }
}

class CoinPickup1 : CoinPickup
{
    States
    {
    Spawn:
        SGL2 A 0;
        goto SpawnDelay;
    Pickup:
        TNT1 A 0 A_GiveInventory("AGCoin", 1);
        stop;
    }
}

class CoinPickup2 : CoinPickup
{
    States
    {
    Spawn:
        SGL2 A 0;
        goto SpawnDelay;
    Pickup:
        TNT1 A 0 A_GiveInventory("AGCoin", 2);
        stop;
    }
}

class CoinPickup5 : CoinPickup
{
    States
    {
    Spawn:
        SGL3 A 0;
        goto SpawnDelay;
    Pickup:
        TNT1 A 0 A_GiveInventory("AGCoin", 5);
        stop;
    }
}

class CoinPickup10 : CoinPickup
{
    States
    {
    Spawn:
        SGL4 A 0;
        goto SpawnDelay;
    Pickup:
        TNT1 A 0 A_GiveInventory("AGCoin", 10);
        stop;
    }
}

class CoinDropper : BasicEffect
{
    static const int[] coinInts = {
        10, 5, 2, 1
    };

    Array<int> spawnInts;

    void queueCoins(int amt) {
        int cdAmt = amt;
        for(int i = 0; i < coinInts.size(); i++) {
            int coin = coinInts[i];
            int split;
            if(cdAmt == amt) {
                split = 1;
            } else {
                split = random(0, 1);
            }
            while(cdAmt / coin > split || (cdAmt == 1 && coin == 1)) {
                spawnInts.push(coin);
                cdAmt -= coin;
            }
        }
    }

    int idx;

    override void BasicInit() {
        if(score == 0) {
            score = 10;
        }

        idx = 0;

        queueCoins(score);
    }

    override void BasicTick() {
        if(idx >= spawnInts.size()) {
            forceDeath();
        } else {
            if(GetAge() % 2) {
                int coin = spawnInts[idx++];
                A_SpawnItemEx(String.format("CoinPickup%d", coin), 0, 0, 0, frandrange(0.4), frandrange(0.4), frandom(2, 8));
                if(random(0, 1)) {
                    BasicTick();
                }
            }
        }
    }
}
