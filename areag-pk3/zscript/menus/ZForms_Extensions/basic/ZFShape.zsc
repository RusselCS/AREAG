class ZFShape : ZFElement
{
    // would be in the parent class but what can ya do
    private void config(vector2 size, ShapeInfo shape = null, string texture = "", AlignType alignment = AlignType_TopLeft, Vector2 shapeScale = (1, 1), double rotation = 0.0)
    {
        if(shape == null) {
            shape = ShapeInfo.create(size);
        }

        self.shape = shape;
        self.texture = texture;
        self.alignment = alignment;
        self.shapeScale = shapeScale;
        self.rotation = rotation;
		self.alpha = 1;
    }

    static ZFShape create(Vector2 pos, Vector2 size, ShapeInfo shape = null, string texture = "", AlignType alignment = AlignType_TopLeft, Vector2 shapeScale = (1, 1), double rotation = 0.0) {
		let ret = new('ZFShape');

        ret.config(size, shape, texture, alignment, shapeScale, rotation);
		ret.setBox(pos, size);

		return ret;
	}

    private ShapeInfo shape;
    ShapeInfo getShape() { return self.shape; }
    void setShape(ShapeInfo shape) { self.shape = shape; }
    void setVertex(int idx, Vector2 dest) { shape.setVertex(idx, dest); }
    void setCoord(int idx, Vector2 dest) { shape.setCoord(idx, dest); }
    int vertexSize() { return shape.vertexSize(); }
    Vector2 getVertex(int idx) { return shape.getVertex(idx); }
    Vector2 getCoord(int idx) { return shape.getCoord(idx); }

    private string texture;
    string getTexture() { return self.texture; }
    void setTexture(string texture) { self.texture = texture; }

    private AlignType alignment;
    AlignType getAlignment() { return self.alignment; }
    void setAlignment(AlignType alignment) { self.alignment = alignment; }

    private Vector2 shapeScale;
    Vector2 getShapeScale() { return self.shapeScale; }
    void setShapeScale(Vector2 shapeScale) { self.shapeScale = shapeScale; }

    private double rotation;
    double getRotation() { return self.rotation; }
    void setRotation(double rotation) { self.rotation = rotation; }

    override void drawer() {
		ZFAABB beforeClip, clipRect;
		screenClip(beforeClip, clipRect);
		Screen.setClipRect(int(clipRect.pos.x), int(clipRect.pos.y), int(clipRect.size.x), int(clipRect.size.y));

		TextureID tex = TexMan.checkForTexture(texture, TexMan.Type_Any);

		if (!tex) {
			return;
		}
		
        Vector2 pos = getAlignedDrawPos(box.size, box.size, alignment);
        drawShape(box.pos, shape, texture, true, shapeScale, rotation, alpha);

		Screen.setClipRect(int(beforeClip.pos.x), int(beforeClip.pos.y), int(beforeClip.size.x), int(beforeClip.size.y));
	}

}
