class SubWeaponPickup : BasicInventory
{
    class<Ammo> cAmmoType;
    int iAmmoGive;
    String sWeaponName;
 
    property AmmoType: cAmmoType;
    property AmmoGive: iAmmoGive;
    property WeaponName: sWeaponName;

    action void A_AREAGGiveSubWeapon() {
        if(invoker.inWorld) {
            SubWeapon wep = invoker.subStateBuilder();
            AREAGPlayerPawn plr = AREAGPlayerPawn(self);
            plr.pushSubWeapon(wep);
        } else {
            A_Log("PICKUP FAILED!!");
        }
    }

    virtual SubWeapon subStateBuilder() {
        StateLabel rS = "Raise";

        return buildSubWeapon(rS);
    }

    SubWeapon buildSubWeapon(StateLabel rS)
    {
        return new("SubWeapon").Init(cAmmoType, sWeaponName, rS);
    }

    States
    {
    PickupEffect:
        TNT1 A 0 A_AREAGGiveSubWeapon();
        stop;
    }
}

enum ESubWeapons {
	SWEP_NONE = -1,
	SWEP_KNIFE,
	SWEP_DYNAMITE,
    SWEP_END
}

class SubWeapon
{
    class<Ammo> ammoType;
    String weaponName;
    StateLabel raiseState;

    SubWeapon Init(class<Ammo> aT, String sN, StateLabel rS) {
        ammoType = aT;
        weaponName = sN;
        raiseState = rS;
        return self;
    }

    String getWeaponName() {
        return weaponName;
    }

    class<Ammo> getAmmoType() {
        return ammoType;
    }

    StateLabel getRaiseState() {
        return raiseState;
    }
}

struct SubWeapons {
	static const String[] subFields = {
		"Knife",
		"Dynamite"
	};

    static const StateLabel[] subRaise = {
		"KnifeRaise",
		"DynamiteRaise"
	};

    static const StateLabel[] subRelease = {
		"KnifeThrow",
		"DynamiteThrow"
	};

    static String maxField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Max");
    }

    static String ammoField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Ammo");
    }

    static String equippedField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Equipped");
    }

    static StateLabel raiseState(int i) {
        return SubWeapons.subRaise[i];
    }

    static StateLabel releaseState(int i) {
        return SubWeapons.subRelease[i];
    }

    static int subWepCount() {
        return SubWeapons.subFields.Size();
    }

    static int nextSubCycle(int wep) {
        return ++wep < SWEP_END ? wep : SWEP_NONE+1;
    }

    static int prevSubCycle(int wep) {
        return --wep > SWEP_NONE ? wep : SWEP_END-1;
    }
   
}
