class SoulAmmo : Ammo {
    Default {
        inventory.icon "ICOSW4";
        inventory.amount 1;
        inventory.maxamount 10;
    }
}

class SoulLampPickup : SubWeaponPickup
{
	Default
	{
        BasicInventory.PickupID PICKMSG_SOULLAMP;
        BasicInventory.PickupType PICKTYPE_SUBWEAPON;
        SubWeaponPickup.AmmoType "SoulAmmo";
        SubWeaponPickup.AmmoGive 10;
        SubWeaponPickup.WeaponName "SoulLamp";

        Scale 1.0;
	}

    override SubWeapon subStateBuilder() {
        StateLabel rS = "LampRaise";

        return buildSubWeapon(rS);
    }

    
	States
	{
	SpawnFrames:
		SLMP A 1;
		loop;
	}
}

extend class AREAGProtoWeapon {

	States
    {
        LampRaise:
            SLHD ABCD 1;
            goto LampReady;
        LampReady:
            SLHD DEFGH 2 A_SubWeaponReady("LampWindup", "LampOffWindup", "LampLower");
            loop;
        LampWindup:
            SLHD A 0 A_StartSubFiringSequence();
            SLHD DCBA 1;
            goto LampHold;
        LampHold:
            TNT1 A 1;
            TNT1 A 0 A_SubHoldCheck("LampHold");
            goto LampFire;
        LampFire:
            SLHD A 0 A_StartSound("weapon/lampswing", CHAN_WEAPON);
            SLHD IJ 1;
            SLHD I 0 A_TakeInventory("SoulAmmo", 1);
            SLHD I 0 A_SpawnItemEx("SoulLampEffect", cos(pitch)*48, 0, 60+sin(-pitch)*48);
            SLHD KLM 1;
            TNT1 A 6;
            TNT1 A 0 A_FinishSubFiringSequence();
            TNT1 AAAAAAAAAAAAAAAAAAAAA 1 A_SubRefire("LampHoldRefire", "LampWait");
            goto LampRaise;
        LampOffWindup:
            SLHD DCBA 1;
            goto LampWait;
        LampWait:
            TNT1 A 1;
            TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_CheckMainStatus("LampHoldRefire", "LampWait");
            goto LampRaise;
        LampHoldRefire:
            HBM2 A 0 A_StartSubFiringSequence();
            SLHD AB 1;
            goto LampWindup + 2;
        LampLower:
            SLHD DCBA 1;
            goto AltRaise;
	}
}

class SoulLampEffect : BasicEffect
{
    States
    {
    Spawn:
        TNT1 A 0;
        TNT1 A 0 A_SpawnItemEx("SoulLampWave");
        TNT1 A 0 A_SpawnItemEx("SoulLampShine");
        stop;
    }
}

class SoulLampWave : BasicEffect
{
    Default
    {
        +BRIGHT;
        +ROLLSPRITE;
        +BASICEFFECT.KEEPRELATIVEPOS;
        +FORCEXYBILLBOARD;
        renderstyle "add";
        scale 0.525;
        BasicEffect.RollSpeed 0.5;
        BasicEffect.RelativePosFlags WARPF_ABSOLUTEOFFSET|WARPF_INTERPOLATE|WARPF_BOB;
    }

    States
    {
    Spawn:
        SBLP G 0;
        SBLP GGGGGGGGG 1 {
            A_FadeIn(0.1);
            A_ChangeScale(-0.05);
        }
        SBLP G 0 A_SpawnItemEx("SoulLampShot");
        stop;
    }
}

class SoulLampShine : BasicEffect
{
    Default
    {
        +BRIGHT;
        +BASICEFFECT.KEEPRELATIVEPOS;
        +FORCEXYBILLBOARD;
        renderstyle "add";
        scale 0.3;
        BasicEffect.RelativePosFlags WARPF_ABSOLUTEOFFSET|WARPF_INTERPOLATE|WARPF_BOB;
    }
    States
    {
    Spawn:
        SBLP ABCDEF 2;
        stop;
    }
}

class SoulLampShot : BasicProjectile
{
    Default
    {
        bouncetype "Hexen";
        +THRUACTORS;
        Renderstyle "Translucent";
        Alpha 0.8;
        Scale 2.0;
        radius 5;
        height 10;
        speed 10;
    }

    bool fadeDir;
    int floatTime;
    double explosionRadius;
    double baseAngle;
    double circleScale;

    override void BasicInit() {
        fadeDir = false;
        floatTime = 0;
        reactiontime = 50;
        explosionRadius = 128.0;
        let circleSize = 128.0;

        circleScale = explosionRadius / circleSize;
    }

    action void A_SoulFade(double alp, double min, double max) {
        let res = alpha;

        if(!invoker.fadeDir) {
            res -= alp;

            if(res <= min) {
                res = min;
                invoker.fadeDir = true;
            }
        } else {
            res += alp;

            if(res >= max) {
                res = max;
                invoker.fadeDir = false;
            }
        }

        A_SetRenderStyle(res, STYLE_Translucent);
    }

    action State A_SoulCountdown() {
        invoker.floatTime--;

        if(invoker.floatTime <= 0) {
            return ResolveState("Explode");
        }

        return ResolveState(null);
    }

    action State A_SoulExplode() {
        
        A_Countdown();

        let lp = 8.0;
        for(int i = 1.0; i <= lp; i+=1.0) {
            Actor act;
            bool ret;
            [ret, act] = A_SpawnItemEx("SoulLampGhost", invoker.explosionRadius, 0, -(z-floorz), 0, 0, 10, i/lp*360 + invoker.baseAngle, SXF_SETMASTER);
            act.master = self;
        }

        invoker.baseAngle += 10.0;
        A_FaceTarget();
        A_SpawnItemEx("SoulLampShotTrail", -16, 0, 0, fRandRange(2.0), fRandRange(2.0), fRandRange(2.0));

        return ResolveState(null);
    }

    States
    {
    Spawn:
        SBLP K 0 A_SoulCountdown();
        SBLP K 1 A_SoulFade(0.15, 0.5, 0.8);
        loop;
    Explode:
        SBLP K 0 A_Stop;
        SBLP K 0 {
            Actor act;
            bool ret;
            [ret, act] = A_SpawnItemEx("SoulLampCircle", 0, 0, -(z-floorz), 0, 0, 0, 0, SXF_SETMASTER);
            act.A_SetScale(invoker.circleScale);
            act.master = self;
        }
        SBLP K 1 {
            A_SoulFade(0.15, 0.5, 0.8);
            if(CountInv("Once") > 0) {
                return ResolveState("ExplodeLoop");
            }
            return ResolveState(null);
        }
        wait;
    ExplodeLoop:
        SBLP K 0 A_SoulExplode();
        SBLP KKKKK 1 A_SoulFade(0.15, 0.5, 0.8);
        loop;
    Death:
        SBLP K 0 A_SpawnItemEx("SoulLampFire", 0, 0, -37);
        stop;
    }
}

class SoulLampShotTrail : BasicEffect
{
    Default
    {
        renderstyle "add";
        alpha 0.4;
        scale 2.5;
        BasicEffect.rollspeed 0.5;
    }

    override void BasicInit() {
        A_SetRoll(frandom(0, 360));
    }

    States
    {
    Spawn:
        SBLP L 0;
        SBLP L 0 A_ChangeScale(0.05);
        SBLP L 1 A_FadeOut(0.04);
        loop;
    }
}

class SoulLampGhost : BasicEffect
{
    Default
    {
        +BASICACTOR.DIEWITHMASTER;
        Renderstyle "Translucent";
        Alpha 0.8;
        Scale 0.8;
        radius 5;
        height 10;
        reactiontime 70;
    }

    bool fadeDir;

    override void BasicInit() {
        fadeDir = false;
        A_SetAngle(angle + 90);
    }

    action void A_SoulFade(double alp, double min, double max) {
        let res = alpha;

        if(!invoker.fadeDir) {
            res -= alp;

            if(res <= min) {
                invoker.fadeDir = true;
            }
        } else {
            res += alp;

            if(res >= max) {
                invoker.fadeDir = false;
            }
        }


        A_Countdown();
        if(GetAge() % 8) {
            A_SpawnItemEx("SoulLampGhostTrail", -vel.x, -vel.y, -vel.z, 0, 0, 0, 0, SXF_ABSOLUTEPOSITION|SXF_TRANSFERALPHA);
        }
        A_SetRenderStyle(res, STYLE_Translucent);
    }

    States
    {
    Spawn:
        SBLP I 1 A_SoulFade(0.2, 0.2, 0.8);
        loop;
    Death:
        SBLP I 1 A_FadeOut(0.1);
        loop;
    }
}

class SoulLampGhostTrail : BasicEffect
{
    Default
    {
        Scale 0.344;
        renderstyle "translucent";
    }

    States
    {
    Spawn:
        SBLP J 0 A_FadeOut(0.1);
        SBLP J 1 A_ChangeVelocity(fRandRange(8.0), fRandRange(8.0), fRandRange(8.0), CVF_RELATIVE);
        loop;
    }
}

class SoulLampCircle : BasicEffect
{
    Default
    {
        alpha 0.1;
        renderstyle "add";
        +BASICACTOR.DIEWITHMASTER;
        +FLATSPRITE;
    }

    action State A_CircleFade(double amt) {
        A_FadeIn(amt);

        if(invoker.alpha >= 1.0) {
            return ResolveState("SpawnLoop");
        }
        return ResolveState(null);
    }

    States
    {
    Spawn:
        SBLP H 1 A_CircleFade(0.2);
        loop;
    SpawnLoop:
        SBLP H 0 A_GiveInventory("Once", 1, AAPTR_MASTER);
        SBLP H 0 A_SpawnItemEx("SoulLampCircleFade", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERSCALE|SXF_TRANSFERALPHA);
        SBLP H 1;
        wait;
    Death:
        SBLP H 0 A_ChangeScale(0.01);
        SBLP H 1 A_FadeOut(0.05);
        loop;
    }
}

class SoulLampCircleFade : SoulLampCircle
{
    Default
    {
        -BASICACTOR.DIEWITHMASTER;
        alpha 1.0;
    }

    States
    {
    Spawn:
        SBLP H 0 A_FadeOut(0.1);
        SBLP H 1 A_ChangeScale(0.05);
        loop;
    }
}

class SoulLampFire : BasicEffect
{
    Default
    {
        renderstyle "add";
        alpha 0.8;
        Scale 2.5;
    }

    States
    {
    Spawn:
        SBLP MNOPQ 2;
        stop;
    }
}

