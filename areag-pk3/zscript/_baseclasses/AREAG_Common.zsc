mixin class AREAG_Common
{
	// Convert an angle between 1 and 360
	static double normalizeAngle(double ng){
		ng = ng % 360;

		if(ng > 0.0) {
			return ng;
		} else {
			return ng + 360.0;
		}
	}

	// Check an angle is between two other ones.
	static bool angleBetween(double src, double min, double max) {
		src = normalizeAngle(src);
		min = normalizeAngle(min);
		max = normalizeAngle(max);

		if (min < max) {
			return min <= src && src <= max;
		} else {
			return min <= src || src <= max;
		}
	}

	// Returns -1 if x is even, 1 if odd
	static int SignModTwo(int x) {
		if(x % 2 == 0)  {
			return -1;
		} else {
			return 1;
		}
	}

	// Returns -1 if x < 0, 1 if x > 0, or 0 if x = 0
	static int SignFromInt(int x) {
		if(x < 0) {
			return -1;
		}
		if(x > 0) {
			return 1;
		}
		return 0;
	}

	// returns a decimal between -x and x
	static double fRandRange(float x) {
		return frandom(-x, x);
	}

	static double getCvarFloat(string cv)
	{
		return CVar.findCVar(cv).getFloat();
	}

	static bool getCvarBool(string cv)
	{
		let res = CVar.findCVar(cv);

		if(res) {
			return res.getBool();
		}
		return false;
	}

	static int getCvarInt(string cv)
	{
		let res = CVar.findCVar(cv);

		if(res) {
			return res.getInt();
		}
		return -1;
	}

	static bool checkPressed(int button, int buttons, int oldButtons)
    {
        if((buttons & button) && !(oldButtons & button))
        {
            return true;
        }
        return false;
    }

    static bool checkReleased(int button, int buttons, int oldButtons)
    {
        if(!(buttons & button) && (oldButtons & button))
        {
            return true;
        }
        return false;
    }

    static double Lerp(double a, double b, double t)
	{
		return (1 - t) * a + t * b;
	}

	static vector2 Vec2Lerp(vector2 a, vector2 b, double t)
	{
		return (1 - t) * a + t * b;
	}

    static bool collidingBoxes(Actor a, Actor b, double rad) {
        double diffX = abs(a.pos.x - b.pos.x) - rad;
        double diffY = abs(a.pos.y - b.pos.y) - rad;

        return diffX <= 0 && diffY <= 0;
    }

	static double roundToNearest(double x, double y) {
		double md = x % y;

		if(md < y / 2) {
			return x - md;
		} else {
			return x - md + y;
		}
	}

	static double ceilingToNearest(double x, double y) {
		double md = x % y;

		if(md != 0.0) {
			return x - md + y;
		}
		return x;
	}

	static bool valueBetween(double min, double x, double max) {
		if(min > max) {
			let tmp = max;
			max = min;
			min = tmp;
		}
		return x > min && x < max;
	}
}