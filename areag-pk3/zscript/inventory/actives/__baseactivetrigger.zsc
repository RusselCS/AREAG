class BasicActiveInventory : BasicInventory
{
    
	action void A_GiveActiveTrigger() {
		let plr = AREAGPlayerPawn(self);
		invoker.giveItemTrigger(plr);
	}

	virtual void giveItemTrigger(AREAGPlayerPawn plr) {
		// A_GiveInventory("BasicItemTrigger", 1);
		// plr.pushToggleTrigger(new("ToggleStateMap").Init(null, null));
	}

	States
	{
	PickupEffect:
		TNT1 A 0 A_GiveActiveTrigger();
		stop;
	}
}

class BasicActiveTrigger : BasicInventory
{
    Default
    {
        +INVENTORY.INVBAR;
    }

	action state A_ActiveItemCheck() {
		let plr = AREAGPlayerPawn(self);
		
		if(plr.getToggleState()) {
			return ResolveState(plr.getToggleState());
		}

		return ResolveState("TreasureUse");
	}

	action void A_SetInterruptState(StateLabel input) {
		AREAGPlayerPawn(self).setInterruptState(input);
	}

	action void A_ClearInterruptState() {
		AREAGPlayerPawn(self).clearInterruptState();
	}

	States
	{
	Use:
		TNT1 A 0 A_ActiveItemCheck();
		fail;
	TreasureUse:
		TNT1 A 0 A_SetInterruptState(null);
		fail;
	}
}

class ToggleStateMap
{
	String sInventory;
	StateLabel slTarget;

	ToggleStateMap Init(String sIn, StateLabel slT) {
		if(!sIn || !slT) {
			return null;
		}
        sInventory = sIn;
        slTarget = slT;
        return self;
    }

    String getInventory() {
        return sInventory;
    }

    StateLabel getToggleState() {
        return slTarget;
    }
}
