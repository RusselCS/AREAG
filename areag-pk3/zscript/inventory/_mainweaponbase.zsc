extend class AREAGProtoWeapon
{
    // Main weapon functions
    action State A_MainWeaponReady() {

        int iButtons = invoker.plr.iButtons;
        int iOldButtons = invoker.plr.iOldButtons;

        // for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
        //     if(countInv(TreasureItems.activeItem(i))) {
        //         return ResolveState("Fire");
        //     }
        // }

        if(checkPressed(BT_SUBNEXT, iButtons, iOldButtons)) {
            invoker.plr.selectNextSubweapon();
        } else if(checkPressed(BT_SUBPREV, iButtons, iOldButtons)) {
            invoker.plr.selectPrevSubweapon();
        }

        if(invoker.bSubInProgress) {
            return ResolveState("MainOffWindup");
        }

        if(iButtons & BT_ATTACK) {
            invoker.bMainInProgress = true;
            return ResolveState("MainWindup");
        }

        A_WeaponReady(WRF_NOFIRE); // Literally just here to allow you to swap weapons.
        return ResolveState(null);
    }

    action State A_MainHoldCheck(StateLabel st) {
        if(invoker.plr.iButtons & BT_ATTACK) {
            return ResolveState(st);
        }
        return ResolveState(null);
    }

    action State A_MainRefire(StateLabel rst, StateLabel wst) {
        if(invoker.plr.iButtons & BT_ATTACK) {
            return ResolveState(rst);
        }

        if(invoker.plr.iButtons & BT_ALTATTACK) {
            return ResolveState(wst);
        }
        
        return ResolveState(null);
    }

    action State A_CheckSubStatus(StateLabel rst, StateLabel wst) {
        if(invoker.bSubInProgress) {
            return ResolveState(wst);
        }

        if(invoker.plr.iButtons & BT_ATTACK) {
            return ResolveState(rst);
        }

        return ResolveState(null);
    }

    action State A_MainDeselect() {
        return ResolveState("LowerToDeselect");
    }

    action void A_StartMainFiringSequence() {
        invoker.bMainInProgress = true;
    }

    action void A_FinishMainFiringSequence() {
        invoker.bMainInProgress = false;
    }

    States
    {
        // These states should be overridden by the main weapon
        MainRaise:
            TNT1 A 1;
            goto MainReady;
        MainReady:
            TNT1 A 1 A_MainWeaponReady();
            wait;
        MainWindup:
            TNT1 A 1;
            goto MainHold;
        MainHold:
            TNT1 A 1;
            TNT1 A 0 A_MainHoldCheck("MainHold");
            goto MainFire;
        MainFire:
            TNT1 A 1; 
            TNT1 A 0 A_MainRefire("MainHold", "MainWait");
            goto MainRaise;
        MainOffWindup:
            TNT1 A 1;
            goto MainWait;
        MainWait:
            TNT1 A 1;
            TNT1 A 0 A_CheckSubStatus("MainHold", "MainWait");
            goto MainRaise;
        MainLower:
            TNT1 A 1 A_MainDeselect;
            wait;
    }
}