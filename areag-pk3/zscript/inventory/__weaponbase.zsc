// The root of it all. Contains the essential features that get wrapped into all other weapons.

class AREAGProtoWeapon : Weapon {

    bool bLowerSub;

    Default
    {
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 20;
        weapon.ammotype2 "WhipLash";
        Weapon.Ammotype "WhipLash";
        +WEAPON.AMMO_OPTIONAL;
        +WEAPON.ALT_AMMO_OPTIONAL;
        +WEAPON.NOALERT;
        +WEAPON.CHEATNOTWEAPON;
    }

    action State A_AREAGRefire() {

        if(CountInv("FallStunTime") > 0) {
            return ResolveState("FallStun");
        }

        for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
            if(countInv(TreasureItems.activeItem(i))) {
                return ResolveState(TreasureItems.raiseState(i));
            }
        }

        int iButtons = AREAGPlayerPawn(self).iButtons;

        if(iButtons & BT_ATTACK) {
            return ResolveState("Hold");
        } else if(iButtons & BT_ALTATTACK) {
            return ResolveState("AltHold");
        } else {
            return ResolveState(Null);
        }
    }

    action State A_AREAGClearRefire() {

        if(CountInv("FallStunTime") > 0) {
            return ResolveState("FallStun");
        }

        for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
            if(countInv(TreasureItems.activeItem(i))) {
                return ResolveState(TreasureItems.raiseState(i));
            }
        }

        int iButtons = AREAGPlayerPawn(self).iButtons;

        if(iButtons & BT_ATTACK) {
            return ResolveState("MainLowerStart");
        } else if(iButtons & BT_ALTATTACK) {
            return ResolveState("AltLowerStart");
        } else {
            return ResolveState(Null);
        }
    }

    action State A_AREAGMainRefire() {

        if(CountInv("FallStunTime") > 0) {
            return ResolveState("FallStun");
        }

        for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
            if(countInv(TreasureItems.activeItem(i))) {
                return ResolveState(TreasureItems.raiseState(i));
            }
        }

        int iButtons = AREAGPlayerPawn(self).iButtons;

        if(iButtons & BT_ATTACK) {
            return ResolveState("Hold");
        } else {
            return ResolveState(Null);
        }
    }

    action State A_AREAGAltRefire() {

        if(CountInv("FallStunTime") > 0) {
            return ResolveState("FallStun");
        }

        for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
            if(countInv(TreasureItems.activeItem(i))) {
                return ResolveState(TreasureItems.raiseState(i));
            }
        }

        int iButtons = AREAGPlayerPawn(self).iButtons;

        if(iButtons & BT_ALTATTACK) {
            return ResolveState("AltHold");
        } else {
            return ResolveState(Null);
        }
    }

    action State A_AREAGUseSub() {

        int wep = AREAGPlayerPawn(self).iSelectedWep;

        for(int i = 0; i < SubWeapons.subWepCount(); i++) {
            if(wep == i && CountInv(SubWeapons.ammoField(i)) > 0)
            {
                return resolveState(SubWeapons.releaseState(i));
            }
        }

        return resolveState(Null);
    }

    action State A_AREAGCheckSubAmmo(StateLabel state) {

        int wep = AREAGPlayerPawn(self).iSelectedWep;

        for(int i = 0; i < SubWeapons.subWepCount(); i++) {
            if(wep == i && CountInv(SubWeapons.ammoField(i)) > 0) {
                return ResolveState(Null);
            }
        }

        return ResolveState(state);
    }

    action void A_ReadySubWeapons() {
        A_GunFlash();
    }

    action void A_AREAGLowerSub() {
        invoker.bLowerSub = true;
    }

    action void A_AREAGRaiseSub() {
        invoker.bLowerSub = false;
    }

    action State A_AREAGSubReady() {
        
        int wep = AREAGPlayerPawn(self).iSelectedWep;

        if(invoker.bLowerSub) {
            return ResolveState(Null);
        }

        for(int i = 0; i < SubWeapons.subWepCount(); i++) {
            if(wep == i && CountInv(SubWeapons.ammoField(i)) > 0) {
                return ResolveState(SubWeapons.raiseState(i));
            }
        }

        return ResolveState("EmptyRaise");
    }

    action State A_AREAGEmptyActive() {

        int wep = AREAGPlayerPawn(self).iSelectedWep;
        bool bSwitch = invoker.bLowerSub;

        for(int i = 0; i < SubWeapons.subWepCount() && !bSwitch; i++) {
            bSwitch |= wep == i && CountInv(SubWeapons.ammoField(i)) > 0;
        }

        if(bSwitch) {
            return ResolveState("EmptyLower");
        }

        return ResolveState(null);
    }

    action State A_AREAGWeaponReady() {

        int iButtons = AREAGProtoPlayer(self).iButtons;
        int iOldButtons = AREAGProtoPlayer(self).iOldButtons;

        if(CountInv("FallStunTime") > 0)
        {
            return ResolveState("Fire");
        }

        for(int i = 0; i < TreasureItems.itemFields.Size(); i++) {
            if(countInv(TreasureItems.activeItem(i))) {
                return ResolveState("Fire");
            }
        }

        int rWep = AREAGPlayerPawn(self).iSelectedWep;
        if(rWep >= 0 && rWep < SubWeapons.subWepCount()) {
            if((iButtons & BT_USER1) && !(iOldButtons & BT_USER1)) {
                rWep = SubWeapons.nextSubCycle(rWep);

                while(self.CountInv(SubWeapons.maxField(rWep)) == 0) {
                    rWep = SubWeapons.nextSubCycle(rWep);
                }
            } else if((iButtons & BT_USER2) && !(iOldButtons & BT_USER2)) {
                rWep = SubWeapons.prevSubCycle(rWep);

                while(self.CountInv(SubWeapons.maxField(rWep)) == 0) {
                    rWep = SubWeapons.prevSubCycle(rWep);
                }
            }
            AREAGPlayerPawn(self).iSelectedWep = rWep;
        }

        A_WeaponReady();
        return ResolveState(null);
    }

    States
    {
        Ready:
            TNT1 A 1;
            loop;
        ReadyRaise:
            TNT1 A 1;
            loop;
        ReadyLoop:
            TNT1 A 1;
            loop;
        Deselect:
        DeselectReal:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower;
            TNT1 A 1 A_Lower;
            Loop;
        Select:
            TNT1 A 8;
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise;
            TNT1 A 1 A_Lower;
            Loop;
        Fire:
            TNT1 A 0;
            goto Ready;
        Hold:
            TNT1 A 1;
            TNT1 A 0 A_AREAGMainRefire();
            TNT1 A 1 A_JumpIf(true, "MainRelease");
            wait;
        MainRelease:
            TNT1 A 1;
            TNT1 A 0 A_AREAGCheckSubAmmo("ReadyRaise");
            TNT1 A 0 A_AREAGAltRefire();
            goto FireEnd;
        Altfire:
            TNT1 A 0 A_AREAGCheckSubAmmo("ReadyLoop");
            TNT1 A 0 A_AREAGLowerSub();
            TNT1 A 1 A_JumpIf(true, "AltLower");
            wait;
        AltHold:
            TNT1 A 1;
            TNT1 A 0 A_AREAGCheckSubAmmo("ReadyRaise");
            TNT1 A 0 A_AREAGAltRefire();
            goto AltRelease;
        AltRelease:
            HBMA A 0 A_AREAGUseSub();
            HBMA A 1 A_JumpIf(true, "FireEnd");
            wait;
        AltFireEnd:
            TNT1 A 0;
            TNT1 A 1 A_JumpIf(true, "FireEnd");
            wait;
        FireEnd:
            TNT1 AAAAAAAAAA 1 A_AREAGRefire();
            TNT1 A 1 A_JumpIf(true, "ReadyRaise");
            wait;
        Flash:
            TNT1 A 1 A_AREAGSubReady();
            loop;
        EmptyRaise:
            HBM2 DCBA 1;
            goto EmptyLoop;
        EmptyLoop:
            HBM2 A 1 A_AREAGEmptyActive();
            loop;
        EmptyLower:
            HBM2 ABCD 1;
            goto Flash;
        FallStun:
            TNT1 A 1;
            TNT1 A 0 A_JumpIf(CountInv("FallStunTime")>0, "FallStun");
            TNT1 A 1 A_JumpIf(true, "Ready");
            wait;
        NoAmmo:
            HBM2 A 1;
            goto ReadyLoop;
        MainLowerStart:
            HBM2 BBEF 1;
            goto ReadyLoop;
        AltLowerStart:
            HBM2 BBEF 1;
            goto ReadyLoop;
    }
}
