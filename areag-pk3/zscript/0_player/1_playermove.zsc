extend class ZSCPlayerPawn {
	mixin AREAG_Common;
	
    const COYOTE_TIME = 5;

    bool bJumpCancel;
    bool bLegsInWater;
    bool bHeadInWater;

    int iSpeedInv;
    int iJumpInv;

    float fBaseSpeed;
    float fBaseJump;
    float fStrafeSpeed;
    float fSR50Speed;

    float fBaseGravity;

    double prevBobXFracMult;
    double prevBobYFracMult;
    double prevViewBob;

    int airTime;
    int jumpDelay;
    int iBaseStepHeight;

    int iStepCD;

    Actor aTPPoint;

    void AREAGMoveInit() {
        Thing_ChangeTID(0, PlayerNumber()+1000);
        prevBobXFracMult = 0.0;
        prevBobYFracMult = 0.0;
        prevViewBob = ViewBob;
        iStepCD = 0;

        bJumpCancel = true;
        bLegsInWater = false;
        bheadInWater = false;
        fBaseGravity = gravity;
        airTime = 0;
        jumpDelay = 0;
        
        iJumpInv = CountInv("BaseJumpSpeed");
        fBaseJump = float(iJumpInv) / 100.0;
        AREAGUpdateSpeeds();
    }

    void AREAGUpdateSpeeds() {
        iSpeedInv = CountInv("BaseMoveSpeed");
        fBaseSpeed = float(iSpeedInv) / 100.0;
        fStrafeSpeed = fBaseSpeed * 0.78087;
        fSR50Speed = fBaseSpeed * 0.7071;
    }

    void AREAGMoveThink() {
        int SR = checkSR(iButtons);
        if(SR > 0)
		{  
            if(SR == 40 && !(speed ~== fStrafeSpeed)) {
                speed = fStrafeSpeed;
            } else if(SR == 50 && !(speed ~== fSR50Speed)) {
                speed = fSR50Speed;
            }
		}
		else
		{
            if(!(speed ~== fBaseSpeed)) {
                speed = fBaseSpeed;
            }
		}
    }

    void AREAGMoveTick() {

        // FALL STUN
        if(bOnGround && lastZVel < -FallingScreamMinSpeed) {
            A_GiveInventory("FallStunTime", 140);
            A_GiveInventory("ScreenShakeTime", 5);
            A_SpawnItemEx("AREAGCrashLand");
            A_PlaySound("player/crashland", CHAN_BODY);
        }

        // JUMPING
        if((bOnGround || airTime <= COYOTE_TIME) && (BT_JUMP & iButtons) && jumpDelay == 0 && CountInv("FallStunTime") == 0) {
            jumpDelay = 10;
            Vel.Z = JumpZ * 35 / TICRATE;
            if(CountInv("DroneFlag")) {
                A_PlaySound("*dronejump", CHAN_BODY);
            } else {
                if(CountInv("SteamGreavesFlag") == 0) {
                    A_PlaySound("*jump", CHAN_BODY);
                } else {
                    A_PlaySound("*superjump", CHAN_BODY);
                }
            }
        }

        if(checkReleased(BT_JUMP, iButtons, iOldButtons) && vel.z > 0 && bJumpCancel)
		{
			ThrustThingZ(0, 0, 0, 0);
			bJumpCancel = false;
		}

        // WATER
		if(CountInv("LegsUnderwater")>0)
		{
			if(!bLegsInWater) {
				gravity = fBaseGravity * WATER_GRAVITY_MULT;
				jumpz = fBaseJump * WATER_JUMP_MULT;
				A_GiveInventory("WaterSpeed", 1);
				bLegsInWater = true;
			}
		}
		else
		{
			if(bLegsInWater) {
				gravity = fBaseGravity;
				jumpz = fBaseJump;
				A_TakeInventory("WaterSpeed", 1);
				bLegsInWater = false;
			}
		}
		if(CountInv("HeadUnderwater")>0)
		{
			if(!bHeadInWater)
			{
				A_GiveInventory("BreathCooldown", 1);
				bHeadInWater = true;
			}
			if(CountInv("BreathCooldown") == 0)
			{
				if(CountInv("BreathTime") > 0)
				{
					A_TakeInventory("BreathTime", 10);
				}
				else
				{
					//Thing_Damage2(0, 5, "Drowning");
                    A_DamageSelf(5, "Drowning", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOPROTECT|DMSS_NOFACTOR, "None", "None", AAPTR_NULL);
				}
				A_GiveInventory("BreathCooldown", 1);
			}
		}
		else
		{
			GiveInventory("BreathTime", 100);
			bHeadInWater = false;
		}

        // JUMP SPEED MANIPULATION (eg. Steam Greaves)
        if(iJumpInv != CountInv("BaseJumpSpeed"))
		{
            iJumpInv = CountInv("BaseJumpSpeed");
            fBaseJump = float(iJumpInv) / 100.0;
            AREAGUpdateSpeeds();
			if(blegsInWater)
			{
				jumpz = fBaseJump * WATER_JUMP_MULT;
			}
			else
			{
				jumpz = fBaseJump;
			}
		}
		
		// SPEED MANIPULATION (eg. Gear Greaves)
		if(iSpeedInv != CountInv("BaseMoveSpeed"))
		{
			AREAGUpdateSpeeds();
		}

        // GROUND CHECKS        
        if(!bOnGround) {
            if(viewbob != 0.0 && pos.z - floorz > 16.0) {
                viewbob = 0.0;
            }
            airTime++;
        }

        if(bOnGround && viewbob != 1.0) {
            viewbob = 1.0;
        }

        if(bOnGround) {
            if(!bJumpCancel) {
                bJumpCancel = true;
            }
            if(jumpDelay > 0) {
                jumpDelay--;
            }
            if(airTime > 0) {
                jumpDelay = min(jumpDelay, airTime);
                airTime = 0;
            }
        }

        // PIT TELEPORTER
        if(!aTPPoint) {
            bool spSuccess = false;
            while(!spSuccess) {
                [spSuccess, aTPPoint] = A_SpawnItemEx("AREAGPitReturnPoint");
            }
        } else {
            if(bOnGround) {
                if(CountInv("PitTeleport") == 0) {
                    aTPPoint.A_Warp(AAPTR_PLAYER1, -VelX*4, VelY*4, -(z-floorz), 0, WARPF_NOCHECKPOSITION|WARPF_ABSOLUTEANGLE);
                    aTPPoint.A_SetAngle(angle);
                } else {
                    A_Stop();
                    aTPPoint.A_Warp(AAPTR_PLAYER1, 0, 0, -(z-floorz), 0, WARPF_NOCHECKPOSITION|WARPF_MOVEPTR);
                    A_TakeInventory("PitTeleport", 999);
                }
            }
        }
    }

    override vector2 BobWeapon(double ticfrac)
    {
        if(!Player) return (0, 0);
        let wep = Player.ReadyWeapon;

        if(!wep || wep.bDONTBOB) return (0, 0);

        vector2 p[2];

        double ang = wep.BobSpeed * 128 * Player.GetWBobSpeed() * (Level.Time) * 0.08;
        prevViewBob = Lerp(prevViewBob, ViewBob, ticfrac/2);
        let xFracMult = cos(ang) * prevViewBob * 0.8;
        let yFracMult = 0.5-abs(sin(ang)) * prevViewBob * 0.5;
        double bobx = 0;
        double boby = 0;

        bobx = Player.Bob * wep.BobRangeX;
        boby = Player.Bob * wep.BobRangeY;
        bobx *= xFracMult;
        boby *= yFracMult;
        p[0] = (bobx, boby+5.0);

        bobx = Player.Bob * wep.BobRangeX;
        boby = Player.Bob * wep.BobRangeY;
        bobx *= prevBobXFracMult;
        boby *= prevBobYFracMult;
        p[1] = (bobx, boby+5.0);

        prevBobXFracMult = xFracMult;
        prevBobYFracMult = yFracMult;
        
        vector2 interp = p[0] * (1 - 0.5) + p[1] * 0.5;
        interp.y += Lerp(lerpVelZ, vel.z, 0.5);

        // if(abs(sin(ang)) < 0.2 && bOnGround && AREAGIsWalking()) {
        //     if(iStepCD == 0) {
        //         A_PlaySound("*footstep", CHAN_BODY);
        //         iStepCD = 1;
        //     }
        // } else {
        //     iStepCD = 0;
        // }

        return interp;
    }

    static int checkSR(int iButtons) {
        if(iButtons & BT_MOVELEFT || iButtons & BT_MOVERIGHT) {
            if(iButtons & BT_FORWARD || iButtons & BT_BACK) { // Pressing forward / back
                if((iButtons & BT_LEFT || iButtons & BT_RIGHT) && iButtons & BT_STRAFE) {
                    return 50;
                }
                return 40;
            }
            return 0;
        }
        return 0;
    }
}

class AREAGCrashLand : BasicEffect
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Explode(30, 128, 0, 0, 128);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 45, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 90, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 135, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 180, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 225, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 270, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 315, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 0, SXF_ABSOLUTEANGLE);
		
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 45+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 90+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 135+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 180+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 225+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 270+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 315+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 22.5, SXF_ABSOLUTEANGLE);
		stop;
	}
}

class AREAGLandSmokeLeft : BasicEffect
{
    Default
    {
        alpha 0.7;
        -FORCEXYBILLBOARD;
    }

    action void A_DustRotate() {
        A_ChangeVelocity(4, 0, 0, CVF_RELATIVE|CVF_REPLACE);
        A_SetAngle(angle+12);
    }

	States
	{
	Spawn:
        MDAD HHHIIIJJJ 2 A_DustRotate();
		stop;
	}
}

class AREAGLandSmokeRight : AREAGLandSmokeLeft
{
    action void A_DustRotate() {
        A_ChangeVelocity(8, 0, 0, CVF_RELATIVE|CVF_REPLACE);
        A_SetAngle(angle-4);
    }
}

class AREAGPitReturnPoint : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOCLIP;
        Renderstyle "None";
    }
    States
    {
    Spawn:
        TROO A 1;
        wait;
    }
}

class PitTeleport : Once {}
