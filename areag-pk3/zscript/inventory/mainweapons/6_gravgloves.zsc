class GravityGlovesPickup : BasicInventory
{
    Default
    {
        BasicInventory.PickupType PICKTYPE_WEAPON;
        BasicInventory.PickupID PICKMSG_GRAVITYGLOVES;
        BasicInventory.CheckItem "GravityGloves";
    }
    States
    {
    SpawnFrames:
        MAGG A 1;
        loop;
    PickupEffect:
        MAGG A 0 A_GiveInventory("GravityGloves", 1);
        stop;
    }
}

class GravityGloves : AREAGProtoWeapon
{
    bool swingLeft;
    Default
    {
        Weapon.SlotNumber 3;
    }

    // Main weapon functions
    action State A_MainWeaponReady() {

        int iButtons = invoker.plr.iButtons;
        int iOldButtons = invoker.plr.iOldButtons;

        if(invoker.plr.getInterruptState()) {
            invoker.bMainInProgress = true;
            return ResolveState("MainOffWindup");
        }

        if(checkPressed(BT_SUBNEXT, iButtons, iOldButtons)) {
            invoker.plr.selectNextSubweapon();
        } else if(checkPressed(BT_SUBPREV, iButtons, iOldButtons)) {
            invoker.plr.selectPrevSubweapon();
        }

        if(iButtons & BT_ATTACK) {
            invoker.bMainInProgress = true;
            return ResolveState("MainWindup");
        }

        if(iButtons & BT_ALTATTACK) {
            invoker.bMainInProgress = true;
            return ResolveState("AltWindup");
        }

        A_WeaponReady(WRF_NOFIRE); // Literally just here to allow you to swap weapons.
        return ResolveState(null);
    }

    action State A_FistRotate(StateLabel jump, double at) {
        A_SetAngle(angle + at);
        if(CountInv("LightFistStrike") > 0) {
            return ResolveState(jump);
        }
        return ResolveState(null);
    }

    action State A_SwingFist() {
        A_StartSound("lightfist/swing", CHAN_WEAPON);

        invoker.swingLeft = !invoker.swingLeft;
		if(invoker.swingLeft) {
			return ResolveState("SwingLeft");
		} else {
			return ResolveState("SwingRight");
		}
		return ResolveState(Null);
    }

    action void A_DisableSub() {
        invoker.bSubInProgress = false;
    }

    action State A_MagnetRefire(StateLabel where, StateLabel grab) {
        if(invoker.plr.isCarryingBlock) {
            return ResolveState(grab);
        }

        if(invoker.plr.iButtons & BT_ALTATTACK) {
            return ResolveState(where);
        }

        return ResolveState(null);
    }

    action void A_HoldBlock(StateLabel end, StateLabel fire) {
        if(invoker.plr.isCarryingBlock) {
            Actor blk = invoker.plr.GetBlockGrab();
            blk.A_SetAngle(blk.angle + 1.0);
            blk.A_SetPitch(blk.pitch + 1.0);
            blk.A_SetRoll(blk.roll + 1.0);
            let posX = 64.0 * cos(angle);
            let posY = 64.0 * sin(angle);
            let flags = WARPF_ABSOLUTEANGLE|
                        WARPF_INTERPOLATE|
                        WARPF_ABSOLUTEOFFSET|
                        WARPF_NOCHECKPOSITION|
                        0;
            blk.Warp(self, posX, posY, 32, blk.angle, flags);
        }
    }

    States
    {
    Flash:
        TNT1 A 0 A_DisableSub();
        stop;

    MainRaise:
        IRNF ZDCBA 1;
        goto MainReady;
    MainReady:
        IRNF A 1 A_MainWeaponReady();
        wait;
    MainWindup:
        IRNF ABCDZ 1;
        goto MainHold;
    MainHold:
        TNT1 A 1;
        TNT1 A 0 A_MainHoldCheck("MainHold");
        goto MainFire;
    MainFire:
		TNT1 A 0 A_SwingFist();
	SwingLeft:
		IRP1 AB 1 A_FistRotate("LeftImpact", -0.3);
        IRP1 A 0 A_FireProjectile("LightFistAttack");
        IRP1 CDEF 1 A_FistRotate("LeftImpact", -0.3);
		goto FireEnd;
    LeftImpact:
		IRP1 GHIJ 1;
		IRP2 L 0 A_JumpifInventory("LightfistSmack", 1, "FireEndCancel");
		IRP1 KL 2;
		goto FireEnd;
	SwingRight:
		IRP2 AB 1 A_FistRotate("RightImpact", 0.3);
        IRP1 A 0 A_FireProjectile("LightFistAttack");
        IRP2 CDEF 1 A_FistRotate("RightImpact", 0.3);
		goto FireEnd;
    RightImpact:
		IRP2 GHIJ 1;
		IRP2 L 0 A_JumpifInventory("LightfistSmack", 1, "FireEndCancel");
		IRP2 KL 2;
		goto FireEnd;
	FireEnd:
		TNT1 A 6;
    FireEndCancel:
        TNT1 A 0 A_TakeInventory("LightFistStrike", 1);
        TNT1 A 0 A_TakeInventory("LightfistSmack", 1);
		TNT1 A 0 A_FinishMainFiringSequence();
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_MainRefire("MainHoldRefire", "MainWait");
		goto MainRaise;
	MainHoldRefire:
        TNT1 A 0 A_StartMainFiringSequence();
        goto MainHold;
    MainLower:
        IRNF ABCDZ 1;
        TNT1 A 1 A_MainDeselect;
        wait;
    MainOffWindup:
        IRNF ABCDZ 1;
		goto MainWait;
	MainWait:
		TNT1 A 1;
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 A_CheckSubStatus("MainHoldRefire", "MainWait");
		goto MainRaise;

    AltWindup:
        IRNF ABCDZ 1;
		MAGG CDE 1;
        goto AltFire;
    AltFire:
        MAGG G 1 A_FireProjectile("MagnetGrab");
        MAGG G 0 A_MagnetRefire("AltFire", "BlockGrab");
        goto AltEnd;
    AltEnd:
        MAGG EDC 2;
        goto MainRaise;

    BlockGrab:
        MAGG F 1 A_HoldBlock("BlockHoldEnd", "BlockFire");
        wait;
    BlockHoldEnd:
		MAGG EDC 1;
        wait;
    }
}

class SwingLeftCD : Once {}
class LightFistStrike : PowerTime15 {}
class LightfistSmack : LightFistStrike {}

class LightFistAttack : FastProjectile
{
    Default
    {
        Speed 48;
        DamageFunction (15);
        +NOTIMEFREEZE;
        +FORCEPAIN;
        +HITTRACER;
        scale 0.4;
        radius 4;
        radius 2;
    }
	States
	{
	Spawn:
		TNT1 A 1;
		stop;
	Death:
		TNT1 A 0 A_PlaySoundEx("lightfist/dryhit", "auto");
		TNT1 A 0 A_GiveToTarget("LightFistStrike", 1);
		TNT1 A 0 A_SpawnItemEx("LightFistImpactFX", frandom(-2, 2), frandom(-2, 2), 8+frandom(-2, 2));
		stop;
	XDeath:
		TNT1 A 0 A_PlaySoundEx("lightfist/smack", "auto");
		TNT1 A 0 A_GiveToTarget("LightFistStrike", 1);
		TNT1 A 0 A_GiveToTarget("LightFistSmack", 1);
		TNT1 A 0 A_SpawnItemEx("LightFistSmackFX", frandom(-2, 2), frandom(-2, 2), 8+frandom(-2, 2));
		stop;
	}
}

class LightFistSmackFX : BasicEffect
{
    Default
    {
        +FORCEXYBILLBOARD;
        +NOTIMEFREEZE;
        +ROLLSPRITE;
        Scale 0.9;
        renderstyle "add";
    }
	States
	{
    Spawn:
        LFIM G 0;
        LFIM G 0 A_SetRoll(random(0, 3) * 90);
        LFIM G 1 A_JumpIf(true, "SpawnFrames");
        wait;
	SpawnFrames:
		LFIM GHIJK 1 BRIGHT;
		stop;
	}
}

class LightFistImpactFX : LightFistSmackFX
{
	States
	{
	SpawnFrames:
		LFIM ABCDEF 1 BRIGHT;
		stop;
	}
}

class MagnetGrab : BasicFastProjectile
{
    Default
    {
        Speed 2048;
        DamageFunction (0);
        radius 4;
        radius 2;
    }

    action void A_PullBlock() {
        let plr = AREAGPlayerPawn(target);
        if(CheckProximity("AREAGPushBlockSmall", 32.0+16.0, 1, CPXF_NOZ|CPXF_SETTRACER|CPXF_ANCESTOR|CPXF_CLOSEST)) {
            if(plr.Distance3D(tracer) < 32.0+16.0) {
                tracer.A_ChangeVelocity(0, 0, 0, CVF_REPLACE);
                tracer.bNOINTERACTION = true;
                tracer.bNOGRAVITY = true;
                plr.SetBlockGrab(tracer);
            } else {
                let dist = plr.Distance2D(tracer);
                let tAng = VectorAngle(plr.pos.x - tracer.pos.x, plr.pos.y - tracer.pos.y);
                let dz = tracer.pos.z - tracer.Height/2 - plr.pos.z - plr.Height/2;
                let tPitch = dist != 0.f ? VectorAngle(dist, dz) : 0.;
                let spd = 2.0;
                tracer.A_ChangeVelocity(spd * cos(tAng) * cos(tPitch), spd * sin(tAng) * cos(tPitch), spd * sin(-tPitch));
            }
        }
    }

    States
    {
    Spawn:
        TNT1 A 1;
        goto Death;
    Death:
        TNT1 A 0 A_PullBlock();
        TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEx("MagnetPartcle", frandom(-4, 4), frandom(-4, 4), frandom(-4, 4), frandom(-4, 4), frandom(-4, 4), frandom(-4, 4));
        stop;
    }
}

class MagnetPartcle : BasicEffect
{
    Default
    {
        +ROLLSPRITE;
        +FORCEXYBILLBOARD;
        renderstyle "add";
    }

    double dBaseScale;
    double dBaseRoll;

    action void A_InitRotatingParticle() {
        invoker.dBaseScale = frandom(0.004, 0.016);
        invoker.dBaseRoll = frandom(0, 360);
        A_SetScale(invoker.dBaseScale, invoker.dBaseScale);
        A_SetRoll(invoker.dBaseRoll);
    }

    action void A_RotateFade(double alp, double rol) {
        A_FadeOut(alp);

        A_SetScale(invoker.dBaseScale * 1.0/alpha, invoker.dBaseScale * 1.0/alpha);
        A_SetRoll(roll + rol);
    }

    States
    {
    Spawn:
        MAGG B 0;
        MAGG B 0 A_InitRotatingParticle();
        MAGG B 1 A_RotateFade(0.1, 0.2);
        wait;
    }
}

