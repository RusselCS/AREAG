const SWEP_NONE = -1;

class SubWeaponPickup : BasicInventory
{
    class<Ammo> cAmmoType;
    int iAmmoGive;
    String sWeaponName;
    Ammo aAmmo;
 
    property AmmoType: cAmmoType;
    property AmmoGive: iAmmoGive;
    property WeaponName: sWeaponName;

    override void BasicPickup(Actor toucher)
    {
        queueSubWeapon(toucher);
    }

    void queueSubWeapon(Actor who) {
        AREAGPlayerPawn plr = AREAGPlayerPawn(who);
        who.GiveInventory(cAmmoType, iAmmoGive);
        aAmmo = Ammo(plr.FindInventory(cAmmoType));
        SubWeapon wep = subStateBuilder();
        plr.pushSubWeapon(wep);
    }

    virtual SubWeapon subStateBuilder() {
        StateLabel rS = "Raise";

        return buildSubWeapon(rS);
    }

    SubWeapon buildSubWeapon(StateLabel rS)
    {
        return new("SubWeapon").Init(cAmmoType, sWeaponName, rS, aAmmo);
    }
}

class SubWeapon
{
    class<Ammo> ammoType;
    String weaponName;
    StateLabel raiseState;
    Ammo invAmmo;

    SubWeapon Init(class<Ammo> aT, String sN, StateLabel rS, Ammo iA) {
        ammoType = aT;
        weaponName = sN;
        raiseState = rS;
        invAmmo = iA;
        return self;
    }

    String getWeaponName() {
        return weaponName;
    }

    class<Ammo> getAmmoType() {
        return ammoType;
    }

    Ammo getInvAmmo() {
        return invAmmo;
    }

    StateLabel getRaiseState() {
        return raiseState;
    }
}
