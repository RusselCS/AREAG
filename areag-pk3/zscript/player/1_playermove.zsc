extend class AREAGPlayerPawn {
	mixin AREAG_Common;
	
    const COYOTE_TIME = 5;

    const BREATH_COOLDOWN_MAX = 2;
    const BREATH_COOLDOWN_MAX_SCROLL = 4;

    int breathCooldown;

    bool bJumpCancel;
    bool bLegsInWater;
    bool bHeadInWater;

    double dBaseSpeed;
    double dBaseJump;

    property RunSpeed: dBaseSpeed;
    property JumpSpeed: dBaseJump;

    double dStrafeSpeed;
    double dSR50Speed;

    double dBaseGravity;

    vector2 prevBob;
    double prevViewBob;

    double dBaseRadius;
	double dBaseHeight;
    double dStartingHeight;
    double dBaseViewHeight;
    double dStartingViewHeight;
    double dBaseStepHeight;
    double dBaseAttackZOffset;
    double dWaterLevel;

    bool bUWFrozenBecauseTimeStop;
    bool bPauldronActive;

    int airTime;
    int jumpDelay;
    int iBaseStepHeight;

    int iStepCD;

    double dViewHeightOffset;
    double dOldViewHeightOffset;
    int iStepCountdown;
    const STEPCD_MAX = 5;
    double dOldViewHeight;
    double oldZPos;
    bool eyesInit;

    void AREAGMoveInit() {
        Thing_ChangeTID(0, PlayerNumber()+1000);
        prevViewBob = ViewBob;
        iStepCD = 0;
        eyesInit = false;

        dBaseRadius = radius;
	    dBaseHeight = height;
        dStartingHeight = dBaseHeight;
        dBaseViewHeight = viewHeight;
        dStartingViewHeight = dBaseViewHeight;
        dBaseStepHeight = maxstepheight;
        dBaseAttackZOffset = attackZOffset;
        dViewHeightOffset = 0.0;

        bUWFrozenBecauseTimeStop = false;
        bPauldronActive = false;
        
        setBaseJumpSpeed(dBaseJump);
        setBaseWalkSpeed(dBaseSpeed);

        bJumpCancel = true;
        bLegsInWater = false;
        bheadInWater = false;
        dBaseGravity = gravity;
        airTime = 0;
        jumpDelay = 0;
        roomId = 0;
    }

    void AREAGUpdateSpeeds() {
        dStrafeSpeed = dBaseSpeed * 0.78087;
        dSR50Speed = dBaseSpeed * 0.7071;
    }

    void AREAGMoveThink() {
        int SR = checkSR(iButtons);
        if(SR > 0)
		{  
            if(SR == 40 && !(speed ~== dStrafeSpeed)) {
                speed = dStrafeSpeed;
            } else if(SR == 50 && !(speed ~== dSR50Speed)) {
                speed = dSR50Speed;
            }
		}
		else
		{
            if(!(speed ~== dBaseSpeed)) {
                speed = dBaseSpeed;
            }
		}

        if(dBaseViewHeight != 0.0 && viewHeight != dBaseViewHeight) {
            if(abs(viewHeight-dBaseViewHeight) < 1.0) {
                updateViewHeight(dBaseViewHeight);
            } else {
                updateViewHeight(Lerp(viewHeight, dBaseViewHeight, 0.3));
            }
        }
    }

    void AREAGMoveTick() {

        // FALL STUN
        if(bOnGround && lastZVel < -FallingScreamMinSpeed) {
            if(CountInv("DroneFlag") > 0) {
                A_GiveInventory("ScreenShakeTime", 2);
                A_SpawnItemEx("AREAGCrashLand");
                A_StartSound("drone/crashland", CHAN_BODY);
            } else {
                if(CountInv("ShockAbsorberFlag")) {
                    A_SetInventory("FallStunTime", 70);
                } else {
                    A_SetInventory("FallStunTime", 140);
                }
                A_SetInventory("ScreenShakeTime", 5);
                A_SpawnItemEx("AREAGCrashLand");
                if(CountInv("PauldronFlag") > 0) {
                    A_SpawnItemEx("AREAGCrashLand", 0, 0, 0, 0, 0, 0, 11.25);
                }
                A_StartSound("player/crashland", CHAN_BODY);
            }
        }

        // JUMPING
        if((bOnGround || airTime <= COYOTE_TIME) &&
           (iButtons & BT_JUMP) && jumpDelay == 0 &&
           CountInv("FallStunTime") == 0 &&
           !bUWFrozenBecauseTimeStop) {
            jumpDelay = 10;
            Vel.Z = JumpZ * 35 / TICRATE;
            if(gravity == 0) {
                Vel.Z -= 2*dBaseGravity;
            }
            A_StartSound("*jump", CHAN_BODY);
        }

        if(checkReleased(BT_JUMP, iButtons, iOldButtons) && vel.z > 0 && bJumpCancel)
		{
			ThrustThingZ(0, 0, 0, 0);
			bJumpCancel = false;
		}

        if(airTime > COYOTE_TIME && vel.z < 0) {
			bJumpCancel = false;
        }

        // WATER
        if(CountInv("TimestopFlag") == 0) {
            if(CountInv("LegsUnderwater")>0)
            {
                if(!bLegsInWater) {
                    resetGravity();
                    if(vel.z < 0) {
                        A_ChangeVelocity(vel.x, vel.y, vel.z * (WATER_GRAVITY_MULT * 2), CVF_REPLACE);
                    }
                    updateJumpSpeed();
                    A_GiveInventory("WaterSpeed", 1);
                    bLegsInWater = true;
                }
            }
            else
            {
                if(bLegsInWater) {
                    resetGravity();
                    updateJumpSpeed();
                    A_TakeInventory("WaterSpeed", 1);
                    bLegsInWater = false;
                }
            }
            if(CountInv("HeadUnderwater")>0)
            {
                if(!bHeadInWater)
                {
                    breathCooldown = CountInv("SwimmingLessonsFlag") == 0 ? BREATH_COOLDOWN_MAX : BREATH_COOLDOWN_MAX_SCROLL;
                    bHeadInWater = true;
                }
                if(breathCooldown == 0)
                {
                    breathCooldown = CountInv("SwimmingLessonsFlag") == 0 ? BREATH_COOLDOWN_MAX : BREATH_COOLDOWN_MAX_SCROLL;
                    if(CountInv("BreathTime") > 0)
                    {
                        A_TakeInventory("BreathTime", 1);
                    }
                    else
                    {
                        A_DamageSelf(1, "Drowning", DMSS_FOILINVUL|DMSS_FOILBUDDHA|DMSS_NOPROTECT|DMSS_NOFACTOR, "None", "None", AAPTR_NULL);
                        breathCooldown *= 2;
                    }
                } else {
                    breathCooldown--;
                }
            }
            else
            {
                GiveInventory("BreathTime", 100);
                bHeadInWater = false;
            }
        }

        // PAULDRON
        // normally this would use a passive tick function, but due to how that works, I can't actually do that without reworking them again. :I
        if(CountInv("PauldronFlag") > 0) {
            if(!bPauldronActive) {
                bPauldronActive = true;
                resetGravity();
            }
        } else {
            if(bPauldronActive) {
                bPauldronActive = false;
                resetGravity();
            }
        }

        // -- GROUND CHECKS --
        // STAIRS
        if(!bOnGround && bOldOnGround) {
            if(pos.z - floorz <= maxstepheight && vel.z < 0) {
                double offs = pos.z - floorz;
                iStepCountdown = STEPCD_MAX;
                updateViewHeight(viewHeight + offs);
                Warp(self, 0, 0, -offs, 0, WARPF_INTERPOLATE);
                vel.z = 0.0;

                bOnGround = true;
            }
        }
        if(bOnGround && pos.z != oldZPos) {
            let stepDist = pos.z - oldZPos;
            if(stepDist > 0 && stepDist < maxstepheight) {
                updateViewHeight(viewHeight - stepDist);
            }
        }

        oldZPos = pos.z;

        if(CountInv("TimestopFlag") > 0) {
            if(CountInv("LegsUnderwater") > 0)
            {
                if(CountInv("HeadUnderwater") == 0)
                {
                    if(gravity > 0) {
                        gravity = 0;
                        if(vel.z < 0) {
                            A_ChangeVelocity(vel.x, vel.y, 0, CVF_REPLACE);
                        }
                        if(pos.z < dWaterLevel) {
                            Warp(self, pos.x, pos.y, dWaterLevel-1, 0, WARPF_MOVEPTR|WARPF_ABSOLUTEPOSITION|WARPF_USECALLERANGLE);
                        }
                    }
                    bOnGround = true;
                } else {
                    if(!bUWFrozenBecauseTimeStop) {
                        bUWFrozenBecauseTimeStop = true;
                        SetPlayerProperty(0, true, PROP_FROZEN);
                        gravity = 0;
                        A_Stop();
                    }
                }
            }
        } else {
            if(gravity == 0) {
                resetGravity();
            }
            if(bUWFrozenBecauseTimeStop) {
                bUWFrozenBecauseTimeStop = false;
                SetPlayerProperty(0, false, PROP_FROZEN);
            }
        }

        if(!bOnGround) {
            if(viewbob != 0.0 && pos.z - floorz > 16.0) {
                viewbob = 0.0;
            }
            airTime++;
        }

        if(bOnGround && viewbob != 1.0) {
            viewbob = 1.0;
        }

        if(bOnGround) {
            if(!bJumpCancel) {
                bJumpCancel = true;
            }
            if(jumpDelay > 0) {
                jumpDelay--;
            }
            if(airTime > 0) {
                jumpDelay = min(jumpDelay, airTime);
                airTime = 0;
            }
        }

        // PIT TELEPORTER
        move_PitTeleportTick();

        // HEIGHT CHANGES
        if(height != dBaseHeight) {
            changeSize(radius, dBaseHeight);
        }
    }

    void resetGravity() {
        double fGrav = dBaseGravity;
        if(CountInv("LegsUnderwater") > 0) {
            fGrav *= WATER_GRAVITY_MULT;
        }

        if(CountInv("PauldronFlag") > 0) {
            fGrav *= PAULDRON_GRAVITY_MULT;
        }
        gravity = fGrav;
    }

    void changeSize(double rd, double ht) {
        dBaseHeight = ht;
        A_SetSize(rd, ht, true);
    }

    void changeHeight(double amt) {
        dBaseHeight = amt;
    }

    void changeViewHeight(double amt, bool forced = false) {
        dBaseViewHeight = amt;
        if(forced) {
            updateViewHeight(amt);
        }
    }

    void updateViewHeight(double amt) {
        player.viewheight = amt;
        viewheight = amt;
    }

    override vector2 BobWeapon(double ticfrac)
    {
        if(!Player)
            return (0, 0);
        
        let wep = Player.ReadyWeapon;
        if(!wep || wep.bDONTBOB)
            return (0, 0); 

        if(CountInv("DroneFlag") == 0) {
            if(CountInv("DashFlag") == 0) {
                return humanWeaponBob(wep, ticfrac);
            } else {
                return dashWeaponBob(wep, ticfrac);
            }
        } else {
            return droneWeaponBob(wep, ticfrac);
        }
    }

    vector2 humanWeaponBob(Weapon wep, double ticfrac)
    {
        Vector2 r;

        // Bob the weapon based on movement speed. ([SP] And user's bob speed setting)
        double ang = wep.BobSpeed * 128 * Player.GetWBobSpeed() * (Level.Time) * 0.08;

        if (curbob != player.bob)
        {
            if (abs(player.bob - curbob) <= 1)
            {
                curbob = player.bob;
            }
            else
            {
                double zoom = MAX(1., abs(curbob - player.bob) / 40);
                if (curbob > player.bob)
                {
                    curbob -= zoom;
                }
                else
                {
                    curbob += zoom;
                }
            }
        }

        // The weapon bobbing intensity while firing can be adjusted by the player.
        double BobIntensity = (WF_WEAPONBOBBING) ? 1. : player.GetWBobFire();

        if (curbob != 0)
        {
            //[SP] Added in decorate player.viewbob checks
            double bobx = (player.bob * BobIntensity * wep.BobRangeX * ViewBob);
            double boby = (player.bob * BobIntensity * wep.BobRangeY * ViewBob);

            r.X = bobx * cos(ang);
            r.Y = 0.5f * (boby * (1. + (cos(ang * 2))));
        }
        else
        {
            r = (0, 0);
        }

        vector2 goal = Vec2Lerp(prevBob, r, ticfrac/2);
        prevBob = goal;
        goal.y += max(Lerp(lerpVelZ, vel.z, 0.5), -16.0);

		return goal;
    }

    static int checkSR(int iButtons) {
        if(iButtons & BT_MOVELEFT || iButtons & BT_MOVERIGHT) {
            if(iButtons & BT_FORWARD || iButtons & BT_BACK) { // Pressing forward / back
                if((iButtons & BT_LEFT || iButtons & BT_RIGHT) && iButtons & BT_STRAFE) {
                    return 50;
                }
                return 40;
            }
            return 0;
        }
        return 0;
    }

    Name getClydeSoundClass() {
        if(CountInv("SteamGreavesFlag") > 0) {
            return "steamclyde";
        } else {
            return "clyde";
        }
    }

    void setBaseJumpSpeed(double which) {
        dBaseJump = which;
        updateJumpSpeed();
    }

    void updateJumpSpeed() {
        if(CountInv("DroneFlag") == 0) {
            if(CountInv("LegsUnderwater"))
            {
                jumpz = dBaseJump * WATER_JUMP_MULT;
            }
            else
            {
                jumpz = dBaseJump;
            }
        } else {
            jumpz = 10.0;
        }
    }

    void setBaseWalkSpeed(double which) {
        dBaseSpeed = which;
        AREAGUpdateSpeeds();
    }
}

class AREAGCrashLand : BasicEffect
{
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 A_Explode(30, 128, 0, 0, 128);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 45, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 90, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 135, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 180, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 225, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 270, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 315, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeLeft", 48, 0, 8, 0, 0, 0, 0, SXF_ABSOLUTEANGLE);
		
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 45+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 90+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 135+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 180+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 225+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 270+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 315+22.5, SXF_ABSOLUTEANGLE);
		TNT1 A 0 A_SpawnItemEx("AREAGLandSmokeRight", 48, 0, 8, 0, 0, 0, 22.5, SXF_ABSOLUTEANGLE);
		stop;
	}
}

class ForceEyeZRefresh : Once {}
class IncreaseEyeHeight : Once {}
class TransitionEyeHeight : Once {}

class AREAGLandSmokeLeft : BasicEffect
{
    Default
    {
        alpha 0.7;
        -FORCEXYBILLBOARD;
    }

    action void A_DustRotate() {
        A_ChangeVelocity(4, 0, 0, CVF_RELATIVE|CVF_REPLACE);
        A_SetAngle(angle+12);
    }

	States
	{
	Spawn:
        MDAD HHHIIIJJJ 2 A_DustRotate();
		stop;
	}
}

class AREAGLandSmokeRight : AREAGLandSmokeLeft
{
    action void A_DustRotate() {
        A_ChangeVelocity(8, 0, 0, CVF_RELATIVE|CVF_REPLACE);
        A_SetAngle(angle-4);
    }
}

class AREAGPitReturnPoint : Actor
{
    Default
    {
        +NOINTERACTION;
        +NOCLIP;
        Renderstyle "None";
    }
    States
    {
    Spawn:
        TROO A 1;
        wait;
    }
}

class PitTeleport : Once {}
class PitProtect : PowerProtection {
    Default {
        powerup.duration 5;
        damagefactor "Falling", 0.0;
    }
}

// MOVEMENT FLAGS //
class OnGround : Once {}
class JumpCancel : Once {}
class HeadUnderwater : Once {}
class LegsUnderwater : Once {}
