#library "mapcont"
#include "zcommon.acs"
#include "commfunc.acs"
#include "mapfunc.acs"

#define MAP_TABLET_WRAP 100

#define TID_MUSFADE 999

// MAP CONTROLLER SCRIPTS

// Script that actually handles map connections.
// ARG1 - map: which arg the map abides by, as noted in the array.
// ARG2 - door: which player spawn the player is intended to spawn, as noted by the value in its first special argument.

script "map_switchto" (int map, int door, int noSound)
{
	SetPlayerProperty(true, true, PROP_INVULNERABILITY);
	SetPlayerProperty(true, true, PROP_TOTALLYFROZEN);
	
	// Map transition stuff
	int baseVal = 640.0;
	int fadeTime = 0.2;
	int texWidth = 142.0;
	SetActorState("MusicFader", "FadeOut");
	if(!noSound)
	{
		AmbientSound("misc/mapchange", 255);
	}
	SetHudSize(1280, 960, 0);
	SetFont("MAPTRANS");
	HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 100, CR_UNTRANSLATED, baseVal, 480.0, 30.0, fadeTime, 0.0);
	Delay(2);
	for(int i = 1; i < 7; i++)
	{
		HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 100+i, CR_UNTRANSLATED, baseVal + i * texWidth, 480.0, 30.0, fadeTime, 0.0);
		HudMessageBold(s:"A"; HUDMSG_FADEINOUT, 110+i, CR_UNTRANSLATED, baseVal - i * texWidth, 480.0, 30.0, fadeTime, 0.0);
		Delay(2);
	}
	FadeTo(0, 0, 0, 1.0, fadeTime);
	
	Delay(35);
	
	checkDroneTransform(0, false);
	ChangeLevel(mapList[map][MAPPROP_MAPCODE], door, CHANGELEVEL_NOINTERMISSION);
	
	// Because ENTER scripts are only executed once per map, gotta re-execute these here.
	SetPlayerProperty(true, true, PROP_INVULNERABILITY);
	SetPlayerProperty(true, true, PROP_TOTALLYFROZEN);
	ACS_NamedExecuteAlways("map_startup", 0);
}

int musicVolume = 1.0;

function void Music_FadeTo(int del, int rate, int dest)
{
	ACS_NamedExecute("music_fade", 0, del, rate, dest);
}

script "music_fade" (int del, int rate, int dest)
{
	while(musicVolume != dest)
	{
		musicVolume = iterateTowards(musicVolume, rate, dest);
		SetMusicVolume(musicVolume);
		PrintBold(f:musicVolume, s:" / ", f:dest);
		Delay(del);
	}
}

script "map_startup" ENTER
{
	if(CheckInventory("DroneFlag")>0)
	{
		transformToDrone(0);
	}
	int baseVal = 640.0;
	int fadeTime = 0.2;
	int texWidth = 142.0;
	FadeTo(0, 0, 0, 1.0, 0.0);
	SetHudSize(1, 1, false);
	SetFont("BLACK");
	HudMessage(s:"A"; HUDMSG_ALPHA, 120, CR_UNTRANSLATED, 0, 0, 0, 1.0);
	SetHudSize(1280, 960, 0);
	SetFont("MAPTRANS");
	int holdTime = 0.6;
	for(int o = 6; o > 0; o--)
	{
		HudMessage(s:"A"; HUDMSG_FADEINOUT, 100+o, CR_UNTRANSLATED, baseVal + o * texWidth, 480.0, holdTime, 0.0, fadeTime);
		HudMessage(s:"A"; HUDMSG_FADEINOUT, 110+o, CR_UNTRANSLATED, baseVal - o * texWidth, 480.0, holdTime, 0.0, fadeTime);
		Delay(2);
	}
	HudMessage(s:"A"; HUDMSG_FADEINOUT, 100, CR_UNTRANSLATED, baseVal, 480.0, holdTime, 0.0, fadeTime);
	HudMessage(s:""; HUDMSG_ALPHA, 120, CR_UNTRANSLATED, 0, 0, 0, 0);
	FadeTo(0, 0, 0, 0.2, fadeTime);
	
	SetPlayerProperty(true, false, PROP_INVULNERABILITY);
	SetPlayerProperty(true, false, PROP_TOTALLYFROZEN);
}

// TABLET HANDLE SCRIPT
script MAP_TABLET_WRAP (int arg1, int arg2, int arg3)
{
	ACS_NamedExecuteAlways("map_tablet", 0, arg1, arg2, arg3);
}

script "map_tablet" (int tabletNum, int image)
{
	if(CheckInventory("MenuFreezer")>0)
	{
		terminate;
	}
	GiveInventory("MenuFreezer", 1);

	int levelNum = GetLevelInfo(LEVELINFO_LEVELNUM);
	if(levelNum == 0)
	{
		PrintBold(s:"\cgERROR: LEVELNUM FOR THIS MAP IS 0. PLEASE SET LEVELNUM TO NON-ZERO FOR TABLETS TO WORK!");
		terminate;
	}
	
	int mapIndex = getMapByLevelNum(levelNum);
	if(mapIndex == -1)
	{
		PrintBold(s:"\cgERROR: LEVELNUM NOT FOUND IN ACS REGISTRY. PLEASE REGISTER YOUR MAP TO USE TABLETS.");
		terminate;
	}

	str langName = strParam(s:mapList[mapIndex][MAPPROP_LANGNAME], s:"_TABLET_", i:tabletNum);
	str tabletImage = -1;
	if(image != 0) {
		tabletImage = imageList[mapIndex][image-1];
	}
	int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
	int oldButtons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
	str message = strParam(l:langName);
	int CYCLES = 6;
	int i = 0; // For the iterators.
	int msgBaseX = 150.1;
	int msgBaseY = 60.1;
	int msgAlpha = 1.0;

	int msgX = msgBaseX;
	int msgY = msgBaseY;

	PlaySound(ActivatorTID(), "misc/TabletOn", CHAN_BODY|CHAN_NOPAUSE, 0.5);
	Thing_Stop(0);
	SetPlayerProperty(0, true, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, true, PROP_INVULNERABILITY);
	
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1100, 0.0125, 4);
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1200, -0.0125, 4);

	for(i = 0; i <= CYCLES; i++) {
		msgY = msgBaseY + (40.0 * square(CYCLES-i)/2);
		msgAlpha = fixeddiv(i, CYCLES);
		printTablet(message, msgAlpha, msgX, msgY, tabletImage);
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		delay(1);
	}
	
	do
	{
		oldButtons = buttons;
		buttons = GetPlayerInput(-1, INPUT_BUTTONS);
		printTablet(message, 1.0, msgBaseX, msgBaseY, tabletImage);
		Delay(1);
	} while(!anyButtonPressed(buttons, oldButtons));

	PlaySound(ActivatorTID(), "misc/TabletOff", CHAN_BODY|CHAN_NOPAUSE, 0.5);

	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1100, 0.0, 4);
	ACS_NamedExecuteAlways("blurcam_angle", 0, PlayerNumber()+1200, 0.0, 4);

	SetPlayerProperty(0, false, PROP_TOTALLYFROZEN);
	SetPlayerProperty(0, false, PROP_INVULNERABILITY);
	TakeInventory("MenuFreezer", 1);

	for(i = CYCLES; i >= 0; i--) {
		msgY = msgBaseY + (40.0 * square(CYCLES-i)/2);
		msgAlpha = fixeddiv(i, CYCLES);
		printTablet(message, msgAlpha, msgX, msgY, tabletImage);
		delay(1);
	}
}

function void printTablet (str message, int alpha, int x, int y, str image)
{
	if(alpha == 0) {
		HudMessage(s:""; HUDMSG_ALPHA, 205, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 204, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 203, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 202, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 201, CR_UNTRANSLATED, 0, 0, 0, 0);
		HudMessage(s:""; HUDMSG_ALPHA, 200, CR_UNTRANSLATED, 0, 0, 0, 0);
		fadeto(0, 0, 0, 0, 0);
	} else {
		int camX = 110;
		int camY = 100;
		int hold = 0.0;

		SetHudClipRect(0, 0, 0, 0, 0, true);
		SetHudSize(1, 1, false);
		SetFont("BLACK");
		HudMessage(s:"A"; HUDMSG_ALPHA, 205, CR_UNTRANSLATED, 0, 0, 0, alpha);

		SetHudSize(camX, camY, false);
		SetCameraToTexture(PlayerNumber()+1100, "CAMBLUR1", 85);
		SetCameraToTexture(PlayerNumber()+1200, "CAMBLUR2", 85);
		SetFont("CAMBLUR1");
		HudMessage(s:"A"; HUDMSG_ALPHA|HUDMSG_ADDBLEND, 204, CR_UNTRANSLATED, (camX/2)<<16, (camY/2)<<16, hold, fixedmul(0.3, alpha));
		SetFont("CAMBLUR2");
		HudMessage(s:"A"; HUDMSG_ALPHA|HUDMSG_ADDBLEND, 203, CR_UNTRANSLATED, (camX/2)<<16, (camY/2)<<16, hold, fixedmul(0.3, alpha));
		SetHudSize(1024, 768, false);
		SetFont("TABLETBG");
		HudMessage(s:"A"; HUDMSG_ALPHA, 202, CR_UNTRANSLATED, 512.0, 384.0, hold, fixedmul(0.9, alpha));
		
		SetHudSize(1280, 960, 0);
		SetHudClipRect(140, 0, 1000, 960, 1000, true);
		SetFont("TABLFONT");
		HudMessage(s:message; HUDMSG_ALPHA, 201, CR_UNTRANSLATED, x, y, hold, fixedmul(0.9, alpha));
		if(image != -1) {
			SetFont(image);
			HudMessage(s:"A"; HUDMSG_ALPHA, 200, CR_UNTRANSLATED, x+500.0, y+500.0, hold, fixedmul(0.9, alpha));
		}
	}
}

script "movement_aircontrol" OPEN
{
	Delay(1);
	SetAirControl(0.65);
	SpawnForced("MusicFader", 0, 0, 0, TID_MUSFADE);
}

script "tablet_distanceCheck" (void)
{
	int z = GetActorZ(0);
	bool active = false;
	while(true)
	{
		for(int i = 0; i < PlayerCount(); i++)
		{
			if(abs(z - GetActorZ(i+1000)) < 64.0 && angleInRange(GetActorAngle(i+1000), GetActorAngle(0), 0.25))
			{
				active = true;
			}
		}
		
		if(active)
		{
			if(!CheckFlag(0, "USESPECIAL"))
			{
				SetActorFlag(0, "USESPECIAL", true);
			}
		}
		else if(!active)
		{
			if(CheckFlag(0, "USESPECIAL"))
			{
				SetActorFlag(0, "USESPECIAL", false);
			}
		}
		
		active = false;
		
		Delay(5);
	}
}
