// The root of it all. Contains the essential features that get wrapped into all other weapons.

const LAYER_MAIN = 1;
const LAYER_SUB = 1000;
const FUSE_LAYER = 1001;

class AREAGProtoWeapon : Weapon {

    bool bMainInProgress;
    bool bSubInProgress;
    bool bLoweringWeapons;
    int iLastSubWeapon;
    mixin AREAG_Common;

    AREAGPlayerPawn plr;

    Default
    {
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 20;
        weapon.ammotype2 "WhipLash";
        Weapon.Ammotype "WhipLash";
        +WEAPON.AMMO_OPTIONAL;
        +WEAPON.ALT_AMMO_OPTIONAL;
        +WEAPON.NOALERT;
        +WEAPON.CHEATNOTWEAPON;
    }

    bool bHandedness;

    action void A_InitWeap() {
        invoker.bLoweringWeapons = false;
        invoker.bMainInProgress = true;
        invoker.bSubInProgress = true;
        invoker.plr = AREAGPlayerPawn(self);
        invoker.iLastSubWeapon = invoker.plr.iSelectedWep;
        invoker.bHandedness = GetCVarBool("cl_handedness");
        A_GunFlash();

        A_SetHandedness(LAYER_MAIN);
        A_SetHandedness(LAYER_SUB);
    }

    action void A_YawRecoil(double amt) {
        if(invoker.bHandedness) {
            amt = -amt;
        }
        A_SetAngle(angle + amt);
    }

    action Actor A_FireHandedProjectile(String leftProj, String rightProj, double angle = 0, bool useammo = true, double spawnofs_xy = 0, double spawnheight = 0, int flags = 0, double pitch = 0)
    {
        if(invoker.bHandedness) {
            return A_FireProjectile(leftProj, angle, useammo, spawnofs_xy, spawnheight, flags, pitch);
        } else {
            return A_FireProjectile(rightProj, angle, useammo, spawnofs_xy, spawnheight, flags, pitch);
        }
    }

    action void A_SetHandedness(int layer) {
        if(invoker.bHandedness) {
            A_OverlayFlags(layer, PSPF_FLIP|PSPF_MIRROR, true);
        }
    }

    double handedPos(double x) {
        if(bHandedness) {
            return -x;
        }
        return x;
    }

    // Control functions
    action void A_LowerBothHands() {
        invoker.bLoweringWeapons = true;
        invoker.bMainInProgress = true;
        invoker.bSubInProgress = true;
    }

    action State A_MainRaise() {
        invoker.bMainInProgress = false;
        return ResolveState("MainRaise");
    }

    States
    {
    // Base weapon states (map to other states automatically)
    Deselect:
        TNT1 A 0;
        goto Lower;
    Select:
        TNT1 A 8;
        TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise;
        TNT1 A 1 A_Raise;
        loop; // goes to Ready after enough calls to A_Raise
    Ready:
        NULL A 0;
        goto Init;
    Fire:
        TNT1 A 0;
        wait;
    AltFire:
        TNT1 A 0;
        wait;
    Flash: // A_GunFlash called by A_InitWeap
        TNT1 A 0;
        goto AltRaise;

    // Shared states, weapons shouldn't override these
    Init:
        TNT1 A 0 A_InitWeap();
        goto Raise;
    Lower:
        TNT1 A 0 A_LowerBothHands();
        TNT1 A 1 A_JumpIf(true, "MainLower");
        wait;
    LowerToDeselect:
        TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower;
        TNT1 A 1 A_Lower;
        loop;
    Raise:
        TNT1 A 1 A_MainRaise();
        wait;
    AltRaise:
        TNT1 A 1 A_SubRaise();
        wait;
    }
}
