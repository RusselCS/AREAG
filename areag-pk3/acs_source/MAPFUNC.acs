// These are common definitions used for map controlling scripts.

#define MAPPROP_LEVELNUM 0
#define MAPPROP_MAPCODE 1
#define MAPPROP_TEXTNAME 2
#define MAPPROP_RUNENAME 3
#define MAPPROP_LANGNAME 4

// MAP DEFINITIONS FOR ACS SIDE
// 0 - Levelnum
// 1 - MAPCODE
// 2 - Map Name
// 3 - Map Name texture
// 4 - Map's language name

#define MAX_MAPS 11
#define MAX_IMAGES 10

global int 50: global_saveId;

function int findMapRoute(int mapNum) {
	return ScriptCall("MapDataRepo", "getMapByRoute", mapNum);
}

#define STR_EVENT "EVENT"
#define STR_PICKUP "PICKUP"

function int getMapByLevelNum(int levelNum)
{
	return ScriptCall("MapDataRepo", "getMapByLevelNum", levelNum);
}

function str getMapCode(int mapIndex)
{
	return ScriptCall("MapDataRepo", "getCode", mapIndex);
}

function str getTabletImage(int mapIndex)
{
	return ScriptCall("MapDataRepo", "getTabletImage", mapIndex);
}

function int getSaveEvent(int levelNum, int evt)
{
	return ScriptCall("MapDataRepo", "getTempEventByLevel", levelNum, evt);
}

function void saveFile(int file) {
	ScriptCall("MapDataRepo", "saveFile", file);
}

function void loadFile(int file) {
	ScriptCall("MapDataRepo", "loadFile", file);
}

function void queueSaveEvent(int levelNum, int evt) {
	ScriptCall("MapDataRepo", "queueSaveEvent", levelNum, evt);
}

function void loadMapEvents(int levelNum) {
	ScriptCall("MapDataRepo", "loadMapEvents", levelNum);
}

// function void setSaveEvent(int mId, int type, int evt, int val) {
// 	str cvar = -1;
// 	str flags = -1;

// 	if(type == 0) { // map event

// 		cvar = StrParam(s:cvarList[mId][0], s:"_", s:STR_EVENT, s:"_0");
// 		flags = getCVarString(cvar);
// 		flags = insertToStringPos(flags, val, evt);
// 		SetCVarString(cvar, flags);
		
// 	} else if(type == 1) { // pickup event

// 		cvar = StrParam(s:cvarList[mId][0], s:"_", s:STR_PICKUP, s:"_0");
// 		flags = getCVarString(cvar);
// 		flags = insertToStringPos(flags, val, evt);
// 		SetCVarString(cvar, flags);
// 	}
// }

// function void persistEvents(void) {
// 	int saveId = global_saveId;
// 	str cvar1 = -1;
// 	str cvar2 = -1;
// 	str flags = -1;

// 	for(int i = 0; i < MAX_MAPS; i++) {
// 		cvar1 = StrParam(s:cvarList[i][0], s:"_", s:STR_EVENT, s:"_0");
// 		cvar1 = StrParam(s:cvarList[i][0], s:"_", s:STR_EVENT, s:"_", i:saveId);
// 		flags = getCVarString(cvar1);
// 		SetCVarString(cvar2, flags);

// 		cvar1 = StrParam(s:cvarList[i][0], s:"_", s:STR_PICKUP, s:"_0");
// 		cvar1 = StrParam(s:cvarList[i][0], s:"_", s:STR_PICKUP, s:"_", i:saveId);
// 		flags = getCVarString(cvar1);
// 		SetCVarString(cvar2, flags);
// 	}
// }

// function str insertToStringPos(str in, int c, int pos) {
// 	int len = StrLen(in);
// 	str ret = StrParam(s:StrLeft(in, pos), i:c, s:StrRight(in, len-pos-1));
// 	return ret;
// }

function void setSwitchState(int tid, str state, int loading) {
	if(loading) {
		SetActorState(tid, state);
	}
}

function void queueEventSave(int evt, bool loading) {
	if(!loading) {
		ACS_NamedExecuteAlways("map_queueEvent", 0, evt);
	}
}

function int checkEventState(int evt) {
	return ACS_NamedExecuteWithResult("map_checkEvent", evt);
}

function void moveFloor(int tag, int height, int speed) {
	Floor_Stop(tag);
	Floor_MoveToValue(tag, abs(height), speed, height < 0);
}

function void moveCeiling(int tag, int height, int speed) {
	Ceiling_Stop(tag);
	Ceiling_MoveToValue(tag, abs(height), speed, height < 0);
}

function bool tagMoving(int tag) {
	return false;
}

function void clearSpecial(int tag) {
	SetThingSpecial(tag, 0, 0, 0, 0, 0, 0);
}

function void spawnCoins(int baseTag, int coinTag, int amount, bool clrSpc) {
	int succeed = SpawnSpot("CoinDropper", baseTag, coinTag, 0);
	if(succeed) {
		SetActorProperty(coinTag, APROP_Score, amount);
		if(clrSpc) {
			clearSpecial(baseTag);
		}
	}
}
