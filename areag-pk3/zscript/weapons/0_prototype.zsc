// The root of it all. Contains the essential features that get wrapped into all other weapons.

class AREAGProtoWeapon : Weapon {

    bool bLowerSub;

    Default
    {
        Weapon.AmmoUse 1;
        Weapon.AmmoGive 20;
        weapon.ammotype2 "WhipLash";
        Weapon.Ammotype "WhipLash";
        +WEAPON.AMMO_OPTIONAL;
        +WEAPON.ALT_AMMO_OPTIONAL;
        +WEAPON.NOALERT;
        +WEAPON.CHEATNOTWEAPON;
    }

    action State A_AREAGRefire() {
        int iButtons = ZSCPlayerPawn(self).iButtons;

        if(iButtons & BT_ATTACK) {
            return ResolveState("Hold");
        } else if(iButtons & BT_ALTATTACK) {
            return ResolveState("AltHold");
        } else {
            return ResolveState(Null);
        }
    }

    action State A_AREAGUseSub() {

        int wep = ZSCPlayerPawn(self).iSelectedWep;

        for(int i = 0; i < SWEP_END; i++) {
            if(wep == i && CountInv(SubWeapons.ammoField(i)) > 0)
            {
                return resolveState(SubWeapons.subRelease[i]);
            }
        }

        return resolveState("MainRelease");
    }

    action void A_ReadySubWeapons() {
        A_GunFlash();
    }

    action void A_AREAGLowerSub() {
        invoker.bLowerSub = true;
    }

    action void A_AREAGRaiseSub() {
        invoker.bLowerSub = false;
    }

    action State A_AREAGSubReady() {
        
        int wep = ZSCPlayerPawn(self).iSelectedWep;

        if(invoker.bLowerSub) {
            return ResolveState(Null);
        } else
        if(wep == SWEP_KNIFE && CountInv("KnifeAmmo") > 0) {
            return resolveState("KnifeRaise");
        } else
        if(wep == SWEP_DYNAMITE && CountInv("DynamiteAmmo") > 0) {
            return resolveState("DynamiteRaise");
        }

        return ResolveState("EmptyRaise");
    }

    action State A_AREAGEmptyActive() {

        int wep = ZSCPlayerPawn(self).iSelectedWep;
        bool bSwitch = invoker.bLowerSub;

        for(int i = 0; i < SWEP_END && !bSwitch; i++) {
            bSwitch |= wep == i && CountInv(SubWeapons.ammoField(i)) > 0;
        }

        if(bSwitch) {
            return ResolveState("EmptyLower");
        }

        return ResolveState(null);
    }

    action State A_AREAGWeaponReady() {

        int iButtons = ZSCPlayerPawn(self).iButtons;
        int iOldButtons = ZSCPlayerPawn(self).iOldButtons;

        int rWep = ZSCPlayerPawn(self).iSelectedWep;
        if(rWep >= 0 && rWep < SubWeapons.subFields.Size()) {
            if((iButtons & BT_USER1) && !(iOldButtons & BT_USER1)) {
                rWep = invoker.nextSubCycle(rWep);

                while(self.CountInv(SubWeapons.maxField(rWep)) == 0) {
                    rWep = invoker.nextSubCycle(rWep);
                }
            } else if((iButtons & BT_USER2) && !(iOldButtons & BT_USER2)) {
                rWep = invoker.prevSubCycle(rWep);

                while(self.CountInv(SubWeapons.maxField(rWep)) == 0) {
                    rWep = invoker.prevSubCycle(rWep);
                }
            }
            ZSCPlayerPawn(self).iSelectedWep = rWep;
        }

        A_WeaponReady();
        return ResolveState(null);
    }

    int nextSubCycle(int wep) {
        return ++wep < SWEP_END ? wep : SWEP_NONE+1;
    }

    int prevSubCycle(int wep) {
        return --wep > SWEP_NONE ? wep : SWEP_END-1;
    }

    States
    {
        Ready:
            TNT1 A 1;
            loop;
        ReadyRaise:
            TNT1 A 1;
            loop;
        ReadyLoop:
            TNT1 A 1;
            loop;
        Deselect:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Lower;
            TNT1 A 1 A_Lower;
            Loop;
        Select:
            TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 0 A_Raise;
            TNT1 A 1 A_Lower;
            Loop;
        Fire:
            TNT1 A 0;
            goto Ready;
        Altfire:
            TNT1 A 0 A_AREAGLowerSub();
            TNT1 A 1 A_JumpIf(true, "AltLower");
            wait;
        AltHold:
            TNT1 A 1;
            TNT1 A 0 A_AREAGRefire();
            goto AltRelease;
        AltRelease:
            HBMA A 0 A_AREAGUseSub();
            HBMA A 1 A_JumpIf(true, "FireEnd");
            wait;
        FireEnd:
            TNT1 AAAAAAAAAA 1 A_AREAGRefire();
            TNT1 A 1 A_JumpIf(true, "ReadyRaise");
            wait;
        Flash:
            TNT1 A 1 A_AREAGSubReady();
            loop;
        EmptyRaise:
            HBM2 DCBA 1;
            goto EmptyLoop;
        EmptyLoop:
            HBM2 A 1 A_AREAGEmptyActive();
            loop;
        EmptyLower:
            HBM2 ABCD 1;
            goto Flash;
        NoAmmo:
            HBM2 A 1;
            goto ReadyLoop;
    }
}

class SubWeaponPickup : CustomInventory
{
	Default
	{
		inventory.pickupmessage "";
		inventory.pickupsound "upgrade/offense";
		+INVENTORY.AUTOACTIVATE;
		+FLOATBOB;
		+NOGRAVITY;
		Height 64;
		Scale 2.5;
	}

	action void A_AREAGSelectWeapon(int wep) {
		if(ZSCPlayerPawn(self).iSelectedWep == SWEP_NONE)
			ZSCPlayerPawn(self).iSelectedWep = wep;
	}
}

struct SubWeapons {
	static const String[] subFields = {
		"Knife",
		"Dynamite"
	};

    static const StateLabel[] subRaise = {
		"KnifeRaise",
		"DynamiteRaise"
	};

    static const StateLabel[] subRelease = {
		"KnifeThrow",
		"DynamiteThrow"
	};

    static const String[] subNames = {
		"Knife",
		"Dynamite"
	};

    static String maxField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Max");
    }

    static String ammoField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Ammo");
    }

    static String equippedField(int i) {
        return String.format("%s%s", SubWeapons.subFields[i], "Equipped");
    }
}
