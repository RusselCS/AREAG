class MapDataRepo Abstract
{
    static MapUtilInit getRepository() {
        let evh = MapUtilInit(StaticEventHandler.Find("MapUtilInit"));
        if(evh) {
            return evh;
        }
        throwAbortException("MapDataRepo.getRepository(): Map Data Event Handler not instantiated.");
        return null;
    }

    static int getLevelNum(int index) {
        let evh = getRepository();
        return evh.maps[index].getLevelNum();
    }

    static String getCode(int index) {
        let evh = getRepository();
        return evh.maps[index].getCode();
    }

    static String getRuneName(int index) {
        let evh = getRepository();
        return evh.maps[index].getRuneName();
    }

    static String getLangName(int index) {
        let evh = getRepository();
        return evh.maps[index].getLangName();
    }

    static String getSaveBase(int index) {
        let evh = getRepository();
        return evh.maps[index].getSaveBase();
    }

    static String getTempEvent(int index) {
        let evh = getRepository();
        return evh.maps[index].getTempEvent();
    }

    static String getTempPickup(int index) {
        let evh = getRepository();
        return evh.maps[index].getTempPickup();
    }

    static String getSaveEvent(int index, int save) {
        let evh = getRepository();
        return evh.maps[index].getSaveEvent(save);
    }

    static String getSavePickup(int index, int save) {
        let evh = getRepository();
        return evh.maps[index].getSavePickup(save);
    }

    static int getMapByLevelNum(int levelNum) {
        let evh = getRepository();
        for(int i = 0; i < evh.maps.size(); i++) {
            if(evh.maps[i].getLevelNum() == levelNum)
            {
                return i;
            }
        }
        throwAbortException("MapDataRepo.getMapByLevelNum: Map not found. Levelnum: ", levelNum);
        return -1;
    }

    static String getTabletImage(int mapIndex) {
        let evh = getRepository();
        return evh.maps[mapIndex].getTabletImage();
        return "";
    }

    static int getRoute(int mapIndex) {
        let evh = getRepository();
        return evh.maps[mapIndex].getRoute();
    }

    static void setRoute(int mapIndex, int newIndex) {
        let evh = getRepository();
        evh.maps[mapIndex].setRoute(newIndex);
    }

    static int getMapByRoute(int lNum) {
        let id = getMapByLevelNum(lNum);
        let evh = getRepository();
        return evh.maps[id].getRoute();
    }

    static Cvar findCVar(String cv) {
        CVar cvr = CVar.findCVar(cv);
        if(cvr) {
            return cvr;
        }
        throwAbortException("MapDataRepo.findCvar: Cvar not found: %s", cv);
        return null;
    }

    static int getTempEventByLevel(int lNum, int evt) {
        let id = getMapByLevelNum(lNum);
        let evh = getRepository();
        CVar save = findCVar(evh.maps[id].getTempEvent());
        return save.getString().mid(evt, 1).ToInt();
    }

    static int getTempPickupByLevel(int lNum, int evt) {
        let id = getMapByLevelNum(lNum);
        let evh = getRepository();
        CVar save = findCVar(evh.maps[id].getTempPickup());
        return save.getString().mid(evt, 1).ToInt();
    }

    static void loadFile(int save) {
        let evh = getRepository();
        for(int i = 0; i < evh.maps.size(); i++) {
            CVar eventFrom = findCVar(evh.maps[i].getSaveEvent(save));
            CVar pickupFrom = findCVar(evh.maps[i].getSavePickup(save));
            CVar eventTo = findCVar(evh.maps[i].getTempEvent());
            CVar pickupTo = findCVar(evh.maps[i].getTempPickup());

            eventTo.setString(eventFrom.getString());
            pickupTo.setString(pickupFrom.getString());
        }
    }

    static void saveFile(int save) {
        let evh = getRepository();

        for(int i = 0; i < evh.maps.size(); i++) {
            CVar eventFrom = findCVar(evh.maps[i].getTempEvent());
            CVar pickupFrom = findCVar(evh.maps[i].getTempPickup());
            CVar eventTo = findCVar(evh.maps[i].getSaveEvent(save));
            CVar pickupTo = findCVar(evh.maps[i].getSavePickup(save));

            eventTo.setString(eventFrom.getString());
            pickupTo.setString(pickupFrom.getString());
        }
    }

    // Set game 0's stuff to all 0s
    static void newFile() {
        let evh = getRepository();

        for(int i = 0; i < evh.maps.size(); i++) {
            CVar event = findCVar(evh.maps[i].getTempEvent());
            CVar pickup = findCVar(evh.maps[i].getTempPickup());

            let evtEval = string.format("%s0%dd", "%", event.getString().length());
            let pckEval = string.format("%s0%dd", "%", pickup.getString().length());

            event.setString(string.format(evtEval, 0));
            pickup.setString(string.format(pckEval, 0));
        }
    }

    static void queueSaveEvent(int levelNum, int evt) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();
        CVar eventFrom = findCVar(evh.maps[id].getTempEvent());
        String st = eventFrom.getString();
        eventFrom.setString(setChar(st, 1, evt));
    }

    static void queuePickupEvent(int levelNum, int evt) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();
        CVar eventFrom = findCVar(evh.maps[id].getTempPickup());
        String st = eventFrom.getString();
        eventFrom.setString(setChar(st, 1, evt-1));
    }

    // Sets a cvar flag, much like queueCvarEvent except it takes in cvar instead of map
    static void setToggleEvent(String cv, int evt) {
        CVar eventFrom = findCVar(cv);
        String st = eventFrom.getString();
        int res = 1;

        if(getChar(st, evt) != 0) {
            res = 0;
        }

        eventFrom.setString(setChar(st, res, evt));
    }

    // Gets a cvar flag
    static int getToggleEvent(String cv, int evt) {
        CVar eventFrom = findCVar(cv);
        return getToggleEventCvar(eventFrom, evt);
    }

    static int getToggleEventCvar(Cvar eventFrom, int evt) {
        String st = eventFrom.getString();
        return getChar(st, evt);
    }

    // Gets the full array
    static String getEventArray(String cv) {
        CVar eventFrom = findCVar(cv);
        return getEventArrayCvar(eventFrom);
    }

    static String getEventArrayCvar(Cvar eventFrom) {
        return eventFrom.getString();
    }

    static string setChar(String st, int val, int pos) {
        int len = st.length();
        if(pos < 0 || pos >= len) {
            throwAbortException("\cgERROR IN SETCHAR: \c-Input out of bounds. Length: %d, Index: %d", len, pos);
        }

        return String.format("%s%d%s", st.Left(pos), val, st.Mid(pos+1, len-pos));
    }

    static int getChar(String st, int pos) {
        return st.mid(pos, 1).toInt();
    }

    static void loadMapEvents(int levelNum) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();
        CVar eventFrom = findCVar(evh.maps[id].getTempEvent());
        String flags = eventFrom.getString();

        for(int i = 0; i < flags.length(); i++)
        {
            if(getChar(flags, i) == 1) {
                ACS_ExecuteAlways(-int(name("map_events")), 0, 0, i, true);
            }
        }
    } // End loadMapEvents

    static String getPickupFromHere(int levelnum, int index) {
        let id = getMapByLevelNum(levelnum);
        let evh = getRepository();
        return evh.maps[id].getPickup(index-1);
    }

    static String getPickupFrom(int mapIndex, int index) {
        let evh = getRepository();
        return evh.maps[mapIndex].getPickup(index-1);
    }

    static int getMapCount() {
        let evh = getRepository();
        return evh.maps.size() - evh.excludeMaps;
    }

    static String getRoomName(int levelnum, int room) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();

        if(id != -1 && evh) {
            return evh.maps[id].getRoom(room).getTitle();
        }
        return "";
    }

    static int getRoomFloorCount(int levelnum, int room) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();

        if(id != -1 && evh) {
            return evh.maps[id].getRoom(room).getFloorZSize();
        }
        return 0;
    }

    static float getRoomFloorZ(int levelnum, int room, int idx) {
        let id = getMapByLevelNum(levelNum);
        let evh = getRepository();

        if(id != -1 && evh) {
            return evh.maps[id].getRoom(room).getFloorZ(idx);
        }
        return -255.0;
    }
}
